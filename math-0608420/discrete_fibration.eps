%!PS-Adobe-2.0 EPSF-2.0
%%Title: discrete_fibration.eps
%%Creator: fig2dev Version 3.2.3 Patchlevel 
%%CreationDate: Wed Mar 29 19:52:50 2006
%%For: baez@math-cl-n03 (John Baez)
%%BoundingBox: 0 0 279 258
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 258 moveto 0 0 lineto 279 0 lineto 279 258 lineto closepath clip newpath
-24.0 505.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
% Polyline
30.000 slw
gs  clippath
4293 5719 m 4343 5546 l 3877 5411 l 4285 5623 l 3827 5583 l cp
eoclip
n 4304 5629 m 4273 5620 l 4254 5614 l 4229 5607 l 4200 5598 l 4167 5589 l
 4132 5579 l 4094 5568 l 4056 5558 l 4018 5547 l 3981 5537 l
 3945 5527 l 3910 5519 l 3877 5510 l 3845 5503 l 3815 5496 l
 3787 5490 l 3759 5484 l 3732 5479 l 3705 5474 l 3679 5470 l
 3653 5466 l 3627 5463 l 3602 5459 l 3577 5457 l 3552 5454 l
 3526 5452 l 3499 5450 l 3472 5448 l 3444 5446 l 3416 5445 l
 3387 5443 l 3357 5442 l 3327 5441 l 3297 5441 l 3266 5440 l
 3236 5440 l 3205 5440 l 3174 5441 l 3144 5441 l 3114 5442 l
 3084 5443 l 3055 5444 l 3027 5446 l 2999 5447 l 2971 5449 l
 2945 5451 l 2919 5453 l 2893 5455 l 2868 5457 l 2843 5459 l
 2817 5462 l 2790 5465 l 2764 5468 l 2737 5472 l 2710 5475 l
 2682 5479 l 2653 5484 l 2622 5489 l 2590 5494 l 2557 5500 l
 2521 5506 l 2485 5513 l 2447 5520 l 2408 5527 l 2369 5535 l
 2331 5542 l 2295 5549 l 2262 5556 l 2232 5562 l 2207 5567 l
 2187 5571 l 2173 5574 l 2164 5575 l 2158 5577 l
 2156 5577 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3827 5583 m 4285 5623 l 3877 5411 l 3939 5522 l 3827 5583 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
30.000 slw
gs  clippath
4337 4708 m 4311 4530 l 3831 4601 l 4290 4625 l 3857 4779 l cp
eoclip
n 4310 4622 m 4276 4627 l 4254 4630 l 4225 4634 l 4191 4639 l 4151 4644 l
 4106 4651 l 4058 4657 l 4007 4665 l 3955 4672 l 3903 4679 l
 3851 4687 l 3801 4694 l 3753 4701 l 3707 4708 l 3664 4714 l
 3623 4720 l 3584 4726 l 3548 4732 l 3514 4737 l 3483 4742 l
 3453 4747 l 3424 4751 l 3397 4756 l 3372 4760 l 3347 4765 l
 3323 4769 l 3294 4775 l 3266 4780 l 3238 4785 l 3211 4791 l
 3184 4797 l 3158 4802 l 3131 4808 l 3105 4814 l 3079 4820 l
 3054 4826 l 3028 4833 l 3004 4839 l 2979 4845 l 2956 4851 l
 2932 4857 l 2910 4864 l 2887 4870 l 2866 4876 l 2845 4882 l
 2824 4887 l 2804 4893 l 2784 4899 l 2765 4904 l 2745 4910 l
 2725 4916 l 2705 4921 l 2684 4927 l 2662 4934 l 2639 4940 l
 2615 4947 l 2589 4954 l 2561 4962 l 2532 4970 l 2500 4979 l
 2467 4988 l 2432 4998 l 2396 5008 l 2360 5018 l 2324 5028 l
 2291 5037 l 2261 5045 l 2234 5053 l 2213 5058 l 2198 5063 l
 2187 5066 l 2182 5067 l
 2179 5068 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3857 4779 m 4290 4625 l 3831 4601 l 3933 4677 l 3857 4779 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 1584 4135 m 1479 4135 1479 6357 105 arcto 4 {pop} repeat
  1479 6462 4914 6462 105 arcto 4 {pop} repeat
  5019 6462 5019 4240 105 arcto 4 {pop} repeat
  5019 4135 1584 4135 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
30.000 slw
gs  clippath
4271 7599 m 4323 7427 l 3859 7286 l 4264 7503 l 3807 7458 l cp
eoclip
n 4283 7509 m 4250 7499 l 4229 7493 l 4203 7486 l 4172 7477 l 4137 7467 l
 4099 7456 l 4059 7445 l 4019 7433 l 3978 7422 l 3938 7412 l
 3900 7401 l 3863 7392 l 3828 7383 l 3795 7375 l 3763 7368 l
 3733 7361 l 3704 7355 l 3676 7350 l 3648 7345 l 3621 7340 l
 3594 7336 l 3567 7333 l 3541 7329 l 3516 7326 l 3490 7324 l
 3463 7321 l 3436 7319 l 3408 7317 l 3380 7315 l 3351 7313 l
 3322 7312 l 3292 7311 l 3262 7310 l 3231 7310 l 3200 7309 l
 3170 7309 l 3139 7309 l 3108 7310 l 3078 7310 l 3048 7311 l
 3019 7312 l 2990 7314 l 2962 7315 l 2934 7317 l 2907 7319 l
 2881 7321 l 2855 7323 l 2830 7325 l 2806 7328 l 2782 7330 l
 2754 7334 l 2726 7337 l 2699 7341 l 2671 7345 l 2642 7350 l
 2612 7355 l 2581 7361 l 2549 7368 l 2515 7375 l 2479 7382 l
 2441 7390 l 2402 7399 l 2363 7408 l 2323 7417 l 2285 7426 l
 2248 7434 l 2215 7442 l 2187 7449 l 2165 7454 l 2148 7458 l
 2137 7461 l 2131 7462 l
 2128 7463 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3807 7458 m 4264 7503 l 3859 7286 l 3919 7398 l 3807 7458 l 
 cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 1584 6889 m 1479 6889 1479 8291 105 arcto 4 {pop} repeat
  1479 8396 4924 8396 105 arcto 4 {pop} repeat
  5029 8396 5029 6994 105 arcto 4 {pop} repeat
  5029 6889 1584 6889 105 arcto 4 {pop} repeat
 cp gs col0 s gr 
% Polyline
30.000 slw
gs  clippath
856 7203 m 1036 7203 l 1036 6762 l 946 7122 l 856 6762 l cp
eoclip
n 946 7188 m
 946 5619 l gs col0 s gr gr

% arrowhead
n 856 6762 m 946 7122 l 1036 6762 l  col0 s
7.500 slw
% Ellipse
n 4472 7557 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 291.07 496.73]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1974 7497 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 124.53 492.73]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4474 5715 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 291.20 373.93]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4468 5170 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 290.80 337.60]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 4480 4607 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 291.60 300.07]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1999 5653 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 126.20 369.80]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 1993 5108 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 125.80 333.47]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 2005 4545 106 106 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 126.60 295.93]  PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
30.000 slw
n 3360 4558 m 3644 4558 l 3644 4917 l 3360 4917 l
 cp gs col7 1.00 shd ef gr gs col7 s gr 
% Polyline
n 440 6551 m 724 6551 l 724 6910 l 440 6910 l
 cp gs col7 1.00 shd ef gr gs col7 s gr 
% Polyline
gs  clippath
4266 5201 m 4346 5040 l 3912 4823 l 4275 5105 l 3832 4984 l cp
eoclip
n 4293 5114 m 4265 5100 l 4248 5092 l 4225 5081 l 4197 5067 l 4164 5051 l
 4128 5034 l 4088 5015 l 4047 4995 l 4005 4975 l 3962 4954 l
 3919 4934 l 3878 4915 l 3838 4896 l 3799 4878 l 3762 4861 l
 3727 4846 l 3694 4831 l 3663 4817 l 3633 4804 l 3605 4792 l
 3578 4781 l 3551 4771 l 3526 4761 l 3501 4751 l 3477 4742 l
 3453 4734 l 3426 4725 l 3398 4716 l 3371 4707 l 3343 4698 l
 3315 4690 l 3287 4682 l 3258 4675 l 3229 4667 l 3201 4660 l
 3171 4653 l 3142 4647 l 3113 4641 l 3084 4635 l 3056 4629 l
 3027 4624 l 2999 4619 l 2972 4614 l 2945 4610 l 2919 4606 l
 2894 4602 l 2870 4599 l 2846 4596 l 2823 4593 l 2800 4590 l
 2778 4588 l 2756 4585 l 2731 4583 l 2705 4580 l 2680 4578 l
 2654 4576 l 2627 4574 l 2599 4572 l 2569 4570 l 2538 4568 l
 2504 4566 l 2469 4564 l 2433 4562 l 2396 4561 l 2358 4559 l
 2323 4557 l 2289 4556 l 2260 4555 l 2236 4554 l 2218 4553 l
 2206 4552 l 2199 4552 l
 2196 4552 l gs col0 s gr gr

% arrowhead
7.500 slw
n 3832 4984 m 4275 5105 l 3912 4823 l 3953 4944 l 3832 4984 l 
 cp gs 0.00 setgray ef gr  col0 s
$F2psEnd
rs
end
