%!PS-Adobe-3.1 EPSF-3.0
%%Title: lightspeedangle.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: David Malament
%%CreationDate: 1/2/05
%%BoundingBox: 0 0 150 74
%%HiResBoundingBox: 0 0 149.3882 73.0987
%%CropBox: 0 0 149.3882 73.0987
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: lightspeedangle.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -73.0987 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 73.0987 li
149.389 73.0987 li
149.389 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
149 0 li
149 73 li
0 73 li
0 0 li
clp
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
76.9 0.00195313 mo
77.19 72.8096 li
false sop
0 0 0 1 cmyk
s
1 ml
[2.8346 2.8346 ] 0 dsh
149.035 0.995118 mo
77.4708 72.5596 li
0 0 0 1 cmyk
s
[] 0 dsh
30.772 0.861329 mo
52.4483 72.8096 li
0 0 0 1 cmyk
s
[2.8346 2.8346 ] 0 dsh
51.4673 72.8096 mo
0.408204 0.610352 li
0 0 0 1 cmyk
s
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (David Malament) (Social Sciences, UC Irvine)
%%Title: (lightspeedangle.eps)
%%CreationDate: 1/2/05 1:59 PM
%AI9_DataStream
%Gb"-6l`OL7EA%"hoa^jp%kQ%gaSSC[#2$OG[uZSa92Ji@gb94kp(f7SLh$mAe+#R!`"s"mY-k9e/bN[/o:oG$Rh_2==(YuRADHdO
%Nul%1k5Fa5J,b:Z0E0QVmp8E[0:$n8oBE$2rnHVNH1TRk6$QPL8GI*A'2?Nj3UV3>3PoV'aQ")_hn4=-rp*p@q8MrpYJ*&Inb.ko
%^\['J_qWM/s*4D(rZCFoSj%Z$k37dWhgP4k?$dFhbJ2M<^]!H(5J6gRSc7BZs7$$`m5Me0o4rXHc0t\kSc&C#Id"PqIt.CYl`Xl)
%dX.2pTE"0)J)%e<T`4bVJ,@K[5CEI\f3a"#p#f\ps.@&f`qTM[m%#65q9rs\Qeq(k^QBW,*oHn9BA^B#g'2W-[??#grJNc%iIAW>
%eXlj:8fqel62hPqKjhYU%f(/C(lJ,@?N"cgFI2HR^?4%^I`*b"[;=g)<;AEIPII1a)[m;ar0KA2rq,ojYM\Qtjj7>b]0%VChYumo
%AQ>g3`;f,DGJ-HBD-PIJhgYRecbI-iVpCr!J,f0X?i?lGn^jBtgX=r.q=Ve#s51,:/Z--DP<j]ic.b0arq?<R?OO"D5gpeOV_<N!
%k3XhjdX(WOm:X#!]:%p@f&0n!qsk89^(u=uipA\?r%IM.n=T^URs2&#ql_qc)CaSJ^\ZEKp]'g'-T]rt.JCB>$J$Fi&?B3Cl1t\M
%[]s1"lOQeO=a&M1-%7E[pT#r3s24$gJ#Oho.a#O'ok/c#oAsoI4Fd=Q(BPA:$0l&TfC/_bUUE\^qhm<(;:+giJ,/p/2\PQCDV/;W
%jd0KOs2k;qg]U>YJ,SNCcaEf@?iKYdGQ7[AZd/fA1!,*kh2msf#gL,6r9WaqA4^!CGQ7'Ts13RPYHP3`K)E_.J%(0IkJZ9@1SHhh
%^H(?+SFLC?p?U0@T!kP#6`\f-XYmJ#%BWf\H=ELfU<T3A1Z].=SeJ6g6nA0CJ"tQiN)o*tSiiY8bP@)T:J^cYl)?O&rUbd#T:YBe
%)mPCS`a`qo?h#Ckcbe#t2d0Wbp`$=h-dL4j_i4(Dg0dDF)tPC'lrhO=J)_J[KYPouiQ6DcN:8dgNW0';3T6N`9m]*.@:&^JD4[=!
%j8*0EL1A,q@0qG<P;[J$]oCjfAoG`2\OLCDJ'\Po_r'\"<mYGq^Y+M'^M&>sEJ4iPp+5?]^[Vc>Zh;Ar2KD(P2d0X=ptJisW5S1?
%n&HA=!uO&_LMLM^1T[@:iJi)eRG6p[EZ:@Yf6ZS*=UY3p)pF>,M:pj%S$i3Pq;H8!1A]#g$n(a"r^IjNmdq)?RsW10B5]Kh-4Q/>
%88T3S;2Wa&pBB0un8>!WXP8(2D\tK9KQFK)UD;[(^"`/P]D]!sgWhWj[P^#!=:\4(a67a%mIncg,OX-"B+[oYm2L23mPk![di/a9
%Vf/V0/8sj)&J:4OHG]s-b45&9euq4SA'dI8YAqPFIo<RZ[f>'R;XF;S?i+p@W)eOes0Y))g\:*Mp1Fg24pKn-r6P>TrNcCRr]E<q
%p[,`hkOd0^UHu?gg7MHMm/-K`q\.O&j6'N+r,(b7htbOr/+ZEq>jBdJ]RP7=+&@qh0Nf(gPm,)(Z)3uNfCAKt])C>)qkO)c?r+tL
%ndF0lcJMN*I;#g7`<Z;KIGn87PBD:)_;:&^[K#X9JUcY#d.jfS`g-t1_FN#T7F.[&2tRd83)ecl-#W17Vhb65IHZ$SLIZ9h`f]g1
%;;lj)[uY=UKqh".mk&U`iRJiDobf5BH]Q9ghUu+*X,dORc8tiiF<i%KGWY@=E)bE68!Wl+XiI06SW+"oq5_j5Q!kf+f3%%LU!=GB
%Q7&Sk-EZs"X,fb56!D]>-\"q1]=kZYn)9E-a1/PJT'hG8bR[[/GGhZ71_"1Rm4GF0KXKeMCj#R[^[!ti55Opj@pA_qT%:*i<XeqW
%:)nneV<nTT:[.PohS^IWjMflTEJIVRWaDm"1>d`[gF=&Bq3YKj0eMa%++fff?>B+P4PC8kY&,7!G4]-;Up+fEDg:'`chFotU@kH@
%>J6_q@QLUhE+TW4o1,RTlkg'?*5Ao0*mP/&NI?J,UJuZnl>P]*\Zbu)i$2D]B[M"FOlq70D6@#MqNcEn=e?Q)[(bYL0H9HY*NQ['
%ffmV;n&=O%hTb2rd@^B;s/NMojB(0*3YLVYdH@VVWJ7aB\X3#l[U#ueDsU&oAT?Zgf=qsM]KGR9ir=lT?RsV$T^uZ/V,X9.eo>O(
%GcZ%4g1[UYIC0k%[WW")`HTktFR+?_Q\8H6A.:_[`J*?,n[$KNXuV3AnWnEm%"D44HIFl+$t3_h>O'p^=?YuFkr\7-2#Q'GqWp88
%AD[7Ye,K:8ENIWglJ&DLXc62XSQsV*C#O5TRc'E,?TI69.#HFdf%F#pHlc'GFgUhjdouP_Hk%*>=Qa'2Mdd'd[!gE9NV6O8EdMH"
%2K-Xn3rQ-=a'@c@HT7MUn^4E3^P<kGs#PZ"%]5&cW8[aPb:h_$nH\r.rEFa`h>3U*R6Ih3J+q8r8F+UZ6fC6-o:JeNmc"-4kJ.&f
%Zep6b4ob*@Dq%n^J)(!`s8;f\2nq<m^P[''mN-h,qR=r2SRcuKSfXNL:Cg7q:K+4!5IIEc<1`YZHAYKbVBTh>^,j#TG]j%$^)F3O
%X7iR-.^/EDoI@Qf2Ym,?`3f-r_rL^UHlONM6$o\o7<hE;mO9u?IW^)R3VMEZJ"GhCmcSbrkAnl2FH1"-h1o&BJgc`_miU]0Gj#\*
%Tg"]rr/_uZ6TEmdh7pON]Kb:<L]BF=YPl2kfDBT\n'c]t(Uc/-c,Y+$&+a*qlS89QZd(>t9J]EehXP>CNq7LW-(/857NZKs;+;U@
%`$+d*?cg`eqa8-eZO`17>Hba4/?9c&m-XMH4goEYB_QAPdCMmG[?[%^C9`IkIB'KNE/j]jn*@'Mp=_oN/i=$]`$tmo?5;E6je:Ir
%=[qYPPq!u%/ucc%nl("&70_!Iq**+e::]PRCG)?2U`=GH:[(jlE@!cDq_Su-Y6d(PPXV1).E&.Z.a#R=+6%^=EPro&XKf\`P@t$V
%'P&A>X@7@>K!6A=%P>c;K(L(V3W,MIE;.cK*ki>WJB=gG4+RJ(n`ch+m2upHSYCO:^TR%rgV]d`UC]1pnMYZas7=DehLRBZ+#"'@
%8Hp>15u1Dn<CN,Mao4m.M>dhT&JRDX)X[-pT<j"g:4h.(`U:EKfKR2;>sHRueN`acr^lsCrX#JBn<%j=d^?@+UOUScH19.nJ#7[L
%J%C)tJ*JI_rRgK7Fk#&SM=CoGOi=cT/,_U,kH(9\s4j6"'(2#'VG`(q\pp/tWdfguS"7==[E)aJn,sYU;EB-#Zt,f8Iie6'n"8j:
%TqCbFVP!.GEoPLb.QKT):l4aUrq&!rErP]TVa^1Rcf<"-I.;KlqV:[`g`kKc>^cIfVd4[t,G!DGg@j$9Df)+gossuFo01-tI=2(^
%5Hc\'Nu+G[jlb\DFo0s$I-/sl>^ZDIF'AHes/?g,Eq.7Q+)_+#]&3ZPIUIYY'VZUJ68gJc]f8HSN=XG9%jh2'LM6_bPQ$$HIs3YX
%SUWV7_Z@#0X;NXIC-t0$L!0-s/'8%X_AbKpR4KVp?-kf*LSR_oD*'18PL?uDChI_QfLFj9j4:OGl)3!6d!4!jnIL[=46W\oGRiH,
%a>;7>9V.k=:X:CO??t2onC=:Y&JXu-]o@O.9]l`.'>L/=!2);:n\Bg3#QL/:n`V(;)(Kb[\gB2]8S:PEKmudd;:.l/R1_j7Ks/)7
%6PoG^fC>-/>L[f4l82e*WQ7:SZ@V#6(bLW]ISuC2;.mkkPN!bM]J80DPIoGg?j][jjJ4$=\@Re%P\on4gYl#<`R@DW0Zrrs)0_?o
%dq/PQfgcRYT0u,K:I:[NQ7^:=WpI>MqesV@I#t\u;9ksbU"^t'RcUWNEb>!.**uPRYm3;5*p$4F&sA9\dTI'l.Yh=P6VbFD3=4#P
%,/+sk6L%E]+NnJ%jj`X;H;6Ih+658,PZ.8>,^UX@EF_(IWuSaGPfXMb01YP8NoX:9:U3!T&5AJ^]#qS>jnt]jN^(U1r[?t+PAH[9
%e<K(-YB'(*P6_.e"G$di#TcDgJ0?<JR:QsIWX'+5EJP<K0@IcV`p(Mkfk41'08mbG7IoXdJP;1o*^h2t'ZoG#KFJ40'Tkfq-K9s-
%8jjPB[>6]7k)pFqiWpJ^f_E7E"6e$;)h6W5CU9XV4.X"=pU>)/D-Lp_HJ?YZ,MO!R-Jl3"[W.@4G2'+0:"LFLmS;Z)-f:6EQIN%H
%G2dKHDS,AIlZBVhAim,c`a.0g1R+o;;Dr2-e9t@)#E9+Vj.hDg$md3E+o.>if;b&Gg@%Z6fE"op!VQP;_HD'bp&dKS\grA*#"a#/
%2Ke/8Ib\qrFgGJf9\hJV1_8>4&ZLfh/-,]$!&"@TLNqBY53Pi1A(3[6e,AlH"a[(1T;Xu(L\CXb6Zp,>3:!.r?0KPtTJq@&A\Oup
%lf!?)W@ujBb49bUau`>VFJ1/@hb]Mt1B(UM576lUkB%l=hboMR.E<N0NDC?gnh%7Ok_5Pdhe8(=l,"PfJ;:=9c%1t8Ln'eD&QeNr
%SNG$?X^<`Q/,U^KH>`KCAfWAm@PhZaIuTf07fW-mp5l6]$e#^eI4S+-q<[_Is8L!0IrSZlg2'JJF4[%pX)ln&hc.rNJ%Rmm'ZX!6
%?62=gj/3tPNuu@2duTj9O5fs!a33L5EW#Ihjmf**I_$th?W+aJoB4P.nK"7NGQ+,Hs6"J;Hu3EiX$<N"f1YGS&,;Y)L5d;P&McT,
%YW@3ic]o[>4$Pr6UOPH[G2=u0LnDpO5FZZDYn8q+#X<BgT=MpI\;Zo,4`7jT_979.=,gku)`rc;#^5#QUcp_^46TIA^UZ6<#q?18
%rZ5n0i!)f/^jnRM>K.+oQs9JsqV,rG^]3ZVS)<-%_*N9B<4Ns`T7^<rhK]&B#ISsUk3^nVrd=ITh>QW^cee]\c/!=!Qd=Lq\UNHA
%c&l3r0?XG_8`D-k>Y5[=jb]NrEOqj#rj=N#9r[.E?/"L:WT#SP'rUNO8&%^"TJUP9?6)4j]?bcsH.[Q5GG!"'8U8;Kl+9aGIHp6!
%egKoMDWO"FIoaA1_0*L7o(M6dpGoG'"$\0p=T$D!BC%g1IG4DJ$a'H;BB\S4c5R0t_/9O[e["peS6<=Mr2r1-J:/!hM\k7_h5JGN
%(*SNN_(X[jY49]]TDs^t7fBN^BKaK;A2)p-%af7iYQ(G+s1A4#rt=7^n&jHNh>Q+.%!THfpqQgJVu'6h.t,'rIqVp]=3uF"s6k=5
%pTO'FN0,b`otTqopcX!#&,l6@Pfs!<p\/<S[ILPUfsN2QN*kJb=2T3>02n8(GPh)[rERN=jP]NOIbbp,p/9OR@fq29)W^_"Ki-KQ
%?ZusBN(JJ,"95qi86#l%VVp@?TAu"feMRMZh),bFL:TG(fA-^C88T<>IH/X=RIJQ*-5TA&Keuu-;phAnZWl/fo="!e&M_J&m=JWN
%`LPt^V*clh@;7OH6d#YFBZiEcr,N.j4NpH!Z&b'Nk-],#(u&BBCYtG^bI0<eI7o2t[c8A$/IB%*b;mX*75I'O95/0JcYME]_7]0s
%]_61Ym%UW,@c,TW([X2;IEMf+BZiE/Vf]1MT_WtF^%Q:LA)#1PmFr7sg"'c?DeY<VG+?Ia-"3-Wf,TCEj'fV0/XOr?2dOU<9eU.e
%Dn9!8f[Qh'CZp\!Cpq?uCUhs\fMo:_S37P`D?gNL&a37@n9lO5[RNRdH+(;&7*sL5p6S^d`P)pM]:SB0I7O"WYgCQJEeX5I`_=Qn
%MB(oqm=JWNjbWYJ([RkJ#JP,g@$giG":j6KaBMurN-f;(1XbL;]'S,`G1h%IIb0mibI1Z+>uM!5jlL0tg%M0eVmm`6^?qB*79ec!
%hf]Ua79e&Hhfd9<Z=!KTkgh+CNuOImi*!FZ))cLff/)0j-1%ohB<cAJfO\:4@c*KUX+"p\LMdR>QBsDnn`=jqA5-*l=hd71];BAH
%(JQoF?.1[]Ml*#]Y3DD>AZn"GIA]8)Dts%co`pq.fHkhCp@QM'CLeEQCjf795(E,%5>^2=M&Q<T?%LWYEgQFM)ueYD^79Y."MX3f
%*PYd%-9J]+J@rU_j4@!rO*?*Kl+>gupMc5LKnHeF-B4R!G<FH>Icp:GQgnspOm%/GTg9bRFnOF`lcWKs2UVhGgKmldAc^DJECU@A
%cHa$?\$"HYIFjZF=Gf;@NF\W)V-]1]h;u5]%39#*j`*i.5P*GQUZ9ja,JrMNg,G1?`-`Db9O=<LA]%F#T%^kQL(Lf(jmDs1-n1J%
%RTgF7[E9-(InJMb(c7__Y7)c)Y]=`"c&+'gN*+uaU=%A9fo$.8_?b=**"#5*&^=YU2EA.46k4_"e(hqiqcm+'oWmRpA*^^X05$Z!
%"skKeI>po)M$_6cbAIA*@Fn=@%\['=2>YPkkbo>]aD<MV[t+ina;Bd7g,@2*]L'-nb8bqrrFM-pJhLu)b[%FQ=YKMa30W0^Kuq(\
%H$c6H,<1f^E&):;p6RXogt,o!\W&h1F>gD?&nSV,0I1piDOh(s5Wb.F(?b]4C9;;!E40V1p"X)8e&F"<#0pc<H<V%ch4YL`4d.sb
%ngPU0^5Y_*:&&a*')/jmCs1jFc?`HPRWZ6%"2RL(/\I8FkXJ8_Xb+2ZOKr2YFAp1H,=/)r'QKnr;9:7f,MbGn<mlhbHbWRc0)IP,
%+):E:\uPDTlIMsb+<FA+F?6]03:s(=\JS>-4&3;$FdujV()E.@Oab&QHq@K-`ebm0\Y!4aQ5S;IOq.G"B`pE\^99AA0)M>4@(gIE
%0p;-7X>2cd`b>T!<*52EJYM/:UkEh03`t3#U-RAk^5:3fm+K,#!W"B<$oGW3CfDd06Uk?63f:r-3U!:%<GoiHD9'ZRg$8Ye8$Xp7
%?M;<o>&qZdqI+7Z<#DfP*1_")+T6,,`M.m6g:$T8fbtmb(d$PeTTgI)f2DfUpq!3'/'!>oHBQAaj7^3fZ_f,TdS@j`##`,S39[1+
%7h3=3!W^??I&AB?B7"HC?ZZ?Sb0$oqRl7'^>i2es!aiNY,pYl@=a%CeaNR.\?pqaSPrNu<h;4+OCu,h%1(T#;9!-j`A_G3S.Y./r
%DcO(Km*]BXCc>a4&luF#j[.SL/=b+Kd5l]D&%kU4)610#C<)SZR4/rG7\%]'R63>fen<4HAiLKDp@R0F0o2WPH*"K@@LJTIk?kYd
%=r]BO,3:%5`nF0?<&DtH6'0KZS6JLF,3*[NNMYcieC6*pF6b0KXZ"ga.385YX@QBGPK4AGdl"-1Co(l^'Gn3n5[YK=#Ab82g@uDM
%[@%EgY*Dl6N]d_,g"&-EQjH/"@l)E%dZGLAQYh6+fGSq(,n<OM.V0Xhm(7-j8@h<Uf!Is3:kRmOnZhlJ[Z1V!\Y-imW6d6Y-"LL!
%*9Cfrflk5Y`(3/'HR9t#'GX9\-Ci=0_H@Y*.NJ^G,*)$TlCt;K^_#L_a]LVM2!Ie,Nl#,bPV5d(]GB#ac0XeUo8%Q9\..hO:urq>
%D+E\7h9^#]KkcfhBf8IdQ#"(1*As.'Xg#1-.M?Z5,3>b5`+ugM_S2sU(Xdd$\&<]/GEhiufj<T\&RG7COO6MQfaI$sIZ)?p+b*.7
%3s"+?CM@sVXJOHRZo4Tq"5cbro#eYuX>9(4Fgr9-ciJj5U)Nb=]h;53=ZW'Y^=BG8r9UHQ$-5Go%2I"jo0t25CS(ES$q-4Fn#H8u
%1KL:.gO9f?Rs8aIFtN\s/'.$8T7-V!X1K0l:S5=KHhWHI-,?P7ii!Ej;)DPmGs)$rJ#)b3<elU)&$QTA-j0C2<atfa2`c6Y_+t"#
%b@(U3GE;ThOkjUH7pF>H]9[f7_(AKXZ/u,4/5FkOo!KkDRYu!J:[FcSl]dY@<AZfM[sI84PiXG]Y`dMt":Wp(B;>3Se.\OP)K`%C
%defS3AX&qsmFt$AEsN!JJJrN7]o2ssV<lNYlF/O1We=EACdc>bbo[LN0NE?=U20qjV.!E;+LG2=Ff%.[.jA9+4^,Y7pi;UlhC0JU
%9H`>;cn8l?$>)QMB4J=a4fSq=[E$rC+:#_>G!fsQl>6sO"sfiJAg9q[A<X&J=WnQ>mP8QTS%l3,Ae,TDJIGS4CgF[Tqe+.J5#TH]
%%1pM]Y*Z`h"+Q/t,RL!G7q!f$X:3.MI'9ZNbukl\;9i>?*hb8%ckZi6M@R=3PFALH7CmES&*/):2;0;NA\`%KfGT380ObGZpfE*:
%0>HNQ'+Q@JcK?k1dYGCeH>+k)%`(:L8b.\13;,K,46//(6X?>Jb9j9mSo,E<C-l5\6tH+s$lu=7p'_H,??GsM2Ap;cZ47TX$GXLJ
%!7_`MGN-bV1r/`Bkisn&=!e`)+<X0L:WuY*^'GBElrj:LYr)qi6s:?"P<*</cscM<7r#HjlSP8Xje/!mDXfm?A;eF#$.X.YBOO2<
%2:1fr72I4Eh28N3qo-Ygi/0G/*Ya'oVsH-O\PkCfK$U)[qsKY>38^s6UTFDn2.5?$+iar1IR7moH&ZWm.;S!_O])Qj_?`fQXBCg=
%A&iVibcO)?g[a86=bIXM=st"g#!5pVJIQqAFO"Dnd*(cg)8!iq5bUrY+)p_fUoPRn2Et<*1*``234;'naYe%]8ktMqSbT8NV6si<
%)hFh6)cg?=IN#I6K!?;`.1LKi@FubRUh6DL6]N?9,^@Cqf`cX8/]*J,cKPgO/>Rj'aupmXlVhY_3#rZe-$TH+)^*6#W$&AT"-!<(
%Es,]H0jAX%qG89+N7_/7&g8f>1)?r`ZS$6lK3o!N%A=a_+:+:H!;i:l)F:#.[B))<$=tl!9(i7!\3[0o[Yi3i&f>A#6)f!=B.k9G
%LctfNQR\NIi-*e0V5^:[C$=o(b"15K_I>O\V_#Ffs-7"&6)N"CQg[-"#S%1o=hoM!WA8<KhS5_3QHno`aU+G32U3^4*t8fjkI-hT
%Fq%8(.75JEN'_[E?q@S='DS!2kKldh:tOAkZkd/FfZ<h@QpOb@GMp4V(1;R(:I>tS*ao+#;-B#&06eFl6e4A-lcI6!OTcaM&).(\
%p@N^:mXrZ%'0H:YLZXfbhGg;gk,9qEC)b6_au-66I^WZ8*du'q1"%X+U7Atn%Tm<+p2#LjSN4%hRM''>2Z+Vj.c%[TO=3cR/Qcs1
%l8-oaQ&+X#CN*%)N.@e=iN*XRN3cW0:P#s]VB``JjPl9-''b!s3S9),EqZHP:lZeT#i47DjO\9cqNB`t&'<da5YNk-jfP\P<g^e@
%:]j[+)(=tthpKt%G(do)eDVDlD"UnnTe'@1%@Z%M=l6+)anb"($(2,;+rCalBA!l/*J3'CD9!tb54oL"RoF&5UaBq%r'QO/@()J&
%&D/.98UfZ#'<K!F+X>+5n.UgJkYl'FhNjolK#70m=\r6eZpFJi=p\qA6#R%(<6JP7dhPDX*U%U_"u7r#RD@U9p&Q_CTjan]>a^=2
%U;oP(!t2-OQ6[_-hrfYk6+Vh1!]#Zu+`!%^Z\u9"Qr'6,nJY7f)u'Nl&tH()8656H2j6e/O'^aU(G6Jdq8N#N(M!(Tm"23lG4+Xt
%R0_P7(LW5&QjgJ_<1Mp;:LNaW[OG'Z<2B\.E$^ps+c)qJmfgSlg!uX.L7hd^]>J,8/W)#F?:,gebLm&$I19dLL?[ti.<$PlWS^>]
%Tj!`M\l"R8"qg!JWAl%ge^G&?,gPU&Vg,[<)Z3PV+Uis+eY0C&]r*ZA=&)2=j?9\:U;h/2i^i@C*E;a7nDX`QAM`W95s4Jt/f\W+
%D6RCm_DjE+f5\?4'RGKd'$qs`?b"[b>2`Ep=^AO*k`<(b<$S!O:I/()p_-%K/2)BIM#>,p59";mNF<%#DY.-GO<tAB]1KGe*b4Ci
%nT`#jSiX^Ee0%^b"Oi?,Q&:bU0>94o6DiDg%UhIg`N%i[hd,drngBj;*_o&p*P]?F79u0:h&/O@BpdHuJiEJA-h`pAD:-7&U9\/D
%%q2Yl:m^gTOL338fb?Bts$6>2%aa"(SCCu.W9T\-Hi#V!]0T**6'>MeOLL*h4`l/R!<odhkS3&WI8eTQLj'\oKV9Fl$RUQ:!"M(_
%UUgF?%XJd*AiCH"/YPTJ!S-/ONY,edA\hn=G4RC>%`'<"W7n1b*$"6t9,^KbP;WkN@s%hY0e9$e3^Qj.^f6#NWKsM5#;-pml<((/
%'hHYJI>+]D$&PWdipT`E%V/U7a&Q-B\k32B(oeQhC'iuh<OmuuXQgTu<DKJSl#`Z!E\J&V"1qa6WgrF3!5X[$Y6`2W8fGhS.s.Q!
%FC/&0K[Z15eKKmX#`JuB*TmW+3HP9kkNf*f$`pP3qc*H29tFrpJ^EIgj>FI&U&GPg72^MJC.1sU)C+WJ%>(U^a_Q"Z:26fNJ[:S?
%c$V1#<h@r<?,CjtpF%j[f459o'15V9+f%RI,Z2lj<TNZ#m"0]s-3VN5C,+#7MB#AEeJFu0Ek54u4emlSQEt;/_\QKVH/"fE*u614
%gYrq\T<L''nuBaHW1:]\MWo-Wh1Z)B'<9(fF<C/nA]d>`ZLaP@*p@U*(in_R<0)[P:!"lP+pZT(*cT483W,IrrP:CtfqZGMN1O6`
%?phb2]AuFCD6??11u6=5^/j?LD;+k8:<WAYZ9IqA;jb.e,8"]7A&8P0'na@3A#BNe3/<9S"HnA.92u_:!Z'R%HY/1;eC+C]'F;s\
%ct19Rn;;k2AJVQ/)C*pk'?X:-daE[?g0?jXU.K*lF25AO&<59a#UYP.^p_mV$6,i\#TF$G7T`VW*>WocNlt=#:lqHU\os8p$JWJ:
%RWXJ6&1A11:TN:R"B"kH@gbEU&5*/Z\26onHX]V@JEhmE7Fae=:k'9rCW>d^`'VCaV0"'?*toe<@)P#6AV]6?Jlo&.@s2MbduI7=
%0A8?YC.[*EX;OE8S3Vlm_+&S(%nCfBMsuMEoKpte+mXX(`"BH^/P93F,mc**HpQ[u7nPAAOd>YED0-C.0eTI3WeF#S%%C-oJY#E(
%i(>!q'_>@0M'+EH'c&=<4.'D4\0(FNdAYR2634&C'ieZT<#PH;5TimC<(;kEFh$RECu,[srLR8O/,C9p%<tuo4.a3`j!leYe9b%e
%1r1ks2NX?"G!`*]j0NrE5loIG6@q?8,L\:+HV:BJag<S>W9;6Q'f[,-M4-Te1eMJu<Xti:PUpX\aN7-KE&:ZNPK(H%iLsDc1>O4R
%#-FqEPJJ+_D+_W['YW_<_agJ[g$Ll_$V[G9[5%Il9W=u`kJ20l<B=sbi?Aq83fTVcH)Ym(Td'AGYLCUd7GLSdkn$=M+gAIOf9AVF
%6)SK0$!LLnSa\VX3d&$r]QgX08Xl`SJnoKlRTMh_Y(PM7&u8jc@0\HJH6)o\e'pM1lZt:j@'A0R)c=K3dd*]eZtX[P57/SE=rgcP
%C8fW*KX%ql[(9RP6-';5Y!^R*Bk__'Rjj%p*<Hsi/u5/$2T9bnea)-6C43((G`=9)6*9H*n5HITYVCmBe2j7!8GSq0$*92PQ<je9
%/Yu3K;J4&UV64T97p9)%LM`reV:?_I1AekceTL6U>aAD<,h[0'+gj?jIN_5J[CS7jnu#O?^]7SA=rh<jYLUHX4*.)r#I5j?0!,W@
%je+YJF[EgPBou#Y&:CH412:q@b`4)mXU[#rJ1GaO7X/GAWmimSb%XeGF^VFIKh\U`;"Ap8=ri29-=:7d*?r.<^96!X[iuTPXc!<N
%TH(="GR<]5eD[e%2(k^8a(='t;jFp0D#UTd+_3r2Ep7]01$?5BLZo8CGGoUK=NK/q3^alCf1r<n+eiCq?ar_[^m/]J]Au??:OfKR
%oAd$hr;9?/^A>f_rC]mZaF(kX@5EZ7TY!\-S`nC!\)6rNC@:tHa7%leq@aAmg-NjkE:MaHSX)VL[\3g"7gR9kRtbIs*e:n209j_U
%?h!-srZaa"eqh\'J:/ZPgI'Wd6GU;IUlDL1IbXl21-E4*J:/Y&H$4W"\&2V:73;[!)hG22/bIe+R,_Ym"RI'6ml=.1!&jZRD11lk
%hI4/]I/2#gs2f`hk+CQ/q9HaJbX8nPQiI*OT24@7inaR*:'\):9ls!J0=j]c0B".1)XqYE?!-3(HljI*5.Z0gqsWub!5Sm/WtQ*R
%Ud8REC+kZs.kF0(%m'pu,eRJ!<tS9a-FnJ#=4&&oee9)XQefJ#$^%oYBg)fE(ed&W@8E(qp+q7e<=df]_Z\X9^PBGWkbimQgWTQ[
%IdsefJ&7?<]EfLo+YdT!'l^P0!A1,16XR-%c+<IfGWe-Arep6^=Go>AG+]$Z,1cu"bHAH@bscf,/p:;3\e)('kYg/%24+_=HTF,q
%X'_O7YPF3ijuYtYC">n0%@R!_DN<2bpn1(AM]fdeUk-.NUP,JA,qd01kpMM\dCZl@jQ/A6DV6i_Tik<:Dtn^_Rpnb&+JDN[U?+2@
%d<%ZE0mBL3P6_nQ(_/BPb`J*k>9F<^FrQ!gJ($GTc1.m1Q*sQa`+V[F83X<,%-VO;#BPI*[WUKr5]kI&NnR;jgZn1_\dB6`d'ec*
%F0J3XaX3.Z$1H6&pW+d0'^#t^9T2SI"[O,QRja9cD^]cVJX>"PTDml(K*quR;-6p7(++'PS6<I0ZH1C:M2[Y1Ur*\0!J<4MA1;;T
%I/MH6W/lFC%e]@Qi_U`se/[c6T9_hbYeN/^A&%,ZI1XV!dP*?#^9cS(rs@?6a$2;jqtTg<e&5hbs8"t@?[Ar7,]G`os/OO3*00pb
%ERGBP+F_OI(h]R/?6:>0bk=Xu<c17r.6HsIF[Fkno[l'/_4^ZEVIgZ'D(UKrf>-ldNWs.R0\ZjE/fN]9T/r,.)%BbjE7k?878s!o
%"TBa:TC&EqMncC1C9%aL6?99D_*VhHb#I_)UIbptd0r3A'V1aIk:@Sk^gJei%;>YQ!@As/3-F0_YC.(CQH'JOL]AgO[l'NWF`)/9
%'Kb*)r%"&ERlL:Eptn$.i2+L/Z-`#L;;2k>)_f89*5W^6V[gHgo8j84M=t0p/MIQcl<r"pFe!\fXO0(bdmeHX12pbHVBYNK4,0U)
%SO3YA!,N591DhLA1.1Lt&7cWn2MOE!D,GrMc8pJ]_?SS4]"@Vb$t7m[.&tahf#W.![&9K6Pm<tp2D"r>PF4_A!S%gV"*SL\_,f8:
%bPM1e:X`D\SH(V:%h(KXlX@S$!a(dj7t7!tnpTMqOm&deYe&KfNHfN#_g(0+N3gnQA.`Bj_HTk3a_B'3F95$\_ml;YD7k#rW[>dr
%m)OK##F9G=3:/TAMBl].'B.:sEFuRjWl.PpG<j5+&1r7lO+&Pt?2gU[THtnLg<GFb8C)_d'5FaRQ2WU%ai'5\YaQ!nI(B=8*Vsh=
%ea_0"Zq"QH;eEIV$hMZ2>CX9Rqq#`Dh%7%*GE]S+p[dY,*?j+G!OatNeVTAA6JI'.7g9rJ$:Hb\$R"eGa[`d*@JPiQmau52=4)!f
%%O>4cBfS(gG![32h15CsDp[<:=.d)b?-T!tam-iE0a!Td@UR;H8dF+:%4P'T`oLBA!C_m-ouK>$%6VkrFQg-E[pqW&_MB!c1``&D
%T@gm("ZsAgd/?L:QhrdK:>aHN8H'H`YoNFGo>DUqp^h8We9\Kc@`3R!Pg]g+g!?QhE2^,!*I:.T$N^\G,9ZL/fdX"MLSf;`<@ZXD
%H2qgbfR^NJY"n_t]#"GEK7F&.0p1BNREXhJN1";L$!8:S9Pp6JpZd@4T%5A>QFQGDngR943,K0rE.^roAI!scYD3rLLf^DL<!-n1
%X,3FFLdJJpp+W5$Ejbup`/=0NfgE']<u4JkraiA:P05%Nl8X"Gj;U<@HigN:fBFIpS30N&NaS&gWbi6>di'iIea1r7V^&^=]AV<j
%r0XVB*=(LflTh3f/t,7_Z/gg<2rJ*E)gE=fl>nn^X8+if^gnFc$Wj@@;Iuk,"\OA@\e$3R$lD=A"N!l1r'8qd&Z9)R[d+[U<O:R'
%8)QXA7QmQf[W(T3i3i#r"!0q9JTmmFHJQj3$3qMj1cS&%Ns=W@FN_#B*SA<$Ar!Pi2$2\9lj*[TG1qKZ#bTl-TiWLcjcT!A,9Urf
%c--tuUBMb[45GFB!A*_hYj?HrX"+Si2,NU=;66fJN.H`k[=l7j4&UpW)/u)*&f?_iab_T'I-ZT?gNSMd')5fDmjHJRmhWlgCtfM3
%G1l*]*XAp#GCs27m\b2]!MX1(P=#6fK#rh;5"@MMF((^b,A7R-]J1Bb)?T3*Z-S+CQ_&`(9!\e\Ri:Os;itIY]HBpV!7/%J3:0Mb
%1GReng#&XkV?'V45,s-r5h:KU\/1W#6/[ia5Zgo>St#\s\jc^>Ze+A!Pshb3H_jG3V6!0%dU[.d'5Rb<]u4XUp@Mn>*SL'`-+`Hs
%mlS!qKV?hd)DFj2.o7ps2:Vus:O2@ULVf1_N]a-`Us7ub/c!%[5&b:F-XHomB?=AU;qI=C4*-0,aacg4eR3i4"fdT.Fs/HkH6_1S
%%B?BZ-LEXWRVLhl:F`muQ`<c'i7S,4DJQqYGTk'1!<GNKL#T.,YnH8]6hd!bkuoHb8hQR3mtPF"DQ9**)0,HIlp?+/K4(&o9VN1P
%8it,V9`EQ'g_08+b'?pl&I;n4RPp;t8l%ZMpF4ME[aNhpR`4sYNkh#XI:2>Uh7t@eME%>I&R/6pgG57n^k.RU3oac"@S@!;V@%#C
%fT'QYWN]I&4@1/dVU4Hb[T/Wp7"A%ER/e1""4>Mu_0K[+ha1Gqg,:`OBY7Df]YLjikA:=W/_Jb&FqN3YEmRYLi5H/K!=_3W]XJBJ
%WP:F3LX1&[*hYAo_e_5]o9-:nZ!cj44K.&TXlMf942=Da0^pc:#I&>hX(as31_#Iuaa'"(+<iDE9XQDo<&Jj9P3l<r%(AL'<XU##
%Xd+6Sc7cK2mm5260q_0fa@!&Ps.BB4#/n5'+&$2]e\!ISksQ]^JD($KICJU8/\K(a0[hQ3P3Z51)%DDMnS996iGn?@aId'Jael$f
%3!=P(C5<'l;:8Vl-GW`YaS=:rdGDqJZf`?8Zn9*\1$qt4Kf_KuM,-d*d;<-3OuUK7*\%#D+##L<VBrme(_1cR6AeY`\I;)N#_[@9
%'X8V&8_kfbM6AK-KgEAuITDo>@^?1[V]e44T\T0/1@CNkFpm]o:6HYL85XpVT49ZRFI66e;@.!.Ql?Gkm+M(@cINm_qub"Te,3Ga
%s&32uYFlP][3bT&>r<$b@)Gm]c>L_Je,9Zn<<?^oRt\"JT\LnOcC;`YXpe#95fC1$@L4e0EO@BqK->hmR+VP?gL_`7UPrIJc>sL?
%GbdR&7;FnlP:"PjaY907;`#Y)n:EJMm8R(nU;`NIi_J<I!]_Nq80k+,^FCJf&/u2^18(qZ^T%_0<l*VZcs!NrX?gj2>l[UU;gOgH
%?@Err*SPlYqRl(>Ld=[ND31VqHA#Z,SVF86\uXR!(11i</OENM,ruJsbeIb__9p;'(as'jRgGC+Ob_;,\3q*2=fnF34=qRd+MM[e
%>C\0:HZhPC1tKrW73*nsZ1lY4ImE7$_6aKB6D*6O$e]l3X(k+1/`'lj"uo(1fb''[@:M@d0h#n);AbqVUCg=Rof]Kr@iW34R[rO;
%XUfWCWaN0ef'"S(/Ioo2UPlOJ4"FK\L!M94>S(_;h4U+Z4FnM;]A$RG&e@0K:,JI:-P-:en^GdNR+tCL6_p"$X<@$!jPkP/dQf`L
%Yd9(8mrrto9_Z5-9?&<=/C-8LMl.T$!9WPNHp+<m2o\f)N$1V.W8-ltXI?H].rK!Tq'e6=$K6+_M55CaUNJ9=ifDK'ndrN%n6Rt7
%O[<bt%W.Sm_,N?nT]Tk#;"7Vs?T/0R.o0mPa%(b[-JSpcaD1+,lDmuF^kk+,BhV&1$E=h+JAs4;>gLl;/7H"=HNg]JTMf"KA.aG$
%VYl1sBI6"iq=eK".co:Yb,=ANb2%XUN'l+Uk$B%VTi:Cu-EjGFT7'(B)D5Ba/8.CpOW3tTb+mGlk6=\$3nCkGD4hB'0e"qZ3DcIX
%Q@9PHU_+rQ#t?h2ioWJT&=Au-=V_d'X#jV0[\r):8p#Dq34/6u%;N=Oe"BSp<?Z;Hlq3k@>^BArBntBQqAW+Fi5FD##-$=@1o+!.
%m`13",MFt!5i;KqFWHf>=`QH$hJ%g[CVlln<g'/ml]0V;e_<DmRGEph(>WAu$'TgGCImWd5-rtTpCO7+6h.QM%R`!B#_J'G(&T]s
%0b#bOAtu*c<&CSl=[cM_%jW/?7g'M!`1?>Q2sfR6]D"\I^GG?_:9_5h:smu7cr,abd3j72jK#5h@=h2E@,f(;HSP98-a(q/KJfEC
%\GN,+L]Rg16>KqDft\LXo@bM*BQ=?o`pui(lVMo%'2;gd:E;iu.:j:^(-nHO+#l#"Ejg_q9.:P;[,Miei?e!l/gMY94Nt2)(T["&
%QW#[Ms8%T<SaILf0EolQkt:]FSRA4XY%J@M'X73uC0Iu1chhTH'\H7mDHG8NE8PQY*/aRb\I8)gZ/_.1!6>X4Y@V"_@RVG0k6+c+
%_%<Xb]S(f35`>f_2,>h-F]89=j\!hA1pLH-"(W.DZ$q/UA?B$)^'=o*VrXd2HbWaM#Jdd"PCS_8m9LUu#*)lG)f8Fn&8!&@Z*!L&
%(]0$0C\I_k_>X@s`3Z83,b-/UX\6/mZReA!Q>aJFB"<L5K39aA'b73Wd43+USet"k`A0'WJSpV:'_^*'jVcPKK_$CT%]WA0`>(Wa
%K1!BVDZ2GgNIBPHqu3bMlgZ`8,MIbsjj!4U9Z%aO-:>H>L<a"25!s#sJeM%2P]^&/(/[)8d*^<T^4HMf\=d]1@+<XslZk;)W;WdD
%-Zh(@T)oiuoWTDho't!_n`XQee/KltF!UV$jg4;Y#up:jSds^od[]E^.N!@'e[^&D`rJt*7>>X,$d#)c<VT+0=GO&&X1#1Wn23")
%*B>*DON'*r$\1#S$,L'Br24jWQS`:"q^W@XO(7ge$fc5`*_V;kW8jc&)P/tb"Hp>7c!c.N'N\*_-h`uL-Q^I"VG#%Y(%0R`4i6og
%Z%pnp.Bj7/(N@:bpr*A,ggSUs0U[>6%2JBJcJSkPm;tbd.bQ!7g6IJFEdK:koPCd:Wkb)`(t9=?o5-m7iX#s\6Sa]/]#iuT;"ntC
%%RNfe,:l@oL9]>_h+&\0:h-c*>mp*>"$nEJD7&W<E>ZsK`_?7t=QDB!Crjt/`tb/IqIFcmT.PItk8f?<h\2[t6aYr\^MUlC#:+#/
%oh>BS@RPkl>g(GQ>o!,.[^<"TB#^g9<_-[38^0E<+ZV"rM?o;qqA&?^CRn^$'1>EAPN853oN,P0;gP=#]6Mo:)oB1I]nYO`A+Vap
%o[7TZ?oX)u.@qPnbF"Sd'B>mSfGOlaf,hm)`jZ>m&l4:Nq[.1ZIgQNPjV>h@XG^7[BZ4tEig.ZM_T%&%"#]!,nfUig@R+e]Mmf!h
%^$%:WH*bZp'MYR7Z$Q=i>s<DTW\VAe2J%"r^a&tXQoqDRU__9Aqgf#BY,4!_UBS-\(+h2L4;8j_&)0?Rc3Q45<3IOeF,?Jc>S+Kl
%0T3Qk):N9f0oY&%F^Dj9:;@=?;;_@"MjFR34%ARS'ct1IDk@!Fd'LM)!R2e;/[h/bJc+:::7qLGe'`riaBV5%L8C@!>$N;(gWS(f
%E(?;p<[aMQ:/0d=CupejW=ZOR!suu2e8[kU[:YsF5P@K#XV?;#ocn@I6Ib,-VnaSYQ$CstC[@]JQMApnmd^96G_?U^q2D"*MZSW9
%X#9?%[*"rk8p,$KXG!i>N"h-b-0a0pH3AXGMih:!^#oc3q$2i!q*u`UXUoZB?roP-?^]j&pYR,>?`/-757EMNOM`]R2n=c3C[Scj
%Q%Ag!i5MhT"Slq@hbeL"e)$\Mn,p?,f/oJKUKPU7aP#B\Aq]YJcPDo(9N37b#h'9_)pS&kZ,QMP#qA<'/TX=ngQiuBG29FiY5gmR
%de=9J^f$rr*\'5#lf2\G=uYr)>0sZHSH)Ns1mKp!7?)iXEWs:#AZG/(<l+GUih*t9CZ^^c64m8TU%P;t?O=3LfZ8dNJ"nPNmEJ`-
%^.;(/1'[VuA#%n%e(CksT[RWHp*?#QEJ5J"fPdZDoJeoRM:03Gk(MQOCVI.WGW+9VATNQ]a"d.]4;7j=OI=/jcF*+AF$!S(bJV#"
%q$S)i+.t"Tr;W,^Fg9e5l&n8E[sU-kI`sEPcW:d)[kW^84ZLC#5IK#dQQL,=Y^1nilP<O"0Idr?Z_]\Wob!/*Cj&&)Tp$";[nb$7
%Ol[f;V-dYi86Pj\f(1X=@,j<5%K<\L=:CEfk,*Fe?of7_Ie#hCp-r-An=#*hSd\jT-$39'-]O&AdS=5Zi/p\mEbR3H>=b&7oW?:n
%1TK,029!A8+,5"e1IQV;HgGZ6QMgoLg>jjJ*!I"3;+:U1(Z5(\p:3*sfsqR61D)1WiPM4LkgZ`;'-dY;,p$%SPRbEM[d3mlB79BM
%+t<sAl#2!r)>;u;%u..Pj]WBiG_!K?;kq]+>*1PMPWoa=-Be26/uEtrUO(JN(7@^cd>!0gSK[%$5X1qe0=d[iIbib1FT/T,<VNn9
%_<*V0YeXc7GA2A7O&u\`eh8ikD[U-n9Y,26,pHBd=M7rc1<RiJ;QI40=]OW^4JDgN3X=g'lf$Hp`&LVPa='E,$IA8ID6(XFVlR3c
%R9(0YgXtInagCF/FK(b'*+^_*9#tdORDE6d%DmAI]"2]i0LU$lf?;u3\&3@OYlR_W6bBPr`OFa<@>`OnhScsnk-h1?l+2.D[!djA
%5'CFsmgnE4WT=UjM*E]@hM2ZeR=F%JmiD[,qj'^%UPIa^T^n.>2qR8aY:#Z^gO^A3jIZ@S,O^7gM!@D^eGJ\s%,O)4$1@iY+Xg)L
%f*m2/X^lY$J=&[]@SdF_K]3*odQ#UA(9>%iOIuO%Cd7^EbZ5k21[cbY+^T.!I(]dI@`H[E`st95hR_@F@M/<egfTPPAVMB9F00s<
%]r$;t$>P1$F`V2sf'8)5Tu"fD,SG:`%iQS3BPL"Dkqu_)9"2_aW9;B_%pHg%?G@OO=Bc'&cV[#<dqNin(:1(6!;c<;JcQaJ*Puc2
%@dfGae=J/uQIARX7.?Wk`?9N5[EV8%M-85`HeJ,apZjDuO[a6A;pAFnKM'!*$^,">!6U8R[Wnf(ZKNjp&robT5ab"%R6o<Ddi2!0
%qCHZ8<bBOd="IH:HQ"@r%Tt<@XW06R=EtKtH[d!A2"\%Hr7U[K+il?qcB=jni_>?a;%pCCNM5[Bb[XCHc"d3Flk:cFlb`h0Y,UmC
%nr/]F"DU@2"C_nq7^*`U+MkmEZuV/MbmK,%G\\f403WMi>6Ja0iL@3&Eu3UKZ]2"'Va=p;/LtUI/37CH_6m$Ge1S"F@:djrVY.mk
%.C+JqRdKMClbGZbYT=Im=*RU()hpSri18GI?AZd*DgQ]>2)L=:bi[<0>&W8bE%B&j.[16hQl_pqcr#p+ZE(sg=G]?k.;H7Co)XNe
%R&3IlRU.b72tr0[X41#>P^-eVX3b//\Xr.BEEhZZWrc.fk&51W"/a[r5fh(,N_"9VN*B>g\[_^4Sj'M`[oW1Q-r!MfYqVQSZhOO;
%9$HOOHYuk6V2N.qZ1]<WWu3m"gc>kHht?EL8@*(P1q+^-70&O627,8E+\Q1X\SUb8Mc(L51o:Q^j,dHs_"05;@-J`<Ulba0etiLF
%!)[YaSUd05BfR:rd0]$rOEs;%*BQ%jW6sf#Nqb>[`Ef0:.0gB!Rk.KZKrl;)'lEg_h1'G!JD#QH<"RL#"r%*<711:*RDEQ>I0UOs
%4j:d&Wr2:e#cs]n6A$qS]69pfF0[?_#-jRXhP5!kUgNeNjLHblj8(Ad;V#e!Z@SjKDp=1fm%ont,`gqO9D7rjEK8&Jd?Z;8>cckt
%oH)_P-`^ea/RP8rL2D3<#WhHI&(fi&44R+QqhT$#<':0g'=lflc!fBK1/;K%4mFmE#'7e<3t:!@=2XUN-&ZPH5cA"l?t'(H`UK/.
%[9$Ga-_/*D/0ca-qtg$1?4/7^(7+hf@&*c;;8d'7PGc/`St3-f-ogXoOa;)74/nq^#.b0ubFgP6*rkYjK):Gi5[WZudtEt%Jfcq&
%(EH?+nPD->eAO\nkBY<+)S<A".4d4;ou@G5JQ7Kt('g%i4Q-J&`ktTsmru_#<>*6nH98?EJKGUtoD!*(m+>EV>:d5O=DT=Bh%aVU
%F5AfnYiD4g^VHW9aoG98#GX?Z?Xd>kqqG%'>#3/V#.RbA4#V9(YMO\@kLc<;lia?Fa10(rCKM4X82A(=p:LQB+?=)FDfLP8d&9J$
%Bhu\LfC3lO)1&R/m;%BF:H*S!CBo4Y+@bC/IA#:\h=G#fPhoMO`dr"[&f]H\Nm"#;nNr4%Snk?-VYP4XM(`o$@/'m]aU#m/2n>Bt
%]@.#JHkSR`^uR)KhcudX#Ju7!jqWAWOL<-en1m9sKmPuP?;I9lOC[k^.HIA=Ej9Q.hfI[[$6hoUj]U^",bh3?bQf[28:f:O!7]_V
%hXoN="eKe.#$3#\pno_!(-lO4D7Q8>X=FL!&Y<2#-I\K*A/,ae13m:<[+%2tg$^u/i<kKUBe1&D/8,[6\%mX^3>m,-k/S&]lsr?\
%>V;obPJ*g4%_oNlE2&HtHH65O,[A(@^j4Id=M[;-?X`ie_Wgmi!c40m'o_KA:P%Z7C3R,kDk\.^(n8k%Vg4!A<BomYof!]O6OT@I
%jhQ.4gERn=m,Ui`9?*lI;JNSQONtJqZDkPn<r9G8p-3hqDsfjBGaBsg`bMPc3XC"Pe-:AM"QKP?7'4-dG4G\'f#\[6bV]<oLF\`j
%$^nhsP/JD%XCeHP.DGGq<gXR+S#2<N82Cc6KI+=*`'kW@9984C85*qBl:Ju&%I?Bg+9Qd;Ukoe#bI7UncEt1Uh!O0Vh;7].Z8<9N
%R-97O8tu,)ksb'k2)=Q@RO)rRZEZH%3L]=-U0Ao_c_hfmI377:\<NjK(F)e^a7>)';;G#&D$-84h\0MUCuaJ"c!`6tUf^2&]m5RI
%;^MSrW,D]$hCPh`83$=K[nP3**hBRhBUZr@Z-Wdch-;T5R_528nt5(4AiloSZSBDo=e$b!'JoEYP-\6AMn!2W#F9-dn8PU<jfnUO
%\jk.Iq6L8k.S1p*$(!ZAqP#og1?MPO!9amt(^;;S'c0+8/rM-`)]f$V]Tqa89@;%+#H$Pbkk@_VD?0t8lD8A>Ofu;-#4iCD!.g2D
%DIL`R"5!cp!9<RWHHkg<Al#J!%)@"&%$+H-b=m]o0FX!,@M:u`hV2sMV66%bej)shZqi\deJj]Q8A7UH@Sc^-@b6LTo&.)(hmck[
%:"OMpR"a&8"^D8]1QtD<HE(j9<K3@U**knTb7&RpqNBh5jqJ`bMSVkiXWh715/AHlF0(p@dFhP?@UirN!\O/m%E^XljEI'L"CTLH
%f0q3jM9Ee_gcFp>".1O$dr(,Lh)IRiE8"`4^tN$iJQ-02UR9^'J5"V^\sIt=9Qot>"t0LLBT+"pFO3/hLRAUYk*$"?ibiYkGKm>d
%<M0U4/9KHGKiB_!MN!8^161&$C.8pZpdn77=eSn95]G:bE>8uh7FM_.3euT6Fs\RGd;)9$LNK1lN57(_hg@l/XN`[da'1Eg3gYCY
%R;;kgTuF[+&/jQpc=j?2Dm@W[Q"t".C=g9O=N#Jcg%+b^:!B*.g#45FMdLtV%Q(fM_L,R#FX`Bbh?Cp.b,QKG!2MnNJK7;H!cP/%
%X/Uq&_)o@2>T"iV%(a)%8+9`7SIh:Hq.@F,Wuh_3QMZ5RLtR>.D*cEm_30@`Wu@9nCr"_<:HpJVo?@GK?qOnPXBn$@=XH&A[*kS6
%nQ='n&+#&Q1brQd;iA"jYHUEsM]'1#LF2rQ(d-im'N=3(i?%ZM$Fk@M;((f%Z;1:oQcCiH_$#SV2tnap"WT.iWm1r`$B<mE<a#*)
%b=&?GbG>N>A]&`6T%]B,?<,Duj3hX\ne*=tm^?XKZR3T"`YTNmmP2V:kectp^,CpJ5!.sL@h?k(Da4\1eXF:F'n<W;caO^5>A]FK
%L(YKH.]HR.R;e;mk8@)LWDVRjPN1c)A;_Y-*S$]20_]f\n/=kN:/(BZ.aP$E"g*0'"8&]_ZftBo5j*ucW9%O\GW<*s$(qMr:]'7L
%2,Qm\1XjA-<?sCr.+.2C-(kem?PlSACmMmp*fjW0+9L&U4."O/1i*GZfJtOmQ"Vpc+9i0_Mfs6Fm,Y"XC/L,T-)kIM08c5UBT0T3
%LIHX*\^Vl*^Y2T5Wo[koO\GKn<P)`.KkKeSU;rOJ'pDgZ(VW#SZ@or7W98rR.dq2L1ePiXWNss)XF_0hr+&9l(+,F*PaO(nKt[3E
%1!%LHBntM)3G=MQ]2YTJP66(W4Yc*B%K$K=)6E[X%=[VNY9HsiXAi)k-`D1"NUk'F9FfKG@IlR*"b"X5>30L%=h3:p>;oXLq=Z$/
%l@QYFjS\"\H3Ur"a/UTe0@Y66/4p=3>amRh[Gch$@a00K5`ctcQV/2i!sK+#'@WX<O^)h4X]kgY3G:<]juh'u&qck*EXg8gTI)t-
%k::>\\^<d&+r!!2Z.pMT;Q4Q@e.nnOPZn_s=r&le,)ob&Ma]]FVK0eMhl#_GB1JV1)(L&)Q:ffP-t^ea61S)p?CRp:Y#nj"ggI'k
%VB^sZ,u895b\0?]OMNd1OQ.g5TV49pQFV0fs.m]QA_*aOoGS!?RI1,.rk\BK&m\d[7_a,D;;[TMC^F4CQF."'F?^H9QE46E_E,rd
%A!H)HNF^$.efmLXea(Ml6(#Jn<YHWge6t^Pc4AGn0P80=*jcfV=[:KJe;ITIW9IYo6$Hlu^U]E/TDlKML@U4170/*Fnp5a8LWott
%ZD&nMh3*)*$aMh`1=e_0REU(U!D.WmP.%2E7a#bfNSqfaJA7e'pNk`_f[/n0$j7P;Tl\+gLU_AJ1nq%\=j&HgA-Zus:2NE9_NJh/
%J>p5`>8`Rg+>&rUm-Yb*hcu/rL2)g'bIk'PN:YJ6bl%9Y$i8GJ?;sEp7$ERfB?6IN`iZ>(,e_-"[uqTpehb7Ma.+!N`o[a;3\@O:
%jn\UZOi%[h.r%<!2.E,F/RC;Z"Z\04j(@!&mb$KtV$p<IFh;K!iL>8_+qK"JnkNu8q+V6i:;i?8F1X$&H((q-FLn<^&nt__&^S!U
%rS3W>Ejurjdprb#qhMF:Y'Y.HUB$4;7p@8IlK]M5K&d3h5ESTK\/JeH^USu8Q*;Zp_iD7tgECan?:+LK=fAo)<\HT4_U0QS[]W:R
%=&nQC\(_:75/?_j=$.\M0,?YIB[J4D*\614(IRjdWuDHk>>5fXW\W%.%,>+$b:D;D7nW:OZK>u!Un[N8=[&Z<oh]M,AeIs/Aj<XO
%&>0B!B;-`b&EMM-&mC[JA6l[D^g:m,C=siDe9Bp6:A!9%B/aX..m'XdDiG9f9Q,77%Xg;<bX4RU%[i\1<(W@`/+%4U2n,tO&C%MN
%eT29\NB=6-K[S<EH!dhj>Ra%R\jbpTV]=OLPS02U)7:$Gn\8cA95NmbMZs)mqBp(lQBL]E,=o>k]I_CK/%JMqmesIHKt_AZYh0'_
%W:ZlTGpU9FQ;,Is4M;]0P#OOm$<;aeRsB1_Eao1#QJ/e\RP*'d<JK-5Y%`_!l5s1p\Tu@Q=39G2W0pZZ*n>84K9\k9=q/AVYLg0h
%!guT=o#aVP?:9pD0S/_]Q<&]+Wroi#r>#$.9cA*q4`"DHhGo3@<>M?K:BDM<SpHR%(l*1?`_:gjd3,c*O\$<pCo\*YJ8RU%Pi^+>
%>?3=h80BDoPHJLLUCgcILb?fb(HHfp[H.3rRCqDu<l%s?"g;,Be`,kk#E-sMjj#!ep9do=QM3W1Ap&gCkETB4A^t0IK`Rf;<h;FL
%7EI%R,*Qs-rc/D/WB63=9fJdfgZHQkB\L0=Y1Rojb-69MbJTGo(f:0=es?#d2$;*A0:Qh/_n^7lDHe9]DGrn>.#T,W<jH;?b>;ee
%:Eui?ob[()%n$h6nZ$DOC%:e3eD:?-QZJ1olI^>/n$qsjqj#,4=l@2=>7?hO]L3tgoR$;K*:!ZWl/"$%L,Q%tiUc-@rL1mNNUJVh
%gFV-.<>'"cGpn!5V\$\dW0mGJZXSO`[!R$,k_CF\l8%Vsr42P@rKTo'K+u3"p=siIq@_I?k6KE<8G`[%5'1bKH(*VnDqdqq]XDTk
%/X%PDG:NjqHt5ht_cu[mg\crCZ(+@p"j3Z&%i9Zf.@B^Xh&;7#cN/9AJo18Y/q\i.kE[=6o;rn_2OaMU0q9g<bmQES're9ZaMO%2
%f%6%f3>ANHXce!%VE$Mt#cn,miSe?KN#C@Bl><Y7?:j23*<nLt#P#Srb]PEW,8g0d$J.7^?9?;D?d%ReknTU--6GRol)Ofa+(e]a
%X<2U"*aakCD%q/.YcoV"m=;3mDok_$hEAr.e\M6ec6I"npt]^LY*7L]4s]s2eI&`uHMHp@1?J2qT9kAnrk63u;AW[bNOn8'P&li*
%k\4HRSF'iK?D^Q0du.GDlo#+'k`p@36'T]XM:ZXNiZ_9@o]12/A1Xi6s25:EH>i-mR/$amTtF#pB@(?sZ1coTS@f:3EZU1qRjb,C
%kX@NnTGDY9lI7Zq0/%MD_=9-(rZmcrm&E@t$c/1H!`!EPpp/GTqrTA[`MEkH@WK2V>UP.V)f<($W)8=uKd<Xo\]h(&aVWe$p;#Vo
%=ItJH5Y61MIK3u.mU/Y-R3![50\o-A]t2;:-A43Wk$/*`4mGu`$X8/s!3P7$#fa3r4;Q2B*s.E?JD!g*5;W]-o86/S^IC)+L1K!+
%2CG[D(U>??)G]&i'Clcl_9\;P$mD,.DO<%'ie=lF(A0"i$;0eK4R;2[S5i[3T3WKHUpS'(*Mq4Cm?pbN2'65k6tiSi?soEl,-P)J
%frB1g:kW*\&5YeEPIEGrBObU-2e32p2&s;QQ"=tH]/i?qAJMGfSM#Z!G`g/:k-]_mAo_^$I"2Z;Rbq#jZ=,JA$1-M@Y_I$._me]Y
%<ZEX><MB`"c([W.#e53s2<m]!bnjbH+C$)J>;,dW'us.tX@2qI]<iJ6S#r%@2omb^f]Nj/(n5g0U&./$9S%Vp4$2d=+@*tTS@KH2
%`UdJ,T=P:^X9*i9>$,<OUDuFW8(N8mJ^=&,[,=V&&qGr]r>*]1Y-HVjWY,)A@E:ek@mYi0T'Nt,5j`-?M9IK_RO?4qAu9'Ek2:s1
%@c(jKdP2i+*512*i7GLpaMrCk-_dJOQ?8.[FgWVC^Wbkpl=Va/`G)?F[8"Z`"[)8g@nE](=goo<H$-R:$,aUK8?PoN96cJQY-5K;
%dI2C<h#aE;V<>qLSiBbuJlW+Q>@["81Vc(oZoF?1G:@$'jQ-!?OhIqG1&.]%d]L^:7P2Wb;ckuifi8VqQ6jtQ^6L&DM97>(#1(=*
%m7MC&kI,CNF4N-YQ?A`27"('H#'3kRo\$L82$XpBfO*a@omSXLfGMk@>8FI1ncF>/Ws2W#ept3I!3Z55KL7R$[^IW,)P#u'a^?M`
%2<PWJ!j>gh9Fr]i'O:T?+X)#q:Pbke3o/G"d35[)V]-obE7j%,AhSrBY&jhg%C1[-lEHZT!FR*1Sr"mM>(j^Q(otfm<`',dYIJK(
%]-%/fgpkJW68nur#fjA/W'$LcltiIt1=hD.@G2__<_jl;d#+Ed@q9K1Gi5m;:?Pho=DlCm*l2R:-U7LXpV9PAZjsClC*lbg=<+YO
%9<XP=(#(KmN/?fXLY2HAI?t,>Q(^jB.g):o;"3j@*547%"bUlc<EuA)'-\`X?YPVXBe@+<(qIL`8Ss/J1trm?!XVp%jBb+fAP=#@
%WlD9W<0FTqXfEtC#$q=36PSf]pm/lfa`[iDN]&Is?YMF!H?fu9$)1ha$3?e/X*R3L#F_G!@q9%*7+SFZ[kc*ZU;*dVj94$]E*b02
%j$9B4T"5.?f$+5alE987DM0`92/Tg9VL>9S9k?%eYl!$/q0iF3`*//5[jnBUN>6!Z*Iu\KC[%&e="`eB$2>Q.Ac*V)DQ!aR?5r?^
%E-QYa6fb[/dlS0PXk67C`X&dri9IFO@oZAX/ug&TcjJ,LZ]+NZ]6bGf@t>R/_;/-4*AoSM#g-]^+&pF#?>W4*PiqJdm\0XS6E_:7
%X_hE?Q*c^7Y4:F*;!bQtG)puh)+Y6c>C)[0QK&Y<JR.H!qtiJk-;M]@C,6_[f-FcbY+sCYP6-Z/BP"@2V<l[B[N.hd0+NOjD61rP
%/N6[9!=N;oPp/^P%Y%O"lD_DkCO$5*j)m2DFK?FU:h%N:"^B_ZiY!nYCL4I!g4HK`\=toO(eg%O37)W":OFmKK`FG-EjZn'RU,"k
%]ah=Ch(j7eH(]&/?P+f`[3-L"B5f*`-dGk8imij,1P(Or[3V,$ce8H%'*ai#^_.j?ReQ+_O#1gFGD[o_dFF)SOq"F9Gn_7^`\/6$
%VY=6Jb0lnsVD6k2OckVe(dmFK$lW.ANo9,+P@5DE'r&_0/:Np_dYqZhYcG3uB-2'!>N?@a2,$c$#eM_GX4C^f8XPJEOke,1)>/l#
%k9]P\N1Imh]rnC<ICFQCe$D:-+cA4\Mn67tk4t$F5oYTFC/X!jRT1'OU*jPLLT"G4/"q9d+b3hTDcD,HG$5]#0N^Ia8uC,HW#Cba
%JL#;+5+`,K]`-)mh#Ymj.V#"o#Bj-HcICOPK$NoG$?&aKElMD\oE>7TgQ%E,!-!?rMInB,9U%eeYY1(_XA*"q/H"(]3!YYj6l"[<
%l'7m`&@C@(gZG`1(%-p<Q+'j+40cPC!bY[h,Zdo6@psN\bdl,Z=[cXIV9Tq4247Iq@F=LLU+>63Rd+m?0q$AU)?o#I+D4=T`kJr:
%.ijR=#IDjpi3YEnrA7Q[bPN?p?SPdCcO7SDFkemC\cH+j^hA%\jQkiI\"W-HpU$CrkJj`fde?6jfCGYsDW9Zf,C%b^KgEk=?X?%n
%kj-td^=M;Glda\G]Y?m_0Uc3ad$r=>=dBqsi">lHEDLCTGCDT3Z.Q/A^04_!@R'0gBY4SWG$Zp^Qkt)QI=4/":fc)np*LV[AtR+0
%&\-WNX*Ua(`C0)E;ff?JQFb"k,qT%7ZE-:C=R2=2Y/oq6/"S;nchQNPLd1P.ZBmr'c+O,ono@nMdD8QWmKc:(8`pC$o4mZq"P_dq
%?oVknnm/VW6Po=8lXShRo6::RSftlh>//0KD_P\Y-mN?oKWSB&c0J"jh3a[KL1m(G.L-WJC_I5(FDTm?8&q&WLn!Vl0Uqo4arVS(
%FmXNtXM/K&ULOCe4Z_Rh8(jR<Gdj&!glMX>r1`j4Qec\6Y<R!loT,[C+%l;kWB+#H<b:eA7.4ZVF19HH&8m:k5KA)V>5&54#!`6\
%-)*F5+NtNS?t_2?(Fn)4Y59!:Hf7q9c5>ApNn?Ep?FQ?I^@e2(&olq`LB(MD%5QD-L+NI=$)ODcU%bXL%kl6S:p7@ZTia$>\TX75
%DiET%j\+!Q!D*Y'Phg03OpJg/b1gb($Cj_i*/=3uV,i"[_hL6T$*Gr1T$F$S\"ib!b_h"6h#ZaV\-'fm\_0[9L0-)]K_QX$:3JLF
%"F%UqXb`Hfps]WR'Is[C["q0.:&/79mr#<jVgO3X>>+L;7;JtD3)hoIa",[H4ds94+m]t^Dm$tMXKJU*a[(AgGDVu)67,$l%;1t^
%f175W#W1&q!HjA*r4<l=e>1p6E"0WqK%G"*s1sN[?Kc",^4EoYL?SO;MWPK8GNj9Ma3j7CNo10n`rKN<l`[^u7I-\0[q4(ikR!*U
%4P%/V2^W`\8]"m^Y_EmV-8t]Mp4.D-k1"s,29WBER9+r_&T50[YK3#To;OVWF@RJ5d<U?/g+51#.?/k_e9nJenBWJ6<LFq[!V4:>
%qbD",\:k^M=.XgEG3NY3lIBs;L%54U_.isreleVLI^K\B1TKOT+lDSQb$#c3.9hB%P3BgMM[O'1dspQ=C+6pu7l@p[ka"k0M=Pge
%T[ff80\G[P9!Gtj!RTE:X%hDP@(*d8$oc;jMSp2<0JRk-`fcr2RRQC^YB=o-`lFVT(8R1l7CbaSIqdeg@%Oj4EfEG<4"6q[ELU,q
%nU<X`)b'4tU4VAmr<E=G/";LfHAs7>Hs<-a"*^YD:HDF9ea"5VJb%H0V3i*=3aI&@Zb@fL=Ofn@_0q9cZZ*#1+c`Zk*o@j*hE@=C
%Gl71`!POnr=C?s7oB>gWpM59A<'=AUgT%/L\XD/*LUnf<ZTAT"@lto)8^].R$;SuOB/9ss>bDk#`Fq&mR)5kMhnaef?IhQuf3%OE
%X&\bs*fSNj[rjA!&\%0[eof6tY1On1mIheLA*qT+dKS@UaofD-g4!]eDNa38@f?q.quBCg$d@3?ou5U!Ein^#-"D1r%gY54%G2\H
%B-k(=Uabo=Dn#]gpcm?1A-XY`5FfCT^5GZ7?#mI3,Eeo2X8ClHNpPB6MK6U<@CW([Z'Go[p&f@D/7taKC!D<r^cEYiO:<o?!aM0Y
%ImC6ji?1,j&:S(URd._7k8PpJhB#Xon/fmWUlM,0eZ;$`1,5PlfBP^e!I36E2rF9(K%F3MetB*.Z=4_YiIrk&_^luiFG-+Yj\X:W
%mO/QSm%ARRiot_ob),;N`s;b5[qG!F[2R2b5VFYDG`.Ede6UkCV!HUJ+P>diI@2g$e9e?^5Z;D'ZjsAF)k/BkpWqL!lL$o[$j</b
%W=R9^Z34A*>/LiO4D$0/9OU[Oc#C4bDg^E:HgQ*.^NiRm/AUlEFa:#Gi3(1O2?[HZJP$!ls3dtYG5d)H0h_(fiQ*Ko!6@<7JSRZ?
%a-:\AeT,M:b:^>PE>>DS]]-C=1OXFpJmOng>7MB]TsXmsZ)5>#n(/i$e\M;gbL!J"R:,-BD&YcV4.p`#@EbLa0Entd!qU4Z#f":)
%ADS\'EZ,;CcHb:Mhhqi!iFTfI1%W%?*8L^tT=G0OcFl[Rf.44D?sQ$P$nKui3d]]H)f;Jt7^pN7.X8[%*2K%IrS3B9NG'O-B`!Z(
%;EW[`hL58!N*XmeK1kWb3TXQFi8*L:0:8TO@UiO%8/:>D_mGR_WrjjW$EtW2g;._WbAZWDTEUEEDObLa]j_4k*goE,..XT=/t]kK
%P7Xo8"K>dMa8fJ)h(,MXe>6rr/=I$`\NS4GR(=:=hUHRR!AkJ]2>Wq`/d`Cf4Y(tSQ6p"&-i4Z$?2tGMiaF`AmmD8+!lo>SZ<V``
%@[9-l(,`),jFn)W7dpuo-Ft8-GS#CrO;#r@=;NNTfj<"f[6C'C?Po_pS&U2,d-U%#S!;)W5X8"lm`g_]NFaT`<YNH'Xh,50;:c0A
%4?0`jf]o,2+u\$F1-==n/:DY[>_;.n/$ggqeQ<\134hr5;Z.(^pR)'lT(Xm>!'H'\>"Unina%3:=9[lmdU![PPoR,Uoc7.995pu_
%JHb9IMdKnjri0DGgD+="9-BQpPmIQa&6kE+JV6%?7;);7hlLSpK15%F.S?m04$ip`CDf87+2CS\fRoO7J.@a#kdcGu_-mYAD_B7W
%N-=&QVeKp^_(;?Nmm5uJiR]c667i5FCB_69KTO%tF*RK@*]#<h'hqUOOH)?R)u&Y]p[n$";*cA4AM.*F83O/u<]`)hPm&*@SGBfD
%oGA/Thi(mF_)cFI2h#XlpSWYP&7t?s?utcLm(gH7fn[!#.MBg?=.a9.R2<X(>\!:==M)Y\[BNPX;^7$S@6FDg\cm/eFg-4h6A(9?
%kK,X)(*Il'c?%)-gRoti2G+@7lU:l?B(N=M)e]e2!D9PkJ2):%@&To?\=O(5>W%$KP=Sd.n#TQe@DQYM"2-=kf=r20`h.[DQ7$>#
%b$)cDV9p9jSThuh0V.?3h:5?D\n:<<%:XKtZ$!em"aES';NnjcURd^p<-TfjDAbirO>n29F+oJO=EE=[fYH8JI9A1[(!44uje$HH
%JrQP;Wtu!k.epdMfm;X9>UWY<7<.PH]5B!;Yb2.]"c"Hl6Y>SK!NLqEZjN<1p1[LW$rC>75SsA!9K[?\H`hg#'Xj7.ja'&CdAVI?
%^-<m;@3pG4\e#3?*F>[2d%a`]L',c$*:*#+F[u'-X4rd(_PDchGTG#UL*0l4bQ^a97S7<oK1M^U4gBWM_2\M9<.gOC&\'`pAWbsN
%9ld&RKZ^R&b5hr4%i?]s/4JScCY:;lCP"'p+tKR;m<FSD'qLWCXBfG4,()@n,EpR(ElWIQ]Y5]SA%XcJM$GUDDW%t2*VC=/ai!9O
%NQoUA@T_#h"pI&hL@t>(m%84b#&]XIKLXI9T!\&2\C79^&Xhup<CMLHG(lls`\YdO?I;'lSQWs&'cI=H=t1,7Xt;&@q"'>$,q.Do
%2M6i"$?RNA\pj`G])IH<9?Dr:25?V,XR/L2nT)Rj2;GlX'3cs(b&gTXpQYq(D/4J\YJOb9<2M^Xi'aqOkFe*JY5i[pl?WW*D_DN#
%XAL9E6R$AF\Zk#R#kk'&_+Sm/BIr%3gl*)[F#0q^2_\PAi3f>iq]dW@WFa,?2K>pX/Sc?A<5k/C8P>e:om.E=*OrJ?agT#8+R>hT
%gIs1=<2XYW!H:DG>fTC1=%:#K[<:=,AklcBZgMRc`-Qk7].0@Q.3"p@Y+tLgs3J0@AQpep)Tc_2F1o_<_7&\e".)3WaV;anW.\\3
%IBh!BXG7I&DIJgGZ''WuYadYLaQ<!B@Wko1V`\Talh/8`*OmOF[Yi2uluYiVh(S&29/0"]J&*JpNC:!d<fM=`-9IkKcj_qhf8ZE%
%S4E(-@m/^sW6KV[(&"8<0+(c2XUC!!i;PecmoCm;H--@gj2F?($<_'D%G]$hI1#H=;fGjcAQ81L>.[`"#\<G+Jb(qD"(N5H3gih^
%'5mt\<I=sj`B>;LeJK*M:p4?<9^*:q'a9.Lf1I&]E2HCeCSLdC/P+T=R3*:8!39Xg>6fdt8*FftD,/n:2V_PjkM'di7>iuG_i9i1
%((7/W:gd!Ui5'1XW?WdXUnq6ESVSS3d0>T)A)05@^s)@K4N5b$or<c8e\MH5K4#TSM@L.-jp:f+cmoa^B\i!]X?/H\LJ=@kj:QjU
%3&dfWGh]@\$?O<QlqcaaYikCn^.<0qA!_n:Y3Y<sqO_]0MD#c<a4KQgA)P&i5f%X';>3`$:B6B39AF!&V3D!`AlQTIj%.#0m`<gR
%k]E$mC]rn7m4lec!n>A4=Jp@XigZ_4Bp\)kjB?mn=9WosKpO@p0J=&tFg]H"Y-msJW:sk*!i$55kVb3s@kLh-R&21^"Pc+o?70:o
%Sa4N8GeUjF]/.[6aAV:SRsiM=Fl@_.@3(fY8Vo@ibiC6u<9kkTH+kf%/[2'YL'=5U*2^Nf1V`PL;?`Oa=[eoc<sQi/BHA@jYGu:A
%j=(Wk-N`=PlGB>J4&*hG!U#V6@d1L7aN\c-cCG71@QXu;$YXhM.UO`J_b-^*Gij-\=l.NN<IDI_caQtfdso&/ph22=>U<2s8j:sP
%mcL@+FhaOe9STf4c((.8oA"CRYQJYc0U1*RAP9H-X:@-BbnYfo(')@r%Yb@`%U=J!8`+=Hl>De8^.\(/Hk2S#oY)b@*g<AW5t*9"
%]'e,U.g0ncW],O7K,qHQh)TJRJTf)W"aIbl/8m,7d&n>;>F-IldCX2Y[-FF;_GY.]/M.Q`o%%OGTece-H(AP]^MO'=k[S=jJ]^hm
%Xu`]bcZ`A**fn+]dhZ%K]rt>9S^EcR^$sj_mXUeUA^JP;jeQ]^/0E=VraVFOn"-!Z+GJ<gi55V<^J17a7Zss,`<Kp6!DQdNeX[H&
%D#k0gJ%iH=[X_M!+\isILZ6H]^qM9l(9<E[iSVU]"YWZ3?P<djF?`#m.18"C=M+c50AY8:n,$%VleIn46Xd$(=\%RY`@UVdi+T$P
%"b3V\Z+f*+i4N?+BO`&f0TRk8le:[A\snG)mSoi&RH/^bW<+*YG`4o5[)to?=Qa:<gjppQGIK=X9%3M-"8\X.YDOp+>t]r\=M&Bs
%gP+B7d%CHOm/7t.O@#]LU:RB;4V*UZlC=0R``P@jIXtk9%b3^IGNX!%>u@l_[`9CVdh?8:mPqsh;h8P*!\eHrQeu),GE5)"\6!HH
%^-L93e\E#(]m8VI!c..Dhe@6l0[1U%bUR])e*fBKpFhQ;f[;Atq#^<:\!LXShm0dh5d.]cOe-U.P!l?O7C#%%Y;:)!eNiWGZ<&!g
%"PBKB;:BM]D."2GAr/2F2JuYlA7$?Z-0q.*J^[q+QtYE:1C[?_%CZ'r"-lSSN.DCW$$VbRVG<Ebp\_Vf7DYO/%XS;?q&2)GC,pu2
%]cOtZ2YT!fpD-Mb%MgGWRnrli&Y<pEc$/d)8V8_V'L@E-G+LmY0W$R*?r16)UDMA[kmp8LBMF!ES$=/YQ3:)6D"O8$Z3SscGZS%1
%>*+6iNk!5""6]pj*<=!:'ZeOc4BAB5'a$@r0p5$?W%$V$i$qGW7k$AmEWl`_gr\1oY@+,Bh'Bo(Gr/p.XN/"@+J?%rNbLGNeGJ(H
%-$[/;1:uJAAN&,TD[J&?A22U&-$!B=RVk*%Yq:Q6k1JB']0`23RVk9V:'HTeJ9bkG4(.9A0$40]@F__*BQr&"<N4V?&EaP5>f5],
%#.SmB)JumQ,LCYraadm_/K/*l:_GPVc-cel0h*CK?$+[!R[-0ufcG)b'R"f-!me=lAnURQ*p?&*Qg)Ft'MoOJXaD*QL721;dk%7Z
%6<qoj83,oCl1<)b'NjB>g+aD*dJK?^eW+#j:1:i=5X1;uciL5(^(if0jqJGA]F6tl9qX`peVcO6j5o4<%1EeP"IkeWE.g5QL<jT#
%9O3WP[lAsCo:)4e@/p&rU:g0K&hqI:Bst=%G%IS@nhk+!;`Us(S/O>EfCKk4eZ83k=ss\4+!Zb`WqW%Vq6Y`KquTg?o5fu>-sL[R
%j<)j"W'OeE_%%HEfeQRSDmBJtZZe,,gY*mTlN%K:3a;/;-4jj,:m-3MnZID(#UV2XY_HaGN>0t#ij!@,19]#"J$XV"PpFtbqa:sq
%h$R]T=<E9ZGb_,?$W,qlknX8G/JRtE/2If%g'lsj2S-*mDL=WR,&7C`o5d=#h]I;P!c5]rQ1:Q^^7:J;<S(IMJf@4g)DbQFA[qWW
%mo)IoF6J!S@6'AhfVsM4!u'K`9H55I"r-ajD[AMG_#K[f6=Zq5O1r=khQ*WpD8CU-,`['bj5#i\^<ZQ@>S%q\qch]?k.TJ>idiED
%p$K6%AtiDVOD[d`KI3tcQs><sYK6UqGoM]p7s2`;_'QRSlopZ_e6#ckXmJ`i?$_0AQBab"Bo1SrV-@Hg+Y62'/%m,9k#&Y_mfPQd
%2fiQQ\r$PJ3dBT02&<QO&*:CXNmth([=<0H0V@8W=RRBBYlhee87+5q]XX6*E5'#U7[VOXqd%u'a_XocUWg=Xic>^loei]q?42/9
%Lb$mM\7aQ^,BnCiV]R>*n\N_-ZHR4>o_j!c?lE,S/"W`PP$q?33T..'q"J0s]TcO.5tpEr\'[Rn&4[etZ`"JeB,;RnGo<3pbA[tf
%#=*'Kq]L!R0nX0&Eu(?6LF3r6RF<og>euD7K,<_iaig@75g.j:*a?XoO6k[\?ltg!EPMLUGr2BDO"F.1Jb^4/nN%`sia`Db8's*I
%<0@-n.\'.Q.<8J,F2ZT`/?k7pTdGXQ%C:b597aA#I_Y1;ip(?II)6eq]q4shiq/Db,8;CLDR*P[U-L5qUCB/EM[LMMYF*VWI<C"B
%MU11.a1EiKeG6BCNY`CaY@l&%U\gqYjq`bSPt?4&KYj!Woar='"sSRJ1R=LpqR(B'(?P@$49"_I$/qe\khL/PJmmJ,E<5tqXf_0>
%'jt$dr`drEQuF26m?'Ap@<DWAV+ce_Br@:&K<'thjbJP\ors\k5cIEnSPYZI'rskCGRl$:#k3.0W0ZQ\/A`0;"L-eBEMt%4#A<_!
%)H=a2fqiUU0W^uf$IW,%.E?#U,(-H!D%a$jbm]2P]R/-5E.o,RTes?sb,.p7L"<JacDo=JgdUZ@4$4$fE`N%mT[e?o`I7ZaS#m$n
%>.b^M2Q]0/Aj8"jD"W\(7_<5CCWT,-6^OldTPo;9#f9&%R6932gY5sE"6?V6KRNW<1RT/W?DG+_$gS2.V`RjSD0Gm8%Z2`MQ0$f/
%$NgW?0o"<Up$8'[=5%(fC8DgH!lmCd*liQ37e[B9H3NFC`OOgW@j#qC`^N%V7^KKj5rS=km!@0>>>i)Oo+&E#2Th7>aO97)&ihI$
%QBTA<NTFi\e+7Dp"TeYjDf&u7)96k-H:@ULo_Vm:@)Qd5I&n0Q((hJNhKTaGZbk>tl?lEP1%T!Y[S;nC,IhSHC-9A[gY9?L9SN3C
%Cg^KZ;I#SZ^[;KGm4Ee%3aNTA&Jc`I-ukXJ)MciurdWXKZJ@F%,khQ=%g=M1+9O4#m\>beYiP2&[qSKs]K=SU%#bg%OuP'p&OfT4
%c.?mRQ'lcVP]aJnMh+==N/Gc:N/W_.ib5+,_Y_uN,a/e-Rar4@La8.fIbN3_!WdAj3f@/!n4ku'>)^E#N[MaB[WDl1gdi2$1ko/?
%_4aZ6=D]033]R3bQok*He'=3_$:frE"TA]Q;_spSR]r$-8#a]g\mmgt&@@rM4bL+@4HL]hCEscZ-.BQrl^WWrNmd@-P5d7-c/gR^
%Sb'jj^pIF`2RYmu"tLODNjE\W`g3"cDTngE+H@r-TL.E_^0epnZ4tpA!$UQ6/1F(?E([qk!>n]SD$g?e):DeM5a*UFg.F;H'>/KS
%ji!XGe4n&kS-"%XR1O*8Q^A<h74r`:i%Pr.k%]ZKM"Hd+j@L0IUna>Iip0TjQ:]4DfKt@&Jdl_%Gra&K3E`/!YD(\&,7?)uI<4Fd
%JU-4)#oa#!eWT?`ZO7%am>I9'`MF?Yf0L[Mgb`oIc`1I:/=L53G@;t6`b#XM.M^GZ#CKLPj1@GG\.an>f^^6VRq.ZN@`]8bf,,J9
%*@-d^@gm)CJkR[H^>fk\!QgtQL)K+&H=):J(JH=U49HA"8cj`Vi0VC3=O<nDp`*H>`IK1*as<u@eh.KM)BZi.krFNP&l)`WlG8\"
%aI+#])bb47anuXX/Pe^9?>C;C@#2`r6s2t<;BlW,b0&^o!QJqFF>Bp#]9?7sMf(9jNS/bod0@KdT,k-f+IE.j8JrLZV1D?&D@.pK
%[hRX)@#&,*%)eD6cK:kJ\(R+@j0miR1rKf[rH=N8J;RG^(V!"l+@9E0;E[ohJXP/RcPh2>bm?gg+tsc/?]N<H!JOf,UD=]u=lNA2
%#C]f`J[%8[*0s`(3X9,<=?QLI&6rL;c8UfKoa1(N0^,kEQYeG;';fk]Au>]%jb[8To9*8==KiMG.J[OE&LckaMXmPI3e^C^8e^ZW
%"@rrOo?&bq^a2VShn`McUm^Q[XL^1>96am3/d$hB[qo4W5RP&>2:V\2grb47DIFRi<(14b=X4%3EEF!W?d_pI;Z]'qO,m>fp.*Sb
%#2HQOBB.Qdf)*H`XQUK.PQgoJ5-Z=n-<n2WqN9;,?:cEp;an`L$XM&B,Op,A,m%bA7NC_qQ89B45^"I;_Mn=&;R**^B$0:i38i:^
%f3"DeMS`Dh=_5N[\hW3gP]p0lb"J_l3-ApR8;::"=]1cD'`CJb7+<G?6f+l#7]*P]]VVAM-JAm`J0Or`%b&6C$Lk-(mRl/0&83eA
%bM&*qG(7.a_'?<To"BdjjrdDk7nH/r_g..#!c^1!UAEudPpH80_UCPiXUYi?oa>@h#G&m`Clr\%mhSio1;"'ZHnr:;bJbuLI63]b
%Xr&uR#c(^os1oJi$bYF.i*uRh9*I]V%6RaEY3!&H>WYbK='4^,^h6@XeLK)B6r(ZX80n^*hbp0Wa1Nsg$S0,3nhAcbD+70*(0]#C
%3%3WH\tnC.K,-*aU&+u"e([Y<kI]F@Pjp7MpDU8\g^(N:P033Ici1@4`>kkB_[WLXEIn[<FSL\Ei3X<.[pjIh>=]0oa7gJ&9+]Gl
%9R@QrYX`Df9S!9WIW[DNie2C2kQd1f&[M4UW`$\RqL0q-D'-Wu:52E34>!p^*;jSp=[_sb>s=!RA0aZsfNVRr;KHYLrG@AS5cgo:
%\-jk"[Q_)^EIcijY1B&E6jjh#U^bmj'T]i<"/1q\SEdOU_%s8Xk\7mI5#$92g_mI&aA3$EBE68[:V,XN9TV@l:6J;QCni?88K2JI
%($k4n>&$aF=r@:UYZ_kDlcQfm!gJ3_q:$+E91DYbT!Z>&$jbqO(2"(BD%R4-OTD\hk\9#g4_Y4`q0"2O84L>"Z4u4W9u)rN3&Pn6
%&eCfD0s>IhW=\;Bg^kqRc@1bG$DaMpN<ZUnh#c0r?W$=5:/V6(kMbqG()hO8;^7aAA"PA$$.gCT[lB\5*+%Ds0H/#WW)Mm!''^N+
%464VnHKgO\.46P[%Zpkh/&Omnh`\3B.^k''keN#Z%i\V;?=hF*Nq(O;4:Vh6:oI!?!0Cpc?\C;!9+*pC>3B]4IC>Yb:("5*3D-C0
%1T9O'j7usj+p-NCBb%#CfJ-PLKNM\EZ_#-&0[^KF%L[[lmF1/s5[f'G_&X:\jIkC>+`''X?;3D8p+qj3hJa$Y>Yqj<_nhRs#mT)2
%Mt5]MnDWY'X#;IAZY_J!`&poVMD)&iA+DeHYS*-67T#Y?ORY(7g73h<*`3Po3>lhNmLCUQODC=+@3qELZD"=2,p\6Oj`K$,'Co4Z
%6(=4G\>NN3m'C9(0H/HlE&J]CL9oj324P*\mGVk9cjXR)5Vnj5$oF`i`BZ5J/I%[&C`$gpB>_R:JCY^I`j=g#24XP[3I*5eLcG3S
%,+j?4np,A7I,aLt$g*``=c9!Q3iKCC&UE_/FtA4@&qRk##:'@\+E\tS%>(0>UlsW<,nZ*hOpLcBZMP[VRWeo:JUMfOS%Z6m8=&q7
%4N%kXY9a]?+hK<:g2a(6OXJ:=qWRlVTKU^j\f)nOdT?aj@dp0&#*k[8U,RdB!LlEUTo;cdDT0(k_3%buWNW'9`k2dQ]i:"niV)qo
%\JCP"p*!+n8\5+N,@Yg&_>"lL%OnUh\i1O'K8cK)+WjUFE2!]j:Hms(6lChA>7l4q6A"&(&7]flk`nCg8[8e=P3Jbk5$^fkp,a@4
%`)F*F@s8=<QXD^*6=?t7r&kn&1M._5EIS2)hC'*4ks4G(9.ANpS9@d]9.6'>%EU;e$AIOA*$Z?ilDYuZk?&?V5RCAER=iCRb*!7$
%5`t5NO:.D])8e=nphV5jHU4fs6;Omo!8e)$Md6oSl9RUqP04,6\5M\oSgLfVk"\]^XtQ$XL6-2'SRsWJR%6jf/^86jZ,f+<U$hND
%,_?]M%q!?FRe?RRF?Qh.]X`68;P4,r$'2C1HfL&<f$1k=Fq0OnhbC#<`Hf/B!VMHDUI'@/5#t];\6&HZD5?Xm-kY/(7/.pDG0F[5
%r/=NC6fKp0=I4!J-u=_*l0ogupfV1dq\1_6`a]\]8;(pMa:1,2$4^ed&j4p^*F1d'U[9mM?tDttl]M:TcK`E7]D>nQmi5VI.,;0,
%asRq/1nVb$cb3\XLNXSuip4S?,cDV;fT4+Q+9rcOG7tYIgCKpCKd8I0BJC+rig/fo0Xd(bT#(\ASs%%T&]k%p;N=WL9JeoU\iP9;
%ENqE7N+fMS;4u^g!`.NX<!K$9]8)"Mo4g-:6-62Akf!pG<@.,c#=_9>Y6s`i=bT6BC0.-Rl<(Q2$`7ELe"i(]<M6#@6cXMe\<nCB
%$u,XnBJ?Mtd+t8ri22BA#Y*iC/c'9Qq8VC3TI(Q>aK\>?:=84SWa479D%haLPK4Bo1e;TSg[-o/(68S7opY$?+i.X"VR>5?]@Tml
%!5Eo]X"u'_CF//!LBL(\[3(>k/M/tH.lZbfl/b-el$@I@DH:*[%[QL0bcCZQBUmO`<]"`<5BH&I8R@_SlR#uqbbpEq\ZX,\'0FCF
%o5g>'Sad3>2pUCG!:`2g?9#XCb?amrl3jUt2AS1JK)b>GeO6iN@o:Ns]r>U*WQ-qA='@)P(K9ZG`585OomM8UHuAN>f@:G4@/[0A
%E[F5(eNkCZCs5I7]>*-+mjdZ4rd-Q,g,N26)c<TWr9gk(RepC0ID21P?VC'.SN"J*/4s>$7=88fl+C`hJ'=Cc73a)gj*].=78qF#
%$S6&Ke6e-i0>)(hqJJ5!(3Ponn\54j*Wkbr\jd`J(07=<2j^Q?PBg00[_H;JB@@Qk_4q3P5sDK=Ken2<*9dL])Q:tEi4"NK)VAXE
%_A>c*RQ4!6_GB+La/@U-(TEIrfo0^J3cWZd>jVS8iM?'ceb\Y;X0;0U\ZQUW:.fYU02XMR)qHg`Coe3uL<iLNg1W(>=Oe<gKjb6O
%mL*$1Ad,3c8YODo-c;P][.ZKb6!qMYWf3*1'$%,=e)"31mF3A9EujjjqKJ=Sa*iQ\$kfH#Kg&d.LieamR9Jjm#9jSm!="\nBBm#$
%OPJ(Lmh#.(s5-aqNh7]kq]OQS8bIr6>W$eYIsREDs0lc`'RZ'qbYql/HmB4uiSYLcrGi%aPW?PAR+[EN_&+gJM)o1&Xp89P`)?qf
%&OnTs_j;0N[$e`8-r7F+CD`")ZG%;VfDmo'7*6$?)rZS`k(2]m\[A$mPO4F!?B5DE^OFZY;hj.Q;]J0j#Zrat_Lu+OZnp6n*Vn<N
%GZ9!\UGn0nAFC:sBE:"V;eej43]sOg?@WNl()rpc@LmUg*KNQbk.W*ro^WYsSjT"T>3+p&oWemX7HkAagbu@OPo,^mAf+/Kh2/u2
%L?8Pn4U6Y'#'qs:T6$rI>92`tCDPA$9o]+spRq+@'K4T%:"WF2kN@qq*V@hOIYdQn1]G!<8]KRFZE[)>XW+2,d1"fT%(*krp9pi\
%%b7N'N;dd-b'4dQbNOd$0Gj'PZ<3++^Jsl3KjU@B7L-]A0<Xk?\c2IF22gOR_YJ1.^6gR>AK`Ja/.>50bW.R$lTXsj%`IaQZdBUI
%Re(^`N)d:N0+t3eAB<N[`j<</'IT$!ZceKO)WfndF7jXOVK4_u<39$jY!tS<g!jc[_9&<TkG.nOW]n2qfsMlJrPrYs+UCRZ7q#g?
%%rbqN@23es[;1VFeaPEN`ir,+Zr@\O4B#q@!*Vj-.iU.:i_5>%*j5bb.mhC*U`[^!=:iA@9!bc&.E(brBG"2^!a<si9<CZ+>2!fq
%R'U:5,D2@K[9N,OlB4Hu;CY@MV(NQrOH(ta^2n6uWa3f/c<kMPE5Eijn*0)cFcNY*B,r(T3iKWCPFJFUm!DfqoNUKn,[@@'cgKCA
%(;2)iH[Goar*#=rIHUOM3Gn?P\o>sdfc6%EG*]Z*,uqdtEAO59IFEM3rr$FDolk&J1#\sm]"1cAErMa+$o5Jqp1:_PauQ9H]*B(t
%I0GLZ$]CjM%3P/T``4[`*G]L:9''8VksXbN>CZ@2)'V14B6u6o]!u*Peg2%%*t20RFb#NTG0lcMQ_rUj5?(_WhV$1g,Ocp-"WfSf
%f%dd9Nkok-@idh1m")j51\aM-5.%rU<Pu6i)JAqg?.[ZfSR!!0>inahb.t4Wmqua1Pg!2:_ZL9UrkD5Q<(E3B2-]<Skc:Ck1;=R^
%m_[I5WLJUl[0Z`7lF&*L/Z%DEP#jI&YBdJ0<\.'k26UVl""uR2P,0,_`=e4:05f8t7=ffQ3sH0*o(Vg!ZRDjHqg=sPQ)T/OgX:*)
%p2p5AO-<B4XIuWDs-tgHFdMt%U9#'G+oJ?\QjDV*FnkcL?>^T'F2f;$SZTqJf]1o=Z._8%6PM)/FZr`W5FhfCE<P(Zbrf(^P`'"a
%H4<:?iA>pX0"a&$e!kVCCC7efmu"6$W:XIR^YGoA:qYqg(YWa%BpHTM!/AF9maqb'WD,+[Z_,Ho5?4a;e'2W50A^S4[V5BLD`:3+
%qV?]5I_'r0o9:5t?>JSo%6m$E*$6U5WpND`59WDfn`j#s''d%%qH.=<U+Zpd4oJR.p:%6*X)2,:"5>0P^SDQkK._DnKB7YXC:AV6
%Fn^[9J?*]SrI6R#@7)[49f"A]@<MAqgXISGIP6P5*5?NA?KC4KOnAOeq<fDc6*o"keX56L)KRj0X`*nka9sdZ$%H54@cI9e\gcdn
%2u=EGkUN+BYH1_jI(rgNoieI,-cOX4[$fr$F^MmDj(#L+Il0sd2rKtFZta(H(S>B5Dmjp<iiUZ7J3\F3M#$f56g!ISqQeD9R5:tg
%\oBj1ObMCnbj2,;P4mmAlHY<88<1:seMdWt`O#p'MgO-HAG^%Wl%8*a-EgIn>d8a(YH")<SCRP0>`L=e)A&6Ss/d=p2Pjt)+1SI%
%2*a4YXI#EaF.TSd75Ork,!+o+W\-6m*A;0@o<DERm!5?V&(2&i:#)O4g,*$ZO#keRja>SZ/b7FnDLbd1bC!n;jR58lml'K8dj:N<
%jtcBff=<Bi1pp5/Bb9b&[[=3tB3aS1?;:<%CqW_bf&aOoS9=B!qI,aA1d1'2V1Ul^k=a@YE,>'VP-f#D[QSO[RpoAS[tRc<(<mJP
%#5-VHXI7YaXI/[m_&7a&f<*)b/M:%?MK@np;H0jhb`[nP^2C)CgF&+J^^WQ6hCPcrr^hQG2#8CqmQ6TUn^JEG,Ido8!'7ZDlZ\$j
%[LJF82!>5I])7%A]N7fOgb0$//TL$5_H)`S#_??!s,G8JDh^!?R?onk$:f)P^`+`AN2DfdKkco?=3i",*WNsB]eDU,rA\g1:D0rY
%*0\8dGKpT>:PC9Od)$@Q>J62Rk^O:4L*j';fJ*RcAh+q6%s!UH+uFnej;BX]TiqkbKFeB2H\J[L:Vo*a^X3d/@W&NVj5;ooLU6oi
%ptXs%;@1G;._g[9oa4;?QKecie<LrHC,"JnG5tLD#eCYVe"9/1#@o?J9)~>
%AI9_PrivateDataEnd
