%!PS-Adobe-3.1 EPSF-3.0
%%Title: epsilon.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0
%AI9_PrintingDataBegin
%%For: David Malament
%%CreationDate: 1/1/05
%%BoundingBox: 0 0 61 121
%%HiResBoundingBox: 0 0 60.7452 120.0323
%%CropBox: 0 0 60.7452 120.0323
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: epsilon.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -120.033 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 120.033 li
60.7452 120.033 li
60.7452 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
gsave % PSGState
0 0 mo
61 0 li
61 120 li
0 120 li
0 0 li
clp
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
28.1358 0.112305 mo
0.487305 119.92 li
false sop
0 0 0 1 cmyk
s
1 ml
[2.8346 2.8346 ] 0 dsh
60.3916 48.4952 mo
25.0557 13.1592 li
0 0 0 1 cmyk
s
60.0074 48.4952 mo
3.94336 104.56 li
0 0 0 1 cmyk
s
0.5 lw
4 ml
[] 0 dsh
13.8624 59.3614 mo
59.9151 48.4864 li
0 0 0 1 cmyk
s
grestore % PSGState
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (David Malament) (Social Sciences, UC Irvine)
%%Title: (epsilon.eps)
%%CreationDate: 1/1/05 9:56 AM
%AI9_DataStream
%Gb"-6l`OL7EA%"hoa^jp%kQ%gaSSC[#2$OG[uZSa92Ji@gb94kp(f7SLh$mAe+#R!`"s"mY-k9e/bN[/o:oGdP80?5=(YuRADHdO
%Nul%1k5Fa5J,b:Z0E0QVmp8E[YJn,@_WdhVrnHVNH1TRk6$QO%chKTAPj_e#R;*gf1!Z+Ac7'8eIe!?\]/T2nrq2Ub4MU^WX7I-G
%^\IB#?f!rYrTs?@ViU9GU&OKEo=&Y0^A.9TB4'Q(QN=>g4)O]GY<Mj$RpY%:^CC)On"8KdoD:J]QA=AqrZC"=cX5Xdr]C)Qa)A]k
%>"0jP7sXY#T0E4orC[=ZT>132hn8d&k?iZ9j_%qMrl+d7q$Unart!B2q=0q=I:dH_boZ["q=3nCc$t-7c.fF=0R$_Oq<-AE\<A!5
%pUaf2$%T5OTlq75YM_&Bld^!rQfH,Jb]!%:GCud)Hroqt^]*mN?BM=#$[8GiYK<ELrVYP\Ld9n5]Qs7L\"A*I7TV6up9NQ:=n1D:
%hqh73`EG_.YE""^>I<:r21>)`kAU@tbI`9#m.p8I?[qUrIi8rLrV<cOmJWAYJ,K-B/Sj!J]'D-ioJb[?IIlQ=hgbX5i2Qc6mBM0;
%iqIBJrph\DB:n%0VQ77sRJteVr6&_[ro),R6BY]gr<AYhjkU4Adm&?Rme(5mp#\ml"h`bpIsU_c?bZ;'8,K$G]/5)H(h>pYP(,Aq
%Shf_+g(oTb_S^V_I<JbL?OO^KlH@NRnG2rg.Ya1Do'_&+fq7,Kq3s=h?iT\NJ-BG73Eb;5q`i2qm1K9q,#*J",lICDIfB5(JpY'J
%p)fjqbH^sEjSs(3Ju,ZcIe2Eog4/iMs7spOIt.LOkCUi'O/HtVjQ-n=o'[Ybqt`*OdFQb%Is^e%mN2AnCM]XdIr`PY>JksR`.-*G
%6?C0(3TJ_]nS?GDldHN=[\m:rX4HdB27.*-X]g't@\7_9c(&H'-hmfC7]SPs$NItmdHZ*KX7I3)T$R2nHq'U'-iEi5e/Fp-HG],H
%:\Ka,fZ%^eYrCC?G`oi)I/4-K74ZRgs$\H^M)2Qs0I-K3D(m44(\8t#lrhO=s2?q@#ld=hL*u:)1W"VrDu:%mk(Ips2XUHVKmDXl
%B_1j!(tT!;2]NbP%86K"4_Z^]dG*;jD"`%2S86%Yp'7]R5Pu<\fa?H7m5J6(r/FaE+'7+!@aAM4pb0?iG..DFYDjM5r"lIh5Q',6
%dAY"QC@B1^8HTeil%a%dj"md3Q/R^IZ'jA10le5"^"7SmH<CXT5o\%.P_n)PBq)O/MYZ5GBP$gqq&)ro=o9(Q0Y>e(UhoH>_jnEV
%W1,V;=s::^j@1Rf$euP';o?5,cEM3T28!AY>S59+`f=)I]Cg'fg[FjV7W(<:W7fbWE+;$nkoZ\XD7A7UViS>l\",rMD7"629tK6G
%%o7+#`1=WE19nKo"%G[Piopmk*%T(QpKG?*A;ihSi,@Y5dJp"Q^MJDST2P%Qp:'u\I8m75[_M3*n+M2,g]!.?hoFZeL]=p"[pQSY
%mE`\&IGb%45GsP`*t>OSD1>m*ZL?Q*p*Zq+`m:o5pogg#IHNQd>NV9p\^[Otq"XJ\;h'1@/EuCJFoL]@f\cW^FoJEgqq()-lZW#T
%s/LqC[XP\d8^?2[hj89;pZjsHJ$\d%p;2*Ir#JR\6[j_:n&Ok<a%uf#h]DQictqPG^#q@BB?tj0N]?7/nk7_,%[c3#=8j_?=!*-E
%KLbrT&=_57,PE(ol=9cC7eVs(^W3:Z`X(!Cm"Qb9A$[&M2+'XAO#=\No>A3EH8WV8!/UR$\:Oq451]X,+2p+T[,qJ5dBOEq?`%3B
%ml^i$[m%95Rat0mRV>[rdQT;7;FD^YLX0tb2QbZP2;?V@_`7&>#C:F'(oFs42;bq+Rs^34jDh:NHG:Qs2r;Pe$l_beg4&:I!dVY?
%q:[aIp(Q2RL!KC3[<]!jmJ6XQZo/>bEH(Y\2=[c_@n1fXj/\h7P[aamk^Ica>0aNG?J0S3raJ@sGW/h%^3SWuD.Gu@EPHjV&UR<l
%a@U^hN]I'E_p.42:\`PjDQJ)ld>e)OXgR%!fBOV#O3rigN74#Or/$e+5JG9KcdB,g-ek8-ENJrX7a?3;2V/;49Y;t"c\j:!L3)*,
%qq6$<3E=oh=BiJp'Bc@^\Y@Ql=L:4l08jIO7t^e_hA]2H?h3Yf(FOK1(ap>!:$4Ck]]T*9jP*.,MR/:0`Jpdm`K-drh_>&,PTQH[
%L<CGaSM/^@lO4&[$^Ne2K,IImOkCdS8poQanlgT`^W+Z%+8:4:FPWXK[[bnRq+r,Z)S\BXln!,tmb"t]@,JZ,lB(Tu.1/QjkLfU?
%41)1]T>/;1Cce`[U@Z%kPi=LOPPXbCh<-Oom+0;Vf:C)I^GgFGlhU)chD!,rI/8-l(tV9]hZ"WXY5R\a`B.0N^7t>ulS$"tqo'ZD
%\+O\<7J-"dra`USIfJ4gIj(pYIh-,goZr"Je[pV2]:]-&bKkY;\b,gC]>%3)f)Kaa5Q:9GYM]9;FSmVGHb+S!rTW37Is7(7]m>!P
%3^5bih*4UOF+7q#or1(8Vt:[qKS2c*H[Ksbp$h8GeU05\oiLN\I8sV8=6W_4-)CG58jp2\j29pUj*VgoiF)&X4r.;m,TK64q>&S:
%;.SI;oDNs+a17hs\Xpu)T@5flKt\X84Zkou77+Y:Qk/5N5I?4B:`f0pHAE*jFT6I_lMg>QI/b>+jV2Ufn(W9(0DG9+h8fCHTB<3M
%37%2)hM^#LAtNqk=_=7>`[R]J?B*!F*Y5PuF,\T3UQ%=Wa<Q[(KYI=6@D(e&d-pku6_rSiCG.jFe74h.d9a6$G&@iX^<JQ>(JUR2
%dW.u4[W&6Boi6FAkPA$Dl`?lTg-h_h2%+!6.\!3G.ZYd?5*Yq"b:('2;FMSO-'_S!I`ek"m&']Bn+4c`P^@;Yjs%B.at\\DP[:3,
%FA<A250Y@+Q^Z9+8QfU&QpQ1XYG*`:p^loSN$J&K@Z;\rQpaRQV]Z?bA1bYc&;14TF(diD(8UC!XlB@CKtECpp[G$+"KY``g^+[V
%O&$krD?kI^l4iX?qK74Qh]<hu)MO8EMmph"r1@>FnIC6:s+&)882:HJ$@8/8W%+8&:\IT4:\7GeO.bu6d:f.BrLEiXE"^AY.!G%o
%_tFuIl2#,nWW'03nP@S/oM7I.J<-eTPHKmn*rU02c\$`8rA4+&r6t>fr)6D5"9k9c^Q.$</29?)5-ii7H)7-'s.&cRi1Kn1:r9nD
%_c2Mt:\RZ6:\>6\Bs[E?\V;!g':qHV:J+-\Pa:ZWp<SA?mens?1\B/pe+?T;;bgRY6R?Bc(Fi;]bb'@H:X5U3m^,N6s*;9PS1d&:
%=.ahgNa$&kN2oahpp>s?Dktk9;;7['m]Gl?Y!/2%ADX4$[ZBmlrTD_MkOIPQ^AOLKUMc_$MpK'4N/LKhInjcdmm$L);_C90lGN"]
%:)A:c`t.NtO@$=L9$$.+l@O/PN=XG9%jh2'LM6_bPQ$$HIs3Y8Spr_8_Z@#0X;NXIC-t0$L!0-s/'8%X_AbKpR4KVpc-S[ELSR_o
%D*'18PL?uDChI_QfLFj9j4:OGl)3!6d!4!jnIL[=46W\oGRiH,a>;7>9V.k=:X:CO??t2onC=:Y&JXu-]o@O.9]l`.'>L/=!2);:
%n\Bg3#QL/:n`V(;)(Kb[\gB2]8S:PEKmudd;:.l/R1_j7Ks/)76PoG^fC>-/>L[f4l82e*WQ7:SZ@V#6(bLW]ISuC2;.mkkPN!bM
%]J80DPIoGg?j][jjJ4$=\@Re%P\on4gYl#<`R@DW0Zrrs)0_?odq/PQfgcRYT,qQN4UHO+=gfk;Wj;*)m(Y"Hn3P?o7lcd)KPmP9
%BU6!)b*gdUEd1;=`#dtnH^$nb8Otnb8nU0NWZ6>5$on@WjWlt3M>1gJ$)pFgJLm^1PuG$4krIi>I?;qM;,5Z>PO*iK`0'/kX`Ecc
%RO1Po]c>"(3Kdb*5KW&D68VijlRM(@Qh,RH3W:/aq4jJG:U4]/:fE\O^<4"D:Efd4&Hj.C+F"U:!6TR$1<Ujq<"U,Hit*[!?DNE6
%%+gP9ZHo8,?P\KnMWE/R!gt6h4GZDr.$D^$#oaG?.3aZm9Z.a8Q&%3dC(Y5L#pq*S`=Y"GYjm8h#LK$V2ZC/Hf4I87FujiXmr.+=
%gU>tIoX:1>7^an-9tY?#D;u\Hm'^&>S$"o#gmu/0:VJEi/ZDromDS#pgihRpfBI1Zc$!8PNOu:XB.-bUV/4L:W;EY1%N6-5a%$_Y
%(eREi6LlM[Y>m"n[,7/JYlglk!pg$UKX:(Nlj%p0FB8U3%$L%=D!K4NrO>e4lXmtVRCZt6Bca^H,#THY=TJG(!+#`2%e6X<I*eS@
%a/F@KVu,Yp$M7)A5#Hh/%dj)NL?a.ZERm9o]$Qqq6#Zb,b'Zijf#.N0;dZ[dPi_@3Q$8\6ksA=_^S)trAc05$Ih^c4cfmbY^SN"/
%;N<u?)P8XXjBHB(cjMkQ^X4)YdtL(W!"WGQRKF]Nd5ip*6AX]h3d6m\>JFK,=85Fup"\uebrShd`G!ELru*P?NW/7em*ScK(8`>S
%qcK;9o@`<qs8@j?s5LEb[Fq!tk,ppi=6H`+^T!l'rci_d.#spK]KCWWa%np+*^>PBV]RRQ+3!d!O-dnJiqVcYbMu*4r,bjY^SHOt
%k0Km;i]B?%n,,1os3KpVptEg[=+<u#YF!h0+7M92$l_G),@l87@<MF\T.<:[GCG"L7fRj@m(?n?&3lY(IQ$5f@j>l5&UrjX5BDar
%E#CV7HJEV1K9uN<Xr>[t2KfGT&a[)-8:>CFG0lkaIWK?W&l]>NrB8f?_$uV=JH:,%[Yu0h0XphpoXE_lJ,e362o!-)K7iTdW,ahI
%56nUo]^btc%Vkh3c.f^7r;#c1]DL-FT=t9BS%IS!0;#omErEcaRQe34?BthHP/L4`\<J=Xb7csoicIO$rG,u%Ro75i]<otT;T3")
%.o,!(O+*F#6##-R]K1E]GG"Kpo<A,Imllr-POaUuds%FmqpaH"XA@]$graoj^K/.q_0*L7o(M6dpGoG'"$\0p=T$D!BC%g1IG4DJ
%$a'H;BB\S4c5R0t_/9O[eM@#>S6<=Mr2r1-J:/!hM\k7_h5H0e(*SN._CsdkY49]]TDs^t7f?Oe[%??.173!'LM43pfDj:&s'>X"
%IgPVjGNJ7bmf)U'L:c=nr*Os6ds\-D9-:A!+5.J0(%`Tas*h0OrY>D?A)tg1rBGLUr16(ML]700b%:S/qtm_:g3?c;m+RXc`ij=B
%X'rWZQRU/O]7#%>I]hcYnoORf^MXKQHRWd:YlVUW%J"o"_C069YIb!1`[&='JUcJoUah"#;t+_[cZ.$nlC%dhmMZ@36X:`%lYZh\
%Upc90^@>j/9R,b%P7&`$8o[4rU1]KRgBI2WlrOcRbG"<T?*qS@j.W;:0%s`K1"8S6"hSHk3RmtI$I:iY93/<YP-3rTDbCr%?I!?D
%QE\Q@2N)uVK3YkF*;1rj]55YNa?)gH4O-T6CL5>&hfciKmH)"SD&;Q5Xj(>4dNKFo3/;q*"hSHk3M<9lZ!O+!Ht0k`D$a_,bB`L0
%&pDsZB!H8gONVg;_nIF*QYk=oK!"'A]aQKZe(Q`db@OC$B=2Zh<pSDfVm't#MfijE`kQ<!f':me[T]1a'Du_Q$EFd&<[@0_,D*?n
%63MSB\o1!`egU6Y;msZZ&OF%#m)ONEp<Ttib;"$kp>a.dbAN1WlFuY;?*r^LpMC`5U+HVaDnBDDrRqAah)`V]?I"LVC-ON&kgd92
%g(JS^G%#jOQE\Q@>_$*Y#I3CPBZ\s$UEuhJ*::K-R__EsidBX,&_KNVc=5[Sc1\GMqg.JW-TdA.R'Y^R[%A3oE\>s"gUAKqZ7T^o
%DbJ_o>L$^8QE[E=D>8m(%E+R!1[FSmFBN-K<g[%)6"%=%CT\IJ3JUnh2:[V^SAMGnRd"Ce2MHRW5#6+lp>Y`MRW[7/H2mU1b+rf`
%*1:Vk;qaEbnbtaLq?)Qmr9%@:fIM!/o[b&]h(-40IY\-@lg#S+>'D;T\!qo\^6dm39h:=hJ,&9?h^%r8OPGPB[C[cFSQU/!erkLF
%o$!HjDQJuaHeP/Z+"qd0fqdrW><b$o#A`(#<F08<e<b/F$=1s&],J/]g@fsHP<;s)5,aHOSp.#;NiCjr]"JOnAU3BW8A[U_eg@0P
%e;bcjjC6h%P'Oun(m7R!Sr@6u;VRes]hX:n[^kMeqs#RYQH#@t'+M?-P_#8LmWT).c.,l"'51LY34<EfQ=*1`DeRP^BYNh%"Fjh_
%4#sH:G>Uc7Qb?*'D'kC_?hQ=cZ,o0GPq0Oa3SW2tY2IJ@k+4l\aAQ@iP<iXZ1=*7qJ4S<M'Tb\\eldtro0#,aL*SP/bMI)D!Z3\I
%,(R*rZO3lIY50nDT4NM?A<u.HgE^hV/3qe0]c,1,pLI_'02(/..-(Y/,SZbB)m0'MN?\,iQXt'p:El?(Cp6<1/g1WpSt9/!64_G'
%A?a&KIt_&VRgGU%gKm$%RGtTYMj/cK=h*>>6rnNq"Dc?ENhUnn8%!8F&onZ"*0eD?D%57j\<jNC<MX6_DW="O;/$EAA3[Y&dm^;[
%0,(._QR1IPn^'hRW$b$hW,u!ZMUb8lcE<FSU>t*K<NOBX:">$Q4M7gH4gqr0WX=Oe'JuA@li7O/.8hcfe`2Z'mTLVYR';8Jj_UaM
%0,S%o(;"R\aAMBgQ],Lq25m<<^K;BTNk4[09qTUXkRgq#)gdP)]GIUWNjWk1!=0Fk@o&br3%l^(*JY,*2if?up:,#bF<Gq=DfgMY
%b7Ogcmk5X1$/^hAQ]$luEHMaPl$8QKYu08\nTX\Q!6UGjN/s;gEMC\4Z)`>@>6Yh^.iLq@)\#>&)dop!@%asq4AWCTLGm.I2]=)U
%#MA\`JJPu&kj-B2iJO4;1<$c:n*6u'MLi,J14XpT0*_tJWV_e[E0L>fngWHF$K'MX>Mg6f!11"^C[Iu.BcP`K/=F;?DHmJS&Pn_K
%XogHNOV\k^mmnbM*FQ?8,<;7f"I.-JTW1oU2K2g-15ZD]II(1'/-<HU=;op'(n$%Wm<H1gFYsP>oOG7'?fhGDPCA8OXeFHg,tDRi
%7ApeGo4fUJNK3ZLZ`tAX"e7`(pJq\Hl!>FsXejZ:VVV'7D35S=%CSh'Ll\gLP7&*7FE8"(F=$,$&Z!Km>]!uMq&hQ&bMCsb$#-FL
%p0^K_^*kLp<T,4/K\1C+l2b+gg)@qa/MIa'#/^IG`eua("_MW6_RaMo'X_G36;=mG%O>WfdDjgtZ_qp+7f?oQT/Lis*bU=^;O0pX
%a#j1$RgbJJ&Z%AP;**4"\OV#uI^lL)!^\O'n/s2;b]jHIfE=_?=\lJsYT>M3&FQ.38.S/.P-G=+F,Fq&7A*8.JW#=/]=PSP.OQp'
%\7.5E%LGl+'9],pQT=/cP7k&&FaGo+46&Gt>mYC9],jrIaDfm2\Oe`%RrY4VUg';4&Qe'tYA$LdV-GN%mAPo\)k';Xl59&[mCTSU
%lIU`shto!F?eQO^I;-,+pg$:S4t^Af;0V_#\r5I?Z<kW0dbde"GJRIO*@5K8[25r>BZ@j^;R=#V0/fki\n<$9"rq_M+g7ia]gV<e
%e8:K]B:!Nolj5ng.XV<'csoFso"hu$9#6tZINS_ijNtO(Id`6GkkDOC`7?7VS!73:^X`b_qTW[1^A7'^`SK!UDr9FMicGL2K"!]h
%6u*K2(BkpW5LLWf]r9K?U?;XF_`l3Cs.iZPrSrl4hL2Vl^\i,>6/p^q^1Lo")?8)"[%kjNW7`u:"\LW&>bIM(.JlQJp7u&:Oj3HR
%4d9]PZ8/,2L*tt]%pbF*S-91!P.I06!ScXNoU_.j,.(=%DY77\^D!W+E`A`\S*4Yu_14aH,L3?V1#S^hr>AEL<sDQfcq9L]#e?`+
%"/6@($I;)(D'6JJb_d3iedB.:'W6=IUl2ZO$b.![NY9i'V'D<57(a#`V<gLa$jc]GXL=inPsN"T3#`"]+IL/d.'5eKN?Qu*">mr2
%A-mj(EYToO`.HBBAh@ch(Y7L1JKcn3_2=>VMcX<dN#CMC$5o`B_K`lh;AXf?09MGDJM[!J$q5o9iHUXV[2$)0$R7.D3@iu3'IKnK
%\sZ8c'MGn^2-$3)FPh`naS/SJZq']1JCTI[1B=%T`#+C$Y6HjkI`E$I*)%3?cX3WI%s;7OdSraXJpTVCj:O[tm!7f=aCW)?\j"N.
%9ibO_h(k5EKY1]KaRZeK*N>G"$kE)>FSK6%)/J$5%M]BZ^VfO@eIt;oilYgh_"9SLl7o;?-5U_G+@f1&bYXhD#SThs=oFJf2%3JQ
%=r$dq3bF&l@Ij(]C:3$d1n]$RTU=>KnNGE5MoD@reTBkc@6nH^d-n2-(F2c3MR)sQ`Q8\LMDi9l'RlUNlnN1a;`7^/c_*f*mZU4%
%hlrfLXSl*U@,Nse`sTl$I%Nc4,MQVK)YmUu<5OqT_@eS=<[H\VZ(*:bld*JW4?,_E+U5FlM?K9^%[Kt"K3g7&1Dpo!1Ab4oDXdd)
%W0?QQ*'>t?lGnk.%i1tb#V$aQ/W`JC%32^;;^?H4ri19Y/_S]E?n'6Q9u4nH,8N[$Q6S2^iD)0;>==1pN7;CZ;1sT*&%OI-+HN6c
%QuUnAh;O<H1iQL+-cBGAW\"j]A&>GQ048W!"M#Th7(-Ns&R]mE@#HLH.rJ!%lJn'?gT!L_KEY)iJlQO9,u/ROCZ207Pf!S+_6Okb
%T2Sc8#W/9A2+C'/lm5?I*ZtnNBGK&u;40oU6`hpg[Ee.*V*ba?#Jf\(KejV%/fV&P[Bq=kSR"u.8Xi4P/;O+eAU!*O)<MK@$CuA9
%mSf/(T\tt:r"kJFdq7Y=$ef7Xls?*MYj#]YN3`'&&.s)'X%@'X!&]rqF99Q4<;-iV,eGscT*]lTSQ#`7SW-$Q0c#Y+N5*1CU+3_V
%Is5"Fp%:KX@2sTH$*6O+7=)W)D'0<ko73qj,?mYRFGr=u"$kPgn&;jK.`Y9Q"S<\&:SrJ;OUdkU^6GU6+DWIYXSVeHL95^m*=KhW
%\%%67r]3&IQ(cs=*I;kjcph\@LcO,WH\e\DlbYr^/7#_m_.fjo9]K1uU-l'!3?^-ZReDKB7[Q!W@bEmJg<uFMn2?De6dA<&\1e!,
%B<rgW:,4teE[63%kh``o^NO,9Qi)Sc8.I9U@Y/kTDfrb#_Aj&?)P@_d5_0IANikRN,<XPQ%dss;X2gA3A][8Wd+h+8qDOU6c6r?Y
%aAfqd_.XrNbDn:B&EJR\4#Yd^WK2kfUdBt^2/*HW+*sF[Zd#:t^^_5Tne8d,?j.kd)+fR:T5Y3*T.7bP[N(PE'X!M<K$"Fp%Dm>>
%8l1]YH:&OG>39jtY!C_+5c5PZOHC-t"Qj$t%q%[4%7;`1au'#.4Us4a=AW#+,U$mt4suj-dQP5TOBMJf=^uQF?*p`QK[MuAf8/_F
%^`W'3i,#efZ@Z`(R7&NQoE$\XE3YMK0<W(%(o,Db(JI!!F'!;)7+`Ql!,J[QAAGUHiXG!t!gB7`9o8/0.NKpi/'2T;5pS%00+^V!
%Y3o7F"Q^i^*?Lti;,eG()Z%6Uc7ZotCG=3l9NN$&JKnl&rEbWmeZ+#KNIlO9LbK'-`<dE^Spo$4ECN_a`Od/=i2?DW@1^qg%]pK4
%4e4UGE[igims.&/225TT7oHh`TX&Ki(J!sJRo)rli`T'$iD<HiK*<2+`i1,oNls#Lcnfd+J2X\._R2SX$E'W>lG=i6J#&p6)Y"Mj
%$G'-TT-/GgH/XBBj;3jTfgqTH$o>D9UYh5b1grr-9sR4[(djpPa")?)e-YiG#,,cUQu7SW<1I3=nXXA+1<%O^#id?`<X&6nmZJ*C
%5KV^RE"]2>q#-a4lDh5Uc4J]$_mD<6]YPCJZ,]ORM]TSFPm,'M#^Z`.\ti\eUg8`"VRXJA#J.s!JE@'tU^h`><OZMogRh@!%9`fC
%P3bMf]N(cnU&+ot.$,H>V\lW&S!pcO]Ydhs%.uS^0I^f<E7e#+eHMmjd$qg)];]aa#q`._W")mPN$/!H$RXW5Rtk]t#S&:NeOER!
%i(u(3dU7BkZtZ`_WtRaS=W)A6&ZR;cVCIg([7jR\E7$XFa&5p?5^JIU.o]MD85/+XIugUM+L>fDY,ZNm<B@(o:usr@9.1m^b#L!&
%<PO'aE^JSRV\;diK7ORRf[V`Wj^^ja#^/U\76k0UdSLueTc<*iql2+nS>M7J%Ukkr?o6O(3&dMQTaNP8?Vcqk@!u&2VqU#cl'd/.
%6BdUqfAL\)qE(ntAb7jZ'gX-\N3lA<#cb<[YL/IoWMq3Lc;IOto=Z8MH"&^T$0OJ,UX8@4P;*nJ$q5#dO;`,#6p50_Oi(D0$iW/R
%&1f',`Ak%NE]Ca3?]:l'ku.3IN%/jMcDJ8b>B!I$D/[^I=I:p]McWGs_T$-0Wu_M@EX$k@VT7qF(ES6(W#f$eIFMno.1=tRc>UjM
%TZ9?-aH`r+4UrMl-*(F2*)+h-^a2q?n9aa!#M[=3Nt)7HH>\^n%0]u'OrNeq\Jeo(F=W.D>*To4C%%fV/`3&=qUF\%@Hr#r7')*$
%#q%-%$jneLSJiX1*$/,n8.'Yq<E7ra=E'JkR4V`B:BUAg+>fQSQQaPf.h;-9=[`'S^6UdQ9LU?]%=#)$os6!6V"QeRX@ilIGR]74
%dV&u(MuBTY@B+m_ENjA77H%]3R%*3I/6)iW3Voak2d)o[4\Vq[QO"%O,#S9Fg-%\4AIgT*^uGm/7$&FDSuNH&Z3O>fj=[GZ3eR:@
%:g5`!O!>DaVCSK!l2I%Ukl;sJBdc%O-PaQtjW:`iqk&%b8pet"@8]b@[UdW*'&s*]j9[`Eo6r[)93m38<2M=t-=m)DR5j37TLDE[
%[3T2BPqNC_lq"+p2U\nfTT)\j,K<.e6+&C\N+#YB.aSjN'3qL=JR[JN.hT_]WPW+uGR"n@#5?#a2B%iA==><"VP5P6Jgpje!=/fX
%Nln<JZjt]XN6V6nWS`n4ECIX[[K-n3/5(-P\7Q.5oj1T29e]86%:gfaS^=@pq!=PT:]U0@OC1l'aKu?NhNI/@1@5E(l8`lm"c`e$
%U1THGND`raQ%Q"<,mtYEE\^QV*"<\-UiGmLG\EDG9K1(m60mgjA8k"0Ro8_o75&uSnBpH/G5G&1!g>'QD+oB^;^uP\3A@!sPn)Pq
%\B%(':?,qq?7ML8W5u^+lZ=mq&N:AG3eWW,#V<.-25SZ?d-2H:JsM]t-Tk//:7\OJ0A\4%d\a%Ci*'EI-5KF[lQA-Q"KC!qfYL4V
%?3bu01c8)%\mA&]f^!\.7[1-eoK)4\D-@tXO+N1?<ehHB)Cfk8@DpE/eEV@6"X+tp\dh#EVPVi9DPe+_FU1sB\WDD,g(`#X<3Lpu
%W:d"<iAIo?#IU_H^e_A@_o<PQ;X8j"+m">[-a5d4>'_3.[$3Us8Y%"HPe+#+*GK51*O_N1Q<&dnaQs#(<nFVFF'2\;OCZDfL",DG
%pk9]mfBV'Hae)aB!s<@NBm$5F]iG@SmEC8f*QYDE\?n;EQ\4RreHu'2&k4?n6L^hoaJdWH0KZ#Q[5u)g!3Xg/(u^JIX&@QB.&Tdb
%eq(Xm'fN1s6-8G(Bls]-R!am-FboP8q79TSh25<2[Or1,JTB-&i$GIo;MW`0f=7&+*1(dm9i^I^Ykbn+LQDrgaedI[a.2lR*MtcS
%hP&?u@3K8bkn%RU>W\cSLPUZcIc2b^"';YqmZJ*C5Q/!=c&]X=o(,)Zq<Acooe/<[+nH"QLWp\$KC0ZRG+q3"h1"8)X1@]j*PZs1
%l;'OTBEotJ^r:NhFBT/#fS0n"+!E2MC`8HgHN<Vg]hgVFI_h3iqi;"'=X-68!qqW3D@^1-$N^,oO>aN_qJH6gaRJ[C!qqW7jOs4"
%h[Y:0(OZk!DZmeg[EriI@?-6P'<lC#]]V7_!nc]=[.V*GH\_RjnDuT9r?qL<Rt#nYk<&]q1(W@3?N0u.Im/:%MKefE3ZZ<02UNtq
%^$$[)^4_OaC;@I[G@?c?nU5fCqrm`:n%ZW(!<a@WY>.V>O9UsZWkC[kXfrZ<53rstORR^!>X^ntS)j!+>t')[=AO1S>]p@)/4A>U
%VYM@]@5.4NL-87cg!9d2<BY#f%MNB.r#Y9LUS%B7D_Lj_qo.#6rs;38o-/,ZLW#R"<l!*\#IKSa%t2Q32=&E6iUuOKqCfPj@kIDM
%g4:/]Lg1`%/A(?H1`+gK]%C:kkX)q6UJ#G3eR0j<mHNPbXaYj#^?.NBRdUgXV-,;\2Itfo\iEM%j+A,L07s+2P6UH,NY7YLQFIWa
%VOoib8+5:IP*b4u\n0>qKP!s/^#ARnDMel4K7l-_MjD]I7ahM]`S?li9d3R7@5uX30gf!IDLj@kg2-s:r_;]D293%`<n^%!';H]c
%+SirJ1SD37*6\TCg=C\e"49i83,1hFCl9o^'e[M!D%Z=$@$-\;9d4KhhOu+]O]+k#c5jKa(mVH8JiN6X;&\EN;!^pY0<ojfrPo3L
%(D;OuYcoN,9]Q16ZZ`rkOeM4V)(0W"LE/&N#&35@;Uuobpo!4M+90h1lJiu*Tg&IT3Rl)6/VcApIrQmWI`i,r+IJju@:#ORB=Dm\
%'<o*0Iq!Tqn`dN\M0n%Xomb&toO&J,i,Gdt<Mt7)*;A@NU`[$2r0Yeac:!;t5!n1pm?NX3gk=liG23,_KXf(dZ#.4,62*<3bqNtf
%=pteBJ`4]j%F2[r[LjWe1r:t3FX$3/)RSYbZ3QPNVXbr;r(T"4gIXODIp7QU<Z)O'jBd7eL!Xq,WS!t8P8je$)18_<3]UQm=ZA6g
%_-HIKd.esi9L:XVlG<j6q^*.3Nucja!D]M1CG64_gu-s9G.8"W="8DQEV?C$^Mcl`99CZ4U#X%b[OhbD@#POSKKCqa*I^`F+VS5r
%mC>8]?ks$u_4hJ+3:Y-nUNI-GNTg4Mi5e/W7Gs)J$qonJLCV6'fHB*b0MYe_L>I\.a=r-]%"2I:U'B);FTB%,%BS`7GO&6G_R>G#
%<2W$aOn6e2:H^Qb%mYDW=ou\j1P9-=W[0t:m+>9iXgCfgp%t_\VQhU3!H-[7(j'ZH_gn!TYV*,>r\fbsqnu8Td8Q<=FgD)en`CC<
%n\ftqB;7W2,0J\o\"N5Se".ZF"HrJ5EBTB;GjPo=9op=HO82HZ/E^bfg1uKZ8]F@M_P(o-b\5=%M3fXZJ<4If>5$5`rDY\dr'qhp
%91g\ARh<i*T)Ad=e6oO2rFpG<M'"fe2&Y]TF90*;o]LCtj/X26O2@'Xb\Z/Pk++69rc[2nYMI"++`8=g-?D'5kL71-6F(S5CiL`$
%'-Ue;[KG9E$ol`NLh^fD5hO,?O)0Hcne^KFZ.!HjU>l4n8@61\EbsIrKK=:f!Vc'?TY$o#5'M(ZRQhCJeVgD9"sft_^ljV?%^mr.
%;P")Oagp+,MA.6"OaUUVGaQ\=ctdiDa*n#A&MIm43]:h=Z$i5PG'H0DqiS$6pN*p9^7tjor%Smq3U4TGM)e9!+kV=Eok5_lM"MB/
%V[MLjT21g3:hRC%oST^c";VtH5iAuT;cri*:%<t<<3Y]\!8Id_")iftSaL-5K`RnP!=-&B,/ItKREo:Y1X5%qYWcNag,,eteHK/?
%X]81KET+mu;jdQ(g)c:4#+oYR%Lbp9%l%N)Y=SDe#1W-D'0T&%KkR+G@72-tC]d:c($F&PLLc%@/sIRYb@Cc%QUS(,EULWa2h#N:
%"CQ_^dmYfIH(#?d_'[u;gDiPX2-e"ufs./F7rU2,_6Hr60jD7O%`!YHJOVq11lVcNaVULc^r$.1n2AkJkAF$ro655+aZ*<;Y#K\C
%b#G8GPQ[It+\X@'0SFHQKU\_2J[,A&:;te#f.3SrB"pEf^k'F_H:X*6iRh#DCZ"F^4H*YMmmaq^\sq:d%Q<B]E00W4%E>+*Q=mB_
%Y_bHd%UT6O"Mb&j&Hp>FZi_Na5.A-kY=S<.,MsM25i<iUR4k!u$U?[p\cE<D=Q'-cg$*rd<u<&pT[p0<=BAK>!tQ,]$%8LjU_8kI
%i&8V%0He>u'3el>ee&(pmh?ojn@ot":S9l./W05R[NW`YZI8t>%U]D-#.o3;:[8>i7*VMSL&<k4P7][#NbmY9_E^IXclD+k@lS?_
%"OpRaT*mS14TS3@Ae>_92:?'6,/H<c6(5RhSn[e9g7O[D@_`S]^J!*O"/ae";un:rX94H$0/eH7^`aYJYbYel2uAGSN<8$MYKq,:
%M-@[g8t2>C=cY&.ak#`)fER(VM::PQl,f;SZK\8ZFP4(ZGAc.@6`!")@$pReTO:H/WY*[Oo%["NKd1LVGtLY!S&s,`np.?bi7>\=
%]Eg4:P.+2aXt@J5jpkCS!K./__>LqQ<#tSs6<^bh7^d:U<)[!pg1`5ue\oM"<,t>Y<L`?jZNC?cep9XP6Au9R!e_[(`E/I:-.!`h
%mPEPE[8$^e>VoC:%F%H!<&4V3ipcQmL&)Vj_(\ZP6ml0&G*'t:r2IlM-0V%fo;6+E&B<9YD'Ir(SpmR);kga<V6be2MsJ8$JMEen
%^spuIJPH+XECAP*[]4;TAN!&0"W\P(`lY*sQje(2("*Yt*R3)3@BWLQKKu,&U!7RnX"7D1!1e9h!B-;LU8(qFo?PXqKs7SbD.\7D
%Gd$7SJS3Z]gBP5nYd9th,,Vp4TV:#SM]7ra)LBnYD]MMMIrU>VTBS*n5\m`]fk^ZO-"#>7_:7(]:q;Qiab>ImJ<BP6i*k[V@-cZM
%dteuW)B9'Io-.a26s=8lC0<g#C@$U"gTO-bDLkol(-\g(/,/1r?Y!s0K:4B$5aV>/LKKoC5m'(TLj`&_R)gn[H!<>XM*fns[0,pp
%DVI<YG`?iRVH:\^f<H;O)A&b*f0J!+j5=@-5L$Qu9iG,4#kXe>&.PG0UpWTaJ?_S+nZ0d+]o`\7cTAdQ>CqQ<g8gADGC9B'T9^On
%gUQSqEK4<e;YUni?tM)e96bY8*:D1-'W"'8)3j1n#jj)i@Q0g@\l%H#?Wm(1K6X*gX>F/#AdL^t6[EW9\`o)agbBu>(>?Hm,X#7k
%U&m29a(D".0XVCe'$`Zq2]-;^ZgAX#XYj#O#EUI5q7.jOVn/C)5plkP9CQH&C)EDTL8Bcuh2n,(q\P-j"N\kI$XL)(\PHn/2i/2Q
%)4D[uLiG;k&nEu]C0O@:6Nm'9ZNX79bt872)7eatk8m%\8:OHoeoJVS9q$]u@5J(aBL9Gk"_h;sWN*a%M_e)GS\!V[E_&*N85;O%
%<CXnM2Bi355\4SX<>jMmK"Kd2[9/u&KAp@P!1LQuoJ"n0r&e"A[.uKLH./H!K9k6F+AK!1#f-R'%9kQ0=19P.^=IC0KW`HiF;f=i
%J'C62UQ;H0:s_Hd'.i`!&#&B0M(GO0>"*d`=usqoI+e"u!)n:>m!=b,XIZnZ3`_&Hn"VQ9JC:cUBb<ae5/erdZM1k0eVq.E]YP'e
%E/\V=,8/tP`cU!GMV(Os0K?=-,G5,(HX>OJ3.+^_43@;&+7:g__.L*Wd8`52*0_7/(MbgN<j_K+T3!;K+P86W5qe^Q!]tjS\%-#p
%*dm7CBK#NZ+9ED>Vk#Os\XOq#81V)N6/^G<`VD]nJSo:3B+4t#n*]&"mX)^7N(k9pSo7"5:HN(fbgd0tH:fi/N2[R06]*]s\`"'%
%2.bHBgs-E$;f43%_Wt_F8b(S+lX6O-+/@NM+af"%]kVd9L!nNlg+XIuWG\_$c-:X0iid=9D@CtpT$lnbNs;FS\.cZ?e_2J&=0HLl
%'6O`4R#iR-<%EJ!NEo)cSu:IJ_JWNM$=oJgV7*hS+pJcUq$j1J9S,b)n'._/b-1K':X)h&]*/ibLT&>>]f;lVVqs:)?<'Q]qhEZY
%>eVmpd"^s42sMQO8#[*G%@lF"XE=p)5TM7_;J<(NTLKYIr@%M6,>:uKN,09Kc$uZ80KJ1!/1^d&GIj#U:W!F&kk<SHB]\Ise821_
%6)A1n6Jg;HPrq4?oVeG3%^U<N2ji=7M7HUp;RIrf8>@*ZNtp27ZtW![^A/B,3\HQ#jDM!1dh:'ZKLtj<,X[49*O4Y)[tV%A],rOT
%]"q>Z-N1a2ONpXMB!ljO+\lC"ibO/dLgZAW"<AF2pg54S)I.m=7Rbk,BMsVlMR52^8305##U\np45ISgfZ1sSmt\?$BAa/f?u^=^
%U9ueMV%b;P:\6]i=&EtT"I\Dg`.ub6@d]:Q>c2WLCI%!#pIej*"V1H`f"T_@JMgWn[7btrj:6d$jdW:$U%C`#R_E$u3f$7(at26u
%J37m:E+DAtC^o]s;C9\'`@Z\Y9Ao\Q84;rmQtbe<<o9`+Ve-qJob5q=h)gR'$D^PIQ0q.(_+#q\cQicE@-NU!ZtP)`pYCKNYbN2n
%Y,!N*^>5;>'_CX3([AhHa"8;4O<&RPbIX"YMF*9I$)j#>+]^CD#m$`M(^Ge2Sm2QdVYmF9Q(41T@_mp,a=9knrVX%E>.'<:%h?fZ
%a\cRAI^L^;J8GH;!?[HY]/&4P*46VBg7g\PbWl_L>N$;Lp(<G=m/,7aqu%n!B1Y<Z3(ocFQZ.jp=b%2<hg?6aEWnH-ZWPj0*)b7[
%<Jom#0p"YYAR'<Zh'1N$m&`k%1T1B]k=%'F<20eX.tC4rLOKQbr+AV@qmM(LrEZVYj(5_iZj0=JS)#<WL,3.1L3W(pS[ZC^L=.=M
%-`$Ygl`RBAU2oUnUSlFc"Uh8J6/+N<W2Gj1o4EeUqcBIek[L>O"Ybht@6[rVj.0uFdEMlo2cLd[8G%h`BA'g.W7n.3*Q$@&3Qi^K
%0^S5.F87GK!MYI/%,%EmP!eW:n<*4E%UJI&D-`dmCM'k5E]CKMNG19d!,"D,K#?gJ:\E?mC!*%A="'daa67"L`o@[pQ4U;ta%`<d
%4EL'",]tu5_Z6M^Y+Srnlnpk"4I.j!Q]e*ogo8PEK^D?@&$79Z?lMini.gRfM[>KT_kPgm1AaNZ.c>lK_$fnhl%n>!Z:!QX.hMmF
%p/JQdfj_EiJN%R&W%HrigPFe+',39YA0)D+PK3!^mc/U6KU/K)=HF@.A$91LO%)+%`aVHM(>^nQJlHjHB\.1_0UehtRJ)KAaDDdI
%OJ0:H.lpo-am><X>Pc"X3tB<G-UK8:BZn#:gP-.J8CI(oRJr,_L^6;VQCi0..dlbBBi@1=N)M=1OMi?+RX9u\E`>F@&Kh8M/(fF(
%3k:>!Lm%`aaZ'+]YJt7RoLp3JnZ6^hKQSA`%E4%Ak])"7V;#7kE#;q[4?LoU0eJM7`^qbe1CTAJ4c&QdD\n'QSdmRN(#%UF'GQMK
%.un+B(U^'cMW4u]/WhK9NVuNUC;/fk6);<8JD.(@D)'^id:p&[AsWTJRSmp2p%[d_I-R)!AUmKlb3FM-8Hb\?GubAF/Y7Oe!tgJs
%9kV72$Z<@(>$c/n-p4(C[XklW&SAbU?:U%=&j<#"+EX/_(3cT2VU=71(r:@\]RX:XJ/_Uc^AUbA0*s+PN7cr94G%5&4TC&-B7Vc=
%RR=#XCcO'Kq7.lC55WI"V$i9F\W2=O9/Xbt\4-V1Q`3.+N\LF6:cd'qR`=C@as2%-+`>g7&r\3;j+dPKbrRG*m"o7V.0.o`8)-@`
%W696XJP,tmnZjatfKipsnY[hlj8Ec_#TpMH)+/6V"Uq_<CYi];Prl17lJ,'9$"J)p.24@+d^O;j#l7L9,J.?0cPOIh%i1<!O%SnF
%+m^htY'bc71;U$[^I(Q+:@Wpb(`<8rLL"/'EYF/XgiX8\"8@MbMd*k$o%gmkUZc*`]fid^#C6]ZG;c-bZ]%\BZb+E)#iV8E/MOf)
%W(*QpVB&PnRd5N7Mt8;/</)Guk(n>m/O@DD\msE#!JGotmiP)OV+0?*<-5(ja4#^KDVto1TPKNJ!MXOI.Vf*C)?In?$A.H`<8A.f
%K'Q.L5CZbcbTX`S,-8FElVAtD&oMKiOUV]t7Tj?WS$2=0OeBR%%/0#,7_Ru^Z!Zf_Vpjeq8MKu"$9ctFhbIhJEHXGWV1TB($+h;2
%Ht`cRCp[9ejpD]]A)p:.-j8`V1Q_d0CYu8VG-q+4LO6`*(Go#R5YpbBs"F98@_Kh1-%F9Zq/3kDQsIM!Y9raV@hA<[E/9R)C9'iW
%5MYU6o`R/(/Z_cW<&1Ic969Ug,8c^!m!d)E-Q`>,SWMkVb=>N(^VUhMZM7)Do.hCqj#ZH7rj-BB%$XHJVKq?43ZHn(nj:7f7T\O;
%RYK^k$sY>0FBK8)NJl]B:1:ThO\@`TBeUK18<u"&XiiOWWnCH2`PA]"L3P%$7!s?.lu,%Qr<&8;j=TL6"VZ\h7KO_Lhtir<\Mk8V
%\IHY:&M1o[_OltSe?,ke,6ZmM*`VTm%_d(oli!hrIIjB].LR<^DgfqLp>@A1L9'_'=qsSQJA&ToUX2>2OYOD257oh$P52R>VL)@=
%HI_$kR7NstL4F-3+lfsq5G9;T\XpTch:mO'rj(TbpU+bPju%mt^gl\SBmO?O=:"`R0/O5Y$Y@1K\o=2d,$(OB]j)j=b0:5jX0o07
%<Td4AU&[qL#Njk.iRb'I3)PUT-prOmcgh9WX2UR+X0jsU<u0QFf\p8\[-[O/WLKS$AM()XaD4tI_-`!-_KatL\nkt47!/pibM>7h
%_fb.I!E%W>]<CtJ\)4l-MUUSA`4;?![\ncB\p7JdI>_PuG%6U%&)r>CjUP=J5;:I@LCh^uJ),nK*X5=8Q:?D"LYpm[nrHR*fBAd/
%-^T,5Jf@)<T)Po<mt4f"l:!AUqsQWUhE1'1mf2Pq-r)tX%"P=ZA9Z=LQpT_?:^\e,iWJ5h37+'/X1KL9TDm>V5PWaP<ZoXCmjUOG
%??$L']a*\/`m*,U%R'mL]%F;t&b^n5=H.-.L*?tGXah\1VLTNkC4`m:F(_T*lA6RU_8o:q&pEFK)Bd+7C.;Rp2-c)4\&9PjkKJhp
%>/Ait^E,mI>6phH;*na@Bl]a[Z`E]uqX`6h!?$h:_Jj:"muam)Sgt27dnS=[n<tZB+FCE%bt-iN=j`+Rg%P%3lReKd7W-mXbuiGJ
%9"uY[P%/J3b)G#^GcE@$kUbL%N_c$-R7$,)6IEs))be`W/96/>B$7be/6G&^)CdiZ=Y#H5*&`ORGnG"BIiGaOoW_*fg%/Poa=rOt
%P+_L-9oI\%'=P0*U$Jr,@notICAjRe'.<bE_ZR0HWUJO2N0.fWC./C2@Lq0^YSb\/_81Z/EfJ;f$A;<%CF]N@>'9F@"DdGaS$[Tb
%(Yfk6NN3qp6=b6k.r/ZH3bGS3[8(,Z0!TA(A^V$bou-&CZ@JO8mHsu?^ced'*YZ:iGZ!QAL-NZ8S^r3qM9/h;H[!%Y1l`a'k0]#h
%Dr-k#/'6g$PR2i,*h`;T;3=nbX2W:bM*`O<C:,\c!JJU_VFhYn?8@d)pPIJ%e5>n'H":cmcs>M=T'S1O>Nm`?!`>HLDf<SsVUp,Z
%aN<G%89F*T>?8&?\H&7n5."G$<qY#l9i*=E0UT>Up]/0'bis_+DH86`Mno\(p)q5Q))tdS3Xi1Kp$TF_ZYLR<[j.e>!0`O&Zo2&1
%94,KFD"(G_;B'R3V?mCcOBU;Po.T$0koR.+OTR,bV$'Qo;/[qTJ=<]V3?U?0$0^B1H:/)\4#7PKdHC.^pb@?=?(k4H#7kU>/5pVD
%XW(dcD>P((IrX4nfn2jq&CS]*'EP4&$R+l)_.Zu"#8Xd3bef@>r9gZmXJ#;SK.iD"G+ursZ7M:GZ'd]1UMj81?hK69\LQ4kqCX[(
%eo25,JYf2]c&3t9V3?KVO5`K!p@Ar;NlJQUQ7ISmXPghb*nlo-X(;Pg?__e!D0]4h3q,`PfAenReP@LgLhgX&4T>d&\_6f'@GDnZ
%:1qR0l89OcF2inq%G^b\_t(nqMec]cW*ZW7@K0oXn<Les='+-(SAXhI,;"uRqY&->$S),kQMX0[U];-,`+DE$VnYWkS[#7E3:<c.
%H?5B6WM0b)\dL=;TJ1U3s6c#$qhjW'?foV^KTs<)+#e`e*DkJ[:c>-!`'VK,H-J#]]<l`1/2?A]`sYOk<JU2^#EtK:i<A2[_b\PG
%GJr$3'#_t>40WCL*u.?<phO%!fN;ro/@P"LCaP(r'kl6@hDT;Vj.!j!^n^MD!)WOtUH8B]@U=Q]gJ]e0:WC<W\6'&!2Km3GhL0)#
%fUTV@"KL>!\A\hk=;&&51;bpA]EMsk3G5m@EJI]DW(62g:W3Cen8q,;HEkQYCP83R2gPF=#CH(c7cSB7T\;`go3c6rhH47,JSm(Q
%)qX#.bFWnI6B+='CT:I5q/L_;065ZPp]WIq#f[uG\XLRNdg,&`'0@;Oj=RIj>b>4*_M;:V'n9eV[E%4p1-n9]HTgk):SIZIAFT[L
%jJKS1Z#@qFF5L40,"6A1=lnB`U8P3=#:pHXJ^i`\eCoW5o\+-cSo^P/=!J:OV_-[>5\L+6\Xro(.gC20Sm(k8e!tGh'b_$3H!q2i
%e3#_DmlIi7$B&P2//KH\BG/4l^k:r5)0tN0`t9]cA3^*!/uK5D]qr^Y^UV4$U6,S)a97VN>e]+2H.@^Q_*P;4@Jeisl1t#SCmLS+
%N9iZ&J`a:RGIIcpU)IV\S'TW_H%jOD5OJmO2](^G$_$>A^j/K*,9ftNj@j_i`i!]PC:(^:cF_u>WP1,gqmj-.5C&o?mQ]?KQRlL`
%C9(o,#^LL@#(Ct'irV&*Xh?oAncA72aVG3,2#a8*/!s6CRDG2P`#^q?AuWg"^@]KIQkTdpVNG"P1Cl?r-,$"j72r$qO60h@9Q(s:
%8]D)Hlp8$%"*Q2jM%j^J[fgZq[(>qcmGruWhXUrX1_e`4k_7DVUA5ts7ISba1@91P-#lqjYrZGVRdB^A>9t67V]H7p+5EKuPbp>T
%,>k_dnqk1[h+obB".NQQ'4]j7j5D9.@4q5K=@j4?H&T:4-3G`rDZN)Z/?[\t3;0Ye9[VZ;S[$j]R`;A4cj:-:>V?)G]Ua9;TB>QR
%4/\:K0uWljS0X111\IT-ZWGb:\7(I(Q>8PNE3N[1Ykmn$7ak<3ZN`]F8L5;^QT:Q3U,R'Ik#?*rkRIh7"sr[P(I.sQM^YkM*W`+M
%Q0I!qdEZe<VW7mDpIeh1!=&8_V/@?:YIP5Lo+5d>JWFG]@E[p<fEH-mj7'L'c0XP(:TL&q^iaK&O&j3B9S`d)%$'U^'0kC2gM^/i
%Y*<&>5Y^7F:H;Y0)j=;n^.6gb:\M;-f8@K:i4:/j\6ADsf6(GfL"+BO>R&\6P=`0.WbsIiNL11q>sccY%!M^JP2Z6!'H5P[_+@q7
%,%EAl_':@LXIWeIfiB)%@q;\C/bdR#auDKDGFI@k@*S>q74YEqbJSY]3q*jdQmn6JDN(jV3'HnQg0nU/g0@I*<+LQTR+UnY9\A^C
%Q[q\$G4H7M-im1YN#q,'coi;&R16OcP6RT;DJn?Uc*-nBTEl8`FOjTK<%jr&N.pp[NnM*\7MR!>8P_!BTiW0uE7SQ>'b:O<dgbG#
%LYj.r-798MCIfk/FJ)cq_(?M]HptlQbr7c*>;_d/Q[q2cC]K`o`Oq9D)<C,/BW]j(Z-T#,CM*EXf>/q=`-GD:o(48'baY]ei?^mM
%?[p3.1qVDWHs:6+.?D1!"ie$oWZC:'Ud7M%*D#GsDlc%$WJMt<42(]")'t^[]"BO`n6:L8&=_MOB#'Y3*t+3sqgidDfmtSh6-X_l
%P(@>J)O<j/^tEEt5;(4PblqTb8n-#G?9HhB-8rWGd[uos=O&`6m"YX!11PT.MmQlqYXGUO)8)Vt-N)R74QF-i;s4YK*qbEu\9UM?
%-gpN1:A^oTa"cnr"Gl2!pF/c>*%n"dc3e.jNSXb<=nQ7I7&h$GV$Wl-_fs4og65HA<RN,PdV3[k&gu)p[U^Me-H!@5(E*8@0uJn4
%_Xt"F2N1Nt46R_q&Bo-45RUTBR_YL0J$jUK[hj0kD3'(!&feqAWEG+HE0:Cf),Muc;;`:Tj5m:OM^"r;eX\3EpNT-r)G)PV9_SB6
%c_o@uXaG[%oW:Keku.jQkD>;!j^[n,345%YTEe+cqrOV2;+MKZe&LTO,W&7EdH9a@TF`8R(f.;NQGGF"O'Yp2!n<ApQe&](C^?-T
%3A%_*BJO3C"q"juG'0qRjJBV+;3BrdWF_eWMOQG9N4`PR7=Dn\e0G(0g/?=uj_%VV9_T`2]412^BC2dpa-D)gP?Nk\^-'QDKYDT-
%kD-r)mqedV9$!I#ZI4B,Je_DcA4E=0-CEYSR4On_^%U\FaN@t+LYXsNBTT1)<2@X""*l4V1$6Xgr!6XIXSR)LId:CF,#oef<)TD;
%W-,_3o#9HZ%an*\o/h1#IEcY5j_@q$\_FMr2co>@p*0@uK"Lp@r8MmG#.bboW[[m"e9I?38dmacRl&*liJ!A&c$:g)O;t9e9,UD*
%"Upb3e"Jpe>]7$P>60@:BJsD`4OROKK:pY5%F%Y@-:+ft.r2f.d6ig9'K>flg`b<JWG])m'rUSd>7j_9(,DR-NEQ.:76;BaEljp1
%Vs1R$8"aW8.XagQ9%_97B$ZE%nlK^8S#LP5=BY=P@&RV5,DnN.:MPd2BL<Z!_)1#1j!o2ETf1Jf\TWH%UrUAaeu&-4)@0T9mK,!>
%_>(t^?!V;:^NQJOhin^h$!=0m[0X$Z583p[XBF>q3mGoZPi\KrAB"T",",5Wld!(-R)*$.'-Uu;@7+GJ&(O'%B#5B+Zl,H<5h*Bp
%Md7'rl!I[]G@`\I\W<qdrk*T4nqpjE!JO\IH@@B"blmjJU+E>#P'V0WZ9%M2ej.3Bb^E:g8UH2T[\YiNbAb=Xi5T/T^S,rIHJe&@
%d-;nc"<9e&F2MjM\8laLU8te,b:c@r#Atb]D+,8XP&EpBWP,B;)3O2,/XQ;"mMWar>`INnC64+l]We&fo?qI!r:tFBqUV?H<(BqV
%PDkE4aI'NXXfRU0]u4*`Or3Q:1W6T>S/AKMjph\Y/[&7;q=\9[_[b]WC-U6+@\&r>?8Zs23A%/hB%c,1f\rg+$reEn]57u8RsjZJ
%%sl[p:2@W?9adUh`05.]].Kt,R]i9(\u!(QBj_A^cacIBglto]\/8H!A-j%KLTrkBHZ:s=!/m+4>9s[BlQ40"j9X@%O\92o)I]2O
%\:ngcYUGFINk"Z7+a2OF6Mc^FW4GW&00K-Kd3<qGY"U<H<U2KNgC&3h_"(Q.4<hs%(-DG-d3obO/)]V-6hO!N)[mop9b_oR1=KJ:
%gg%P9/)$jj9(;nek%pihU@g0B5,C(.:i3:G&lD&/5I;jNTF.-#U*dJ`jOl[/>+!TG?+6fK?>\/+fd",YGN.^Zo\/D>2f)PG4/XrS
%N=V%CDgL:NI5h;P6U$SAR@#:"8X6_7m;>ua\$%h(c*EkiEtC9i407b$daIr:?a7=M%7;e[7I*IA*8TJ9&sN,/[1Jku^M*jED!IUM
%"o`02-YsE]P4)d'8@[$Z/C2<d\P[;5rNe54^2/V0fE;DWoV=s%-,CLc:!$0n]c3c1<'2T:<J4bLH$6K6@fk/Gg:%]`0%6[tL=cj9
%Bo*/]+'Lq?H-7pDal3c.R8rr%eT%^DPsl3e%DuPVf<nreR7N>.b"L)f7$3lkJaf(n<eWl@"1Ocu(%ta()K[&aCgD2?<J.qa(8GhE
%!ZY=6HBPBILNBlC9R[Gu+L>R?8JYWKWt5hmDEl[9jif5Z<\7uU+=e"eY%B8\&R?0.0$1mF3I9AdjSNMV]\ac2_-0kCY?MUhip*BG
%MpTQ,c61(![8k/2pHS"VFbRWoQ!WE\eR1=i!M;qaSiif;aX[$/PAfU_EXV$/4-6=62khAJk/\6Mg:eK.fQNq1Y^G<N_iZMf;#OeQ
%QM-.m"3ka;Rr-]n^i<@l>9Tk];aVBMM]NC0Z=U5_:hFN>,H4c;([k`B6k!JnWbcuqnagVIh?<hEF,mWmfQ\e4\FWf!Q,O><i59V?
%%$oV[6mEoJHhP;rlN2Y%hC]7l2QB(%oAmI\R``a3mkR5a/DPYR&nu?2.!hVc&AcJeR/60U@Y4KaH[$"`LErb^1?nK0\b@'APt3BW
%'Z0b@gihNM'%o5,#LW`GqZpXpFE"L1Rbq7dgIr*i[VKY1P:&G9.g>m!A4e8f>Oji0r//4nS4L-nb,%-0(Oc!+R.Gmb)N<+j!I00I
%D>3lZK7qh=Q6OHBXVobLRep_PS1Pl.$T94EWN:?c_N:D@f9*6s'WZkgP'T]s3Am!+X94^GiFQ&K);=cKD67AU8`SPG"uu>^n\@K8
%FXnLX)#(TKf/S"]43D8EbN:SE'q$*i+%"!3WrT.AAm2UD+*J>>?]8i='R"5qYU[f_J?"EDa\@0>4ii'%_#UR^,A<YCh.o3WPLt%B
%,l+gt$FXVoq!PdMjn7u4Q\aZ#]u,:s(LJDH]&nR,F-FQ+BjiE[m:8:bVGOhPMd*m]2@&"#Q$746Pg>JKf5@nR,#WIRjEA4I/?LK'
%`!]OjDsSU6q#Lu!]Lu(6ctQ^hp=f_?]F=m^*fSpE.&FH;763K&(3Jp.e27F`06[-,nLc-e,aIc`W^4r=_3`"?:2"hGZIQ5Wjsku%
%V$RE:Ek\5P-\F#jD7@B\;29RR,cRWNbc6-6(Z"NQ^u5W&SrBF08U&^6!+pZI?qPI-*[Tc!h*cM$]#`JMKJZcm>R!hal;ST.>CdLh
%Xl=@,`j<rQ(<rm%!f\+Kfhr&>1^W77MFtUt7Q#IGAD-E0-a+:%Z6b/B:>>pbne-bpc]\\E+e.n;QnB`FKt%7$od4G]9(4l(lf]df
%<EO:6>ojEM[)>-KV:.?iR89k@+(4A%BW=O0@%'M.Y?1bWWcb"3KO"lq:dlgs[l/PG@q@>QA-f4n*5-N\ATA<n3^gbp'sPWI/r$KQ
%Oim+S[=EpBEboE:J.6(Yhbqk-@53HBm+t@=L2IXA\)`-A*%TN=U'IdEU.#+h\9euKl:75d(LT0E>Tr$00DPhfa&(-a7/K'XZl1fk
%XdA61a>10Uk7NgnRsEtdqa)N$JUO[_47!G"5f[9&\JM$[o3b%[\d1!k!e*C<=Cc6C*'K<Peq-qRch>5_i(P@.J;kQI(=(O7Z.NWf
%&c-3Ma?q^m6A.Cklah%#m:D03bU^>p-cs;=VINrpi.]$Whe7Mf0cuMt^"rSDf=<ZX`cdatU8DUiFH3#:[4!<8bia]FB.i2_Br[i6
%9ub<Z4Ra%p8ZJss[k!;\Fgf?t_nkh5Y#I>QG`IT_YImi^ms9iH!i8,XkK)/E3*(EY<X2H*A*ase^cQYF30iKI.:ZH?jRojA]rre<
%po&qqXinpX/]P%o=?!hE<=rf.-.8L$PpZHdat#4Occ6gg8ob*u[W3@/eh^m'Fe'.5I>uh_F'#dAfs-i##8\W;?fe?]IPKR/(sQGm
%(9m2s!e<Y=#$1QNJ@<ArY5Ard6So%V[OH;:SEFP,?mn?!k7^SlY?R&]&1\M1>l@hL+a02JLo)+Ph:Q;d+g/GT)^PW+f\YV"08K_5
%F9Q^pZ@s:`YaGCj?m7P$M((,^KY]\dX3/+V;$]@h\8L$4+9H32\B3;g2ZkN8a0mb%4IR,RCnt&der4f]g)W4T:E`Z`MOpDLA8^(F
%i3Kjfk?DS$DU&Y3_.h4C5Prt)^eVeS%^OW"-;\8U*4&jBYEOq\gG45:M<WuSf_TN7QNaLVThCt-".Uu?nEiXa^,/FcK6*M^>btX<
%+si"OBoq.b/\i5@\\_?<D1t;5gDNTb$!-f]?9o?<9H'k0`j!0VP-bRuX"0_F?3++p'^AKhQGl;7Fp3\^2D&<DBf<#<Gn(SrU0ugb
%!MBn&H:;QRR\UI(A7@A`euTk#1<P9E^T;eC"P+r>?7rtP5bk!D\d&o"blO9uY3%ueKJ?%UD7=2UIAITOAMISsqq!\#IKPnS>)g2(
%.]NB+'kH)?JCV)Dl')?Q0'`ZIp`;b5r#XX2W!3rB)t/5pG^5*4jL-_j3t`%*fLi$\#d>]7lE+E'<Db>#WZ^BL$IC9/N:^8bHQ#Ic
%JK#*8h,YO:2)5%8b%1_u<6K,bD+F8`kO-siU&OdQY8RbMD-p&'[$$HPn_c0!m'O3EO*bg`8.L&PHC1@kitLF'?0@7Fq`GW@:<GG/
%1Dqgs,[i^9UX?f>!fNCYAZk9om*iPS*CbK2%Y6KSXNX3e2cX/b$XhqY,"F<sIoaVTWOqtAGmSHMFYoA*X;dm1@`\*D>ME'8&hds7
%?FJA;K!*q>U,POY9T\9ocu=b9Hng5,!('(o[2d#O?0)m9%^Gic13mGVTPfHj&M'Wa+<@t)E$Ocuc<52IeVJ<'JW74J,a^[>g&e>h
%#+27&&gGenpZiQT1iSq.MCZ<deVU>i%B=Yu'HH>V0,dBYpK?7nd[t9O1#-#rP)DOA6fpN?)HHTni94F0@2inqU;l:GI[<p[N+4NF
%X1"=,+)eMjj:Lc;9MUBL].Vs@emZ!YR#MH8grh2conmGG-17"VS]"XDY,_YQ[sN,DZTmn%M`%Yq]!MS%q2SiK)i'_o;W.VE<><rW
%-Y?21W*A%-TmERZJ6^uM<.*hO=r2*2=?Rs&VUZ'Q)N^;:,]cF=T*Xktrl]69!RU6aA"=hLG#hPeeCh*YcLKm$Dbsh^`a/E4"T^U;
%NfgjPE.)5RAh09CPX'Jt99?E[9jUOFr76ui#F!>!(#b&7Q(Q21[,;AIk-1?jmYQpg[oa/&Z+kD_B3Ho5=&VRu@<MXp\^?=<7:%L@
%c5>:nR8qgHdI(>8/)n"+l>_2+REt:>"lFbOB1iWP^:5jI*K3JnZdQ\JZo9N61fgm)q]<IY0jES^$c1S?gbtS3!F@FpBR6$+lf3&q
%U$L\3[$qBb`itQQpI@0ontM1_io7QpGh'uk6->'l?:"AMle=S:f&Egte_/im^I<N(RTj^WS'HsqQ5Q:P&c=V.:Ma6ZIQEFmfW=;N
%>$Blo5O2fm]Ebfe?8=F+(OH=6I6)OJ<n,Oj-5]ouT>s50\D5i>HDrjB7-uO(F1#)8]#9FO/H0UoX?Y?>l^-M3aQp)]Sh-thpu<r^
%5P4fXQUB$B]`Ar?E`s:,_+jst#Y&o-k6W4$C@//,gYS'#3,,&V?*o>R(\5]6A)FBZGQD]R+i#($^WAr`0Orug,A-J!X]ZpolUsY%
%R%%rIBUeK@#8</7'+B50CuDQga-nrCS*9&iS,,h$*Z_;(m<`rV^2)Ar@fqcT3oWIrfqALm\!T,0O9>U^U@fq$h/\+N5B,r\O.cCm
%9)(QK3`PNJAapd/mpqr0\'ES:DMUYEa*P'qpBG155Q[K&U,io0bS2d>BJ1\K.bOO!q\H;\iDaF7(u:(0fK3/@\!bLToqAT&ET8X+
%!*YZt1=N"Q/HTMjV5'KQpT0Dd0@(n?YIE)V=><=VG*Sh@N8N(F9@8=l8IG`eh/(o1#es]ggMHHgS4]k&LA/6T<dec$L-&KDXtS7q
%cCoKlU\Rp6MLprG!U1E1"3>MnfhCC[=>):[p`F*CFu=dQGJ@mpLmrJ\e-Z<m.h:(9Ldg2qq-n71DQc."I"gQa9C[R%CTJI7<&qG.
%/(FqhR_s=mlkXJWY/9k5Y,bXG6%3HjM4eHI-:4@7B9k=)81$b21t:ajFc?S&],I9jUtr_'%DcY.f5ZuR_2.Pdk[q-7J\1'!kkkO?
%jq-g%l#p%HdHm?_i!:jR!+>B`YI1K$l_9KMA^peE$&Q/Sf">QQ-?j&n_I4apL)#n!2YnosJ9])re:Dj%bI&1T=+PN,DRriOaHh,C
%WAY3-7j-g=H%P>8/2qGqNI\:`I'>s,cR4<ER3-t\o#J39:2Qr>Kbi9ASp^fdl"?XReT6h+nc3:<C&iS2=eAoI[1>&LWoY-Bhs0XP
%=r\k<>Cla9kelbF$Y4#$J*5a).DPpR27rtRQ:jW&nodm'eY?"rf]qQjYe9*!d+61::#/oZ[_>$92p(3>`"WY70mVNnP+NS[7H\fs
%F`VWDa.3GNUm.`F\O)d8C#=>HT!ttFNC/:Z.AMZ<Rp&#GIQcg47IR@QK&T2s#68otRuHl`N@%&@>Fcl=GGeJ;3`D-jlQ'#Wo%7cT
%Ql'd'?$]td^*f%FeOKSTI>l@UE3/:INibVhh\hs@4ds02r:DH>]pYWt@#3>(kk&E[CObMH4]tA2Wi&b*RG'?M\g@]h3t/?'4<[3d
%dO[Qh:=33W1CU<hTGEs7BJYp@_Q%t?_1-`:ej\9D=R`Gn<V*L;N7)mYFYEM%\*bj!Fj8sLfHFnpp*:hlmE[uE"kqPM"2B<=IV:<N
%P3=K,rXbRs!)*7ubh!a*`S#!HXmG[+@sFg\#Wfd2fH#6M-+MO%.J'`]\,INF5LulG#:rb;S@n=)MbGU+Ek'sNP,8Seqr.++m+9(2
%El2'h\>+GVQ4JuK"*4i$Au5$3c%M@t3[-)9%5@V[>adm,5d8o"+?9oCIUY[5lG7c/)_4bA*`T',*mXn`NhGLaX?b/g0r(/gl9d`9
%Gh=B&ht6bsf39ELTWC>_@N&S3Ke78]/0ZuoKUV_u:s[k`-k9_QTQeuHl$6RWM<CAK#QjA%BBmID)TnpB0.Yk'Mi"jk?/3,hldilp
%f]?gqR5&:&H`iPt;ecTF%^H6WRk/4Hce,VimQbn'"J1dU&'eRg"BtP'_[`b1Ah?2?@88T&E4MQYI,:WFm<O2rGtr9/_"6r9H)ij]
%Y/u/O"C[jP8cmH@d]<q%rdoeX9CdVla=;H8a?=*cCIFN0P]W_OEc#=00"H=K'rV5IijTg^I<L$j?CK#@%M`ZN[/g'.VSMEaf-J2_
%_#d]]d'-iE@-*\k)aS7$TQRJIbbN'0"h:Q6o5#r`^VeH0hBtd5)@GEJcJGb^M[G@#A\`FCo=R1*h#j^M\H^@)]g`=[/$s)">sO,Q
%/(iiBHemm)D5SUJ\&qDpGeQllUmfO+gl5KsBHm%]qhc4g4PJ?BIJWo$?.1N\9C@Emj^%iCh;r`3R&.T-@p%h`($IEj[$!5G""OT`
%YTMiX_/LjHDs:2n"cu)hS866[@L%-!R7(R6nutqCT>$k[&?crSWF0eg!*kN>/#q7OV/*jtRLR'C4jFG&\fCh.e8ept1_]I<qO_[Y
%$5Z>u.t1-W-=Duaq\C8[!"Ha'@5^sN6Zui=a)[iY>^KgeQ9;qu26"CPKatdcn.>jO\fS>*&:g=5'@0]](G(p+?I.fB5+=]B(oW+W
%`eJ]am-7`CPfl*Q5YQXpc&G5QALbo)'?,O)]+X=)f*^k,343k\lC_3&2V.OV45KuhI<BL6K'1l=ZRqTq=;`/>]2$aOr=1[YR0!hh
%p+]SJ4G\/a8j$bVll1%K"m</=?5;[h*4'q`*EZB9E3.T@"mHJS?X]l3WaWm$'kUE<+I>ce#m9c1>ErNGKK4lXBD'@'XD7li7HqiB
%9!:KA63(h;)*Ip@^eG<kK9sf4%[)b6\VAYN@0rND0$JKtG2>ulBkqM#/>G]'6/u\<f.__A/HN4o"h<uROMW>cGkg>@1FmS_9iE9u
%N]G`2pZk!:o^[0&5p<UH/m..)4g2t.4#8IR"WJ/Gq7J$G(_IM?N*`^(3c/RiIVsQ-Vh;DhAal!nF70b.^qlo$LUHCs'$+rlT51Hp
%(Vf9@A+::9]?%=dYYopK,DM(a4So2k"`q:uY^<35K8n%:aYq9W+F+"5F3+F:TIBRn8dgOB708`do<QIWBFoRm9!>%@0mG?ZW24FB
%SdSe.21QO-86=L5XB)3,_.cLD]e6P@^DU@tT7)ri-YM5W>/cJtd2]QbGJh<PS`X56ePOB!B'cu9@WlUnFh\IkGY")tPJ9V_SX.K!
%GUQO/)+91?3#d]qKo,k4F5At1^t]3D=Y>RHahP7FT5QK:NMF+d(C)H?pqQFRHK$hf-s#V%ETl2iDC9M0TERC\LF5DUB'GT^We^)N
%$ChIsBiNXl:gdEk(]=>-4E?^6Y'sLf[ZmoUH9Bp/W-p#,59ut3-%KF8&.1uL?Dp3;UKMJh"4*qdlg>F/8+ZtcgQCm?Uk2ls*R)oc
%+CJX%##%c]8nY2W8>7%dZ%HT'NW=*!K9rkU\2L-oOl?:6Ehpp4b-A+m!=Cq"(arK;7H6^Mfe(ilJh)a'/#R^\G`7=kSX%m0?"TfT
%HoQ9oPL@m"a*H(F^*VoO]Jq6p#;$L)i3p$6oboa1_rhMhc,rgk=OC[a"Zi`>p%X[9T5X0&DNi4r7au[S[.5?Le"pFaRI"B_7=nli
%KrD,n1WpG<d6ZHV=iNrH)@)a8.M736/LYT5o8,CP.+ir+K8C6KF<f8GIfVgGreB-"abM6$URIONm7,h"El?*Xgq@>6>:RP5FAu$0
%Pm/:HCO81I_IAm3VE1g:7'oqVTTupg!-HcVH3KmY0+:p`;'f71,&L5gYi+UKp7u-596?,+/Dj"RN#9'G1Tcj"0O=q@[A18/,:h9C
%A]L<!ENb6OCE1,h`KkL89;7C<H5Add\?qIA[_XF9l_K-e9J%5`Vf-\YE'nVMa%2t,7_s5TFl!.2:17P:mV7WtH@>t..\0Wi)k]6p
%U[\EccaT6P>;$=%a_DZ6]ukH5[d5gQQTh^s'ZR)MKOcT]Z-4MqLD+?=@?nX5P(8UtS2[=djmpo1G$3Y!4D.:Pou<:<\1&c5MTPJV
%F@nCG0C!FJ0hHP<_'\?)7'LH-NHaD04.n"K%6*(oNM!2?8+;II4l:Xcc$Aprp7H7V$<Ja[$]2RTr];Lr<[k%oap1c'`BnMN=_RmG
%grP_.$LddhE*1Iu<:MGA]2S&%AFQ[Oo/aqp@i>2*R8Fe7DZaBIHj+Q04We"\(`.QrY@>"8knUB:"bA_d8f^fKVG>u`UA_kZ8D86T
%*uOJIX(7,m#D6k`k\[_E:>IBXgg#NqgM=\qM_lTpNKVj.$`at<?qiQ;_.tL!,:AkSV-5@>La@&g#*#?eh)h@Hbjn^q`R<E3WeTum
%_$5(8?lCkZ%M'*4#l5[j.h^NKh<VGL4$"779qHps&UqJS2lRgBgTBKCF3-W4:Z`\%kO!9'88j/kQ\Cg0lffYjT5Uoj0,I7$fBHpX
%i4\VF_04g8pIiD"!0)k/ggYT+PQ=p!<5DVq8AWL;aO3rLFHcrF"QmGc1!?X"eB2c5Vfun8S"oIeQg+n<>'iD7"aACKQRr@p0+s4d
%[EPt[[ItiDpLRG.UCI[q2DY>C/ls9bVBsjtgcU<t-Y3dYlcg/h^:c541X*#C;X,g&IE[UliI$Yo*Lb)AM)OVBj=5CRlR!g$^+5j.
%Ybb]]"e]-@VSL#(^[pkk"e/4h7@m[a#K]&@*[78\WbD_!.1e$X!onLi_PA_E:!%hbkE85Bl+:HHc#Ws3SI"^o4:3&9BR/hl?S$99
%8u)K4k&k9=hU'PJI(][/[o[1jJ%\bTBIi.K,u?*a52(2Jk,")\^RlE<L9Wb`S<t#^giGfd")B,8Pgr'29==Vt%Q6#c'nPTb!63+j
%L'sU`>^jL\heVE?DNcQa9Co`B&!u/F^*uAiPG@&%74P.Fma_[p"EO182hJ;e*OmZV3H;!KG/qc0GeU^>D_7^1XrGkpQQV:8]5-Z<
%lD)qI;JQjr/J3I&enO]K1BWJZSRuTND$*)f@qh-Xb#)<E3j&G.G?#G#O20#h(0E`5Y>VKnd?c>rnD1A;J=G#!d)g4fUhiLO+4D#)
%A"/2@Ssp65L"(;(_ZFqp9q=O=P-9JV#%fgq9j<8#SJBOh!>!8$^:>MtJ6?e6:)`_ZilYNA^+)elX,TC'ho/q+02IU8'+2s*5<r="
%$T2Er]ED%ah:OOPqbs0RgmMA6@B3g>8*+!p/G$1*BW%$tJ#p#^^>BIZ]No&]@i\f.O"VpIg?ZVeRtcI]<1kD&jEmDr!Zf4(N'P[q
%b")P8k@ShkJLUPA[k]I+e+WJ;qO_]0MCkQ.98?nW]52lLL"e6,TE;^kr>l*'6DFm^\uQE+&!+$]S<gk.=?Pu"JR>nseNI/]kAi=`
%;6erc`uRRs'4c@U358j"JS'-.0Pq&]hd).aO$^=c=)1jN5h>)J^_g1eH/c=8C[?-"Bm)BgboGul.Wb10mlT(o093TqdOlg@!r($M
%QXnS&ZFNdsYIO"_SoVT/7&s?WZ93H:1N*BG5k)n$<u]<cfV>*:drA3$?l2.@M(f)kDHT\E?QE5pl^h71dp?(BB]+h*%99>9[eW)h
%Ptar2JIHN)GF36E:6l:^r4;/^_4>9MHNTE+)Dm7b3JBW0*l+:(pG4i((/Bo#(+8C::\nN4So:gWGOs*OK.u:!6%n$:Sj&2hVD2+Z
%:gctl(XiEL%n>ku9n2T#Yp+7T"B$XaoUQ,j#M-/)=':YhOFQ)H\B72AkQV)/!5jd1aN^&6<i=Uc"#d89P"-1a.Gn"\.SV]h.5t%C
%"UMitak.lB@&%Sp,fAqn1gm;aa1Xe^TX-D6BfE!?qq]LCGeUjH]ATPt2V,Z^$7sG41">Y<EaU/]DE)L</V7<kf\.+Q6D5EgDEXC_
%"cU!BH"k,W@-F(4aoIf;e[-?1GLlCdWRsZOk75",_rb)+\9I3VD7,oZd!+TnJ7I[m)IiD:&i0.)dKWK%7O*t"FOpP^Q9UD_*cN_G
%G'^CpcaO^&BCBj^kXE.Nl,7$F:_g19HlPA*RTE23/>GHs>g\0p3U$t:o?3I7=Q:UZ0c,r!qjH!bNaOM8@D/g/5EA7[!N_*k'g8MX
%'G>)l$pI'RTKj[NM``3Djl")e$kQVGS!a.nKK3+gcY;`>?&_Rf3._>*S"";'s7uA_]_0be0Zmg<[^(X2AZ)$g2/'p,3NXKq)E3T+
%o,012X77`E-j_XN,E6WApRLpP[";'N!`R;6F-"Zr>B)dd+4G\;6!r?^%NLJ]10)\>Z3/acG;06Tg*<cd!=j03>Ojm'&85lVP'hKD
%Y(2T>-8.$VL1W6$'\;.#Z#-g&YKp!oZ[V_8,hK6s6k??S$=r:$+,5l%US\5':uu'K('&\5'_jmD1Clb)%,r`p]!)0PHp1g[CBgj2
%F%!(d++@GrCr+;[nY*\2S<_Q'f3A$%)b7=T1Ko3<\GO;7;a;IHk^6NA3KG35WIqY^'AZ;T*$OnX'_UL)#s62Cs-9!=A#I>-^:lbe
%X/X'T_0fW9Ncu<"h3!l7cM?g3&0;&Q>M)=*^"Q$:JL0aWmC0c@U0,m+DG?[T-F)[">_Lb5aSX_;)iTD>Fi3X`-+B*)5*XOG=B?HD
%m7OinHA$1%PsLUJM;*WY>@ZV8/4ga1]cmpJ;7QAh"$%/VF(NM*M?5^tGi6q+(:8])jgs6-eA%$OIrQtmTAVD*mi]-F"2N2Q?Suo;
%\<X"3^:g%+R*[Vc?/-aJCfCk=be"8BEtRI*25qp/$[g`c/(+7(BA8^sGBi#C+"5(t_:4+Cb\l,+rHHk$)H[=sSuK>b@9"@/i3;><
%pL(&7PZYF]9]h,>d6lFq7ipKmW"ITn(EHb+)4npmE">_L5\kT@+EX82K4sFh(7mjJ-Q)WHdkXd*_2W2^([)dZbFm`XbLt\m>K416
%m+jR-+.;82^](B]1o;OZ/PfN#q&4MJ3ZeUdA.%cqd5'KVOo<!DS4doPE`U)!`76RnY`Xj;-AjSgZ\<WsJ[*jV^Zt=Jl>2i8_A],]
%T(be8oTIcM'I4uBZ<_(:5V&1r%6'E-$QOGqR*Ng%FagNOcej/k].55Xq6BXR(DMV-B?SJnqkioG(5Q%W8U+?j_Ne9s&Klo7,(M1"
%QCC,8[<"8BjnW@IrpWeliMWX<gi6&?@GOLp!W4jXXn'aP?r_IN>Ll?4E$4K6OZ8\9FTP(09T*\#Vj@X@X,T!uLP;;lYa#\`WD",!
%:m[mkX%4+Q%jPrtn9RR&QKAo5_A6khYi"DZW$-`tBD%`4<6$]GV/JdVXJ-X@dTXjDa(='NI&jYl'!H5u%"`o?Hdi:>Kbu&.1qLNG
%VG:0Gf!'tUWm]\X7IL[I4:c.H<W(XFeTtN?IJg+7XU:k-]GUQ)XZi%_5;@1ponp[W]4GPha[hFZQ`OelDgpOK_F@(a4PI3tgKY9l
%jK<rbIJ@q@R2Vl-UUr#alO1+u4&f$nG5^;.MCN>*jkR6O!s`-eL=c7ol^GLgg0n6$V&B45a#iK+a*Fs[pC8?m"m-E9\DPnJ+Ef0Q
%76Qr+ZaE1e2Y2dlHIRjW;S0m=%_P.eb*4[&dcZ8r3@d%SPK2.3j_2$Mo5,BL!WVP*D.>(6a)qc97JLoqqcn;P`+dqQX;I?@&K9ul
%GSI`q_Uo"VHr,#Ao4D(49p+BZ\8=$:4MoJ"gUjpgL%b[c?sF7@>aS$rmL-ku/UkGq?5CNm(+1a`EL?G<LXe.D2JpB\$bU!_Q)RK\
%d#1FEbPJ>39,%I$9C$cB6Gg@j_/V`A(2uCn`qPLkr'0RSl#%G3P27#53u"p_JIJp(\rSc3LF$jL]M2U^jP?4n@pkPBP/M@FMC=Wc
%CS#u2Y0<u"Uo_J9=UZiRAlM`AA7Xbl&Kfl?&JQ7u%'sW26_@,Yg-h<M1&rM'GOgTfSLY-a[Lt_0r"B?61[GX@Y`s]/;!&XdYoQ^J
%=p@OD!1&K]15'%p"L1memX8GP&nX0s]C-++A!!.s>u3WC`gacN?GLc$K1mo!?k>@giJ&CX@bSFKLW4s+WcWh"EMrSZ*H>X>Y,rj6
%d(rg,7kA[Q_'=LJ;B0N\!m1f5/o71P'L."=2g#crG/;I\(DWp=P%QcYp>e%Re-8Z&+V'ALlEnZA/=i92*C_4#6Um1c?&4])f/++I
%cdK-n+HKn:*Qf+5Lhk8a=h^/b72gM)e@.9?d(6T&:>@EV:E0qM5q&*Poj+kI!?nXpl/bf_WJ0GV&.+Mhjpgui<QpoNle2&=Pfh)"
%bb:_.TtBB9O%OPBQA6N*U/>T.?6ju`C_C&*3$E7"_84L7,,o(2!B)UPFJm)jHpT/(q6S^1dlFhmf4;[K8S+H*aE">ELnS)C94BA%
%oVJP^**NfjO<Xg<P--Li/e=Zp+2YYS0o(]#G$WAZ_3;[UR;?OU:2lE=r/S3;:I<?5pF=n5&;?ZGB,-7rN>0TY<gEpu1$37>-c;K_
%GL/ridS3e5A%k17BTll)cOSSC&Zu,\Pqq"78cr:@>SL:N/h+@F^^@nO(e?.`m*.tmDlYNWa)/SdBS[N?qs>lL!#;c1/oZsb6%lo?
%-$tm!,."L"mkslf2^ajh'8`^Ds5gcG(/`S(12;qkSg?Q8\D`bX()aGGjKQk&dQS5S_rBehP2PPU0],"XXA=*6JO-1C\SRH1:RL([
%bXr%(j[i`inWI&,Z!]!l')6$-&L_>9MJuGq%3^sDVhsS.66l`MIUs@#jH?WqcetoNdS/3s<aHZF-+pH4QQZIL/RPUa,)':2MJ@r!
%D.UPV[Lbq0]:pu('M0En*1"RDQSb!#PRpXEmA![frRNg!#59\7fsnG[otE-p.lrE:A:`U6:[Emtad2As5EaaX.u=CUWoU[-Z-/_Z
%,_#3e6i[\ELh$D+F9Z4oaJoAKR'AjY.+V@*VL/Td!N1B-`^9#@$<rMA.O,GPN=fg#]Wsk*?@mc=kgD:!KNVD[;OiFTrC(Eje0?n>
%?E6YY9X'tuUn]+\qAQje7J].fVLp$!E3EWo9%d&QA23hEohAaprUJqO\'Pc(HOY8G6(4$q&k"%@H&CYaEB!ollK,dG-2[k^dlM]T
%$4a'-$W]+iS]<-pO_C$+(/ph:h?HD4)-tnZiXrX`SOs#8"tpnuOtMaoE#6J$]\s4UAG]A"#m:#.DCe*(nm!&m*=1",ApPHd=j'7E
%MR5O1'6=U\JKa2T9!mQEVknEAA[G/Q7XLrUB^3c1b:&C'k1u4o;XPuInKJa[cTjS"rPWln>A[/M^QNW@!/nn*Y_slOg"l/Nh\N,W
%,IMR%iKPN]d)M%T5I#p4p7h7]gg.f1&qfB;H%tu)"S@JM]o*BR,FB^>huJI<SIDDU@14.S!2'o)c*rn%1?QsX>ENUr'Rk0[SDrUD
%Tr$f-?`V<n\pr8\@n;rFA4mJLCF`P.Nm4`A9p%UN1[6[^,0R!g05]#T!;kI"]r!=-_M(*dPP#p7UFP_/#Z?2HDS$Nt+mY)YAj#&$
%N$lW16/-qfFO5OBaSbn1S)2$kaeR$NK%.qee:]quPO5G\ND?OV`o,B6q[\FnK`SL)XP6rE-f><&Rc8APOqX$,D6aoZ!r9=M=];Q6
%Lk\!R!OC#7C$$!jBaToG]7^]XOmfAF"aE]Snt\uTbo)JY6g7IlX'6_^+ru@V6:JfKY;'"M[!HH8"'DaE+m\m+./79W;usm^G^P0u
%QbE&l,9"+&T+36*f-;rX30o7<*o'RG)F-F7d(-E7\d-[o)7`dD*>75jUlL-rj8aX?(s1jN8!^<8mm;?-iC&Z\03A:Y1?5ZM]JKl&
%6UNL@WDX<.Cmt8<@8>n3KFbNB)==-$Q4q96J6Om$M,enW'n(Km^T0Y2i&c!`K;gBq(bH1`/2<-cB;lFpl%`S8Kg(4al09akYeGbN
%NX@"Ocu5lp()q@&9f.\#B*84kBFof$&DDld@*4fB#1_.[o%ch2E-7sV>Et%J2AoL=:6`9JM^mbSHk/9<7$,86C9%sY0>jHb8V$Dg
%P.7R7M"/&<RY4/5n*Gi[@7QD4\nY4H3(,1,X%&M-?Ps&b?,klqC8nMBQEA/?=Bj&'B[CM>7Y=`_2B&rlZ_]q9S;dSECMkTJ[-!YU
%9l%0OBUZ8)T[fQl#$VO?CX?hB>(]jsm]5I1\Lp7fahNCSrXIr[l@=9Am'.5dQ46u\U&I0Q1Z8pmlqqq"Jbg.5_#aim!b3?q/KtXU
%SjfH,DqD9#k%n0'qa]=^O+?@uK0Wo'*r+#egE$K/]k%_Z7,D_4K*Gkqm6TX"l"]:9p5hIar=iq+oT5)fko+9;K4$EZdO%>JRn?1h
%'%oT0M,Ziu:U"cVVd@3%m]'/l7lQBP*g1iKCp1_?li1uX/tMAsQmMpI"Lo$u]7aSi$mCB?=9[M"NMf(^e:<ns#pc%:K)(VV30Ir"
%0r#Jgf.-jnG).!1)age3JgAH^5a+loVYG6aNTbRMg_!?X[Mlb^pq?m;JJJ;s-0"Z,aNg0$CrQ>jme'&C\5*>Jdk<#O"5*":=I,$u
%b8SgJ84jT3"#rb*T%-b/Y0X?uY^mFb%Pn?ZTnJR=LHq!bF-$crd>[$$8:7iYMS1.Q8>.Ep(SGuH`cA6g*;':BUuX@!2Qg"@J>W]*
%KXoO[R.C[hfFY8FfP)Z7_!G#EDJ=elN(*FP$[&$7/.nC3IeY[If<!lUVsAV6jitL1P9M$_Sa\%#]Jn.2@bo8/CZjXNpt^&'=e++0
%**D)X5:X[^l=6N6_7@E9Hq4$.[h>r/:Q-B7ZX\a[nhYlV#2h<F=I4!J-nL2?l0ogupfV1dq\1_7`a]\\8;(pMa:/te"WK<<$1@3;
%N\6p$co-h#gp/6$Fm/t67Wmb8?+mM%B9',/'[Bj1jdh92MU,nlfA<^W,<N;(nb$@0''pMm=HCP++9rcOG7tYIgCKoXKk)upG[hrk
%`@]Kh@;GtdT#([V:.aGdMrXjK.E<ia-CLH:?Ca9/]3&EQN+fGQd@f:=,#?p'ljQ56Fq4g,k1+3SJ<EbWd$#8JW_22P%ZHPpXpVA(
%\I/Z?C0.-Rl<(Q2$)V3Je"DfDX[$=,LPkbPEA9bf(h!9qCs]7nkdrta^eG]e&<+Ve>4U@(nr:PD@8/MsaK\VG:!qtNb$ELUD$u1D
%PNX@-.?O&U\'&W5/KG-Np1mj$7KcBO>1RlYm%-^95lC2PY0N8oYEbY#*YK?meUB4K[']2pXPBc3VjIE3VX)XG]30Pb31./G0sC06
%U2`qt=jan8rQLsj-[Ak?YFBob1S6GckIN:d:@'O`cHg(9G/cUGh`-Cd"6B2]GiA9Q06cq"X"UPtg6gCZ$i\&m<Wh#qNCc.noqn2F
%PTJ_<>UcYV?;.VeO:.6bf(\jFo=;u@?WTUr_Y(7XadEk=<JQF,Z8j<.m/D$H]dp?Dq!ZnKC@bh2D+<&Uk'*.\e(jCamdo8IqHBn3
%lb"Ck?rDkdFi:2CZHepTs2VeJ=u;E%0[Jp0=Z"+A\\P#l:&VKPrPH1DWUG#:?rCXJ1B1"?mLeB+WH7.oAT;j-E-&"95FGTlCATNY
%IPsnt)EoY/(?Y47=ZGG#cB3#6XbQ\r%=X3qX+kI0,('DFf?@)4.f9E%IXE'iG)?(*S5$W8X:n)ubge0C!%4>(bLUSJ=FI"fcZPf*
%F]-B:H\n8dZf-@fP`7[i`pe8q6CV9h1KM'+P[PEGO8D8sRSeXAF]'WoqT86i!Mt4i7aUV_PZ4ND7M3ZmaD#RokB?-Q_cXtWS,OF?
%oPpL214t2CEM5$e&>EFj7&FSmn::j4Y^q@7_O`fk4Tq5lrZ,Ht`;fRrS`Al>ofac^%oRhL4]`)ai1HU;jT"UN)?lb/+S4*L,9OnB
%>r_Vu6GK&+11Uln3G(.D9/+?n8>;-sU$I7G*9e/h?A&n"h!jDo'l?G0!QgP.i>Ml0OfU3k'K,qL4]1c;<CYX#K5oh[AT#a?qI9>3
%QIfVti3+5F`K[7oh)^RiGm)?X@:DR"E8!kU@n6Ok/06l9cd@Zj8#gck82L>dO=<%2YoKA'b[*OE1D_!l`DR4HZlP2p8`ma_L@k*O
%B:_JZ$<lHR2Y=9^K1Y<hWnb%c^m,bQ=u2,6L$ln;F$jF<`1@&sW<[aR&tcM0CmuI*88BR$"%A4JcM+"'4VTd+GFGb7CsUF92*9ls
%l2?_);5aA:99P7GDe*>qfNKXthkM$un/*R-8*Xq#,9<bg4#?hj.mq>"=BS*h<.h_`hj;;s2#a>Omje7pr%pJ0m<ru>Dp%b1hl'Bt
%?PLeHU[c<NYq-8k0md>Jp!)i5_m\u#GO<3$r\b^TYt&llNh!As<rGGf<JcZZHcpZ"Q\Ej5$?:5Lo!h1Mq!D<L?)cd&2ChdA<5,D1
%O*W^lb&VIlB@lsX5/4,D07S/Ia'SeN>$VEOOiL=$R)K.K=FF;.*(B7"U0]`?%(A7`<'5$J`!"C#>;X-]dG2n,b:#B7j,qBg!To89
%nt,&81*%.M0Tsq%/mo$k]eN^oR>/KmFSSh8&BL/\b5g/I0sZpM9H`(AI$SlrTQDV/VR]Tk'/N>&QQtBJ3%ia]j[\L;2fmX1OimFj
%nEE!Sf;c-:O%13kS\iKC;_RjX.nofAF4CmUe\l+pCRU1<'@T+YJL#[rb-Ja&roBS-H$*CPkP8p(>C&A0h"HoRi8D,5:VXVX]hSNU
%Z]b0sZdbN7dRd_MW<PA4d!LKb?<-<sgLB7addGqD''R%2ahWJH;N6DAH!g0C(XJ+aD^1gq[reG[eZ[X(B<O*YL<&r>SkG+smMD44
%$-E)MP>spiiZk<@1oC2IWAi!2eQ';,Zuaq0r.n7%LX!Cf2X\^tE8K`ELJLKg@'/Ju516D@Xfcj/Y\f<<g&>7>[<6h/=,&r+GuL(e
%n>lQ#>8_*#o@:_A^nR4rn$<:";.WVL<]V,pC1NdWDhY\_1"B%aAmn[k;ZEf//P;C'BtC2&e]di)hCQ,^$dr>*X-p!'M[ajO;@W;.
%M;*Y!2enbTa?@fh%>Pnuqg,hV'\3&.^<Y]Y<5.C,l*te\3r[mSaesGccr'(XcC!3E9Ds99<f5iIIT8B:"E9_hr;8H+2p@@Dit!Wc
%f&JWhEU`3p/Y2JV#o:K@T..UK/qE[U!H.L@SuZGF7Bp14"sNtb)8<!ahAW!Mc+KQ("eXUpc.6?'rEqFrgoNe<4Q`OXg1C(oQ,C05
%R`'EQfEW4l/MXoE?d+-e<N@e%c"^N;hJQc1AG3cV2+SV]eU\6[\p[]NPT?o5CZ1op5<d"*+)(nYm)iQtTgJJ;l;ETSlFHZc<+VDj
%D[^2?rE@G=Q`mEiD-H]:b9kZPU_S8E?gsL'b6+$Z0)Or!mLL6;=64i+s'kc@Jm?fpAm-1lm.+/BW@d]>?4d]R6G=>0(O>gk/H($:
%]R*1X&..NB($>7a_VECKl^PQkMVY$1Je>`"!jV+j6JW@Il^RioD9n!ijhCc;MC$^FbB6ske_G+A>cgek3A+5(Q-^BjX0qo,.9aId
%Y@OG/"4P$[5l5r(bqfZEm64no&qL,ol0mG`bfQ@IAXtb9B3LXEj*4<D'<f*>f1dD4mH)%2Po'5rNk:S,2Zi@-Zio%)HeB?KqeU-8
%K'2GHY?&hOWIB/sZCB11ebl&0N[p)-(mf4@XWB)QV0+d^E*__XJE_0^?>e?>H+mGuc2=3TkaWHi]%iZs]VtMKa's1tkDcW-84BI4
%EKLk_dqh$/l:@P6o2URQaB)`Z!3sVNb\(NSrpGF1DR6LR>bY@L0'gf(SZ<BH;_+]2#5JaIMs4DF`arK=e[2O!egpE*?-]Lf=VniV
%+3(k.Ws@IdFI8ufI&SS7[Olr0Q?KC[[c`W];lkl=[W(NdU05@aTPdt+2:K.)'si?H39*g-](O^^c)%F7EmD<aM<YiD=`VsHf?M]V
%HRJ@h2utGYS#*O75KWAP7N[<+Gt4#XSn]L!"K,W>:a_TKr2t;'DSr7g%=3Uk?iE83hQ%h4mh`t?QF-9QEN;TJ7)1Hms,G'h$Nko7
%`5D5[Mu^R.R)if[Tus,irM(&.f'si00B0c<i(uqZh0qnf/tO!q3Wm#)cKi3`'Ms<GL`['s:;DG^hCOMr!!DqI#<Bc-#JX;)dXb?t
%P^B^dIHD)[0"`H&^<qFB@ZI*XgTUq]_c_FoHuAM#WG;*PQ/BGZGQk&\9D&G!_3Jb:WWh2-G<f$/#eRC'e"9/1#NcAB\G~>
%AI9_PrivateDataEnd
