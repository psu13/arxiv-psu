%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: potsca.pdf
%%Creator: Adobe Acrobat 8.0
%%For: chrisquigg
%%CreationDate: 5/17/10, 11:53:10
%%BoundingBox: 0 0 506 412
%%HiResBoundingBox: 0 0 505.2630 411.3280
%%CropBox: 0 0 505.2630 411.3280
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2010-02-22T12:00:49-06:00"
   xap:ModifyDate="2010-02-22T12:01:22-06:00"
   xap:MetadataDate="2010-02-22T12:01:22-06:00"
   xapMM:DocumentID="uuid:DC8637983A21DF11BA67F6FB5064A32C"
   xapMM:InstanceID="uuid:3668c8ae-7b04-c841-9ba7-8212b5e97ee5"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">potsca</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="256"
      xapGImg:height="212"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqkvnCC0uNDkt&#xA;brVJNJS4lhijuIboWMkkrSr6dutzRnj9dqR1j+Oh+H4qYqx/8ob3UptE1ey1KWSW70nWb2xZZLmS&#xA;+ESoyyRxR3k9JrhY0lC85AGrUECmKo3y9pGjX5vWvdBid/r1+TqFxDayCWl7KoAPJ5dh/Mo6YqnH&#xA;+E/Kv/Vmsf8ApGh/5pxV3+E/Kv8A1ZrH/pGh/wCacVd/hPyr/wBWax/6Rof+acVQ9h5I8r2sDRNp&#xA;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&#xA;7FXYq7FXYq7FXYq//9k="/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:DB8637983A21DF11BA67F6FB5064A32C"
    stRef:documentID="uuid:D78637983A21DF11BA67F6FB5064A32C"/>
   <xapTPg:MaxPageSize
    stDim:w="792.000000"
    stDim:h="612.000000"
    stDim:unit="Points"/>
   <xapTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Symbol"
      stFnt:fontFamily="Symbol"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d7e3"
      stFnt:composite="False"
      stFnt:fontFileName="Symbol.ttf"/>
     <rdf:li
      stFnt:fontName="Helvetica"
      stFnt:fontFamily="Helvetica"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d18e1"
      stFnt:composite="False"
      stFnt:fontFileName="Helvetica.dfont"/>
    </rdf:Bag>
   </xapTPg:Fonts>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xapG:groupName="Default Swatch Group"
      xapG:groupType="0"/>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -411.328 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 411.328 li
505.263 411.328 li
505.263 0 li
cp
clp
[1 0 0 1 -141.185 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
638.501 352.454 mo
632.201 352.454 li
226.501 352.454 mo
232.801 352.454 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /SBMBAA+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966dc82428100005b68000012f868656164888895f500000eb80000
0036686865610a220f8100000ef000000024686d74785bcd114b00000f14
000021a46c6f6361009c340c000030b8000021a86d61787010d30b0a0000
5260000000206e616d6562c29c08000052800000051870726570bc836e31
00005798000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d0000000001000000000000319e9042
5f0f3cf500110800000000005f4d8f0000000000c621bcd6f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000086905120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c014f004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090000000000000068
000000680000006800000068000000680000006800000068000000680000
00680000006800000068000000f80000017c0000017c0000017c0000017c
000001b8000001f8000002400000031c0000036800000480000005d80000
06740000079c000008c8000008c8000008c8000008c8000008c8000008c8
000008c80000091800000918000009180000091800000918000009180000
0a3800000a3800000a3800000a3800000a3800000a3800000a3800000a38
00000a3800000a3800000a3800000a3800000a3800000ae400000ae40000
0ae400000ae400000ae400000ae400000ba000000ba000000ba000000ba0
00000ba000000bf800000bf800000c5c00000c5c00000c5c00000c5c0000
0df000000df000000df000000df000000f8400000f8400000f8400000f84
00000fe000000fe000000fe00000102400001024000010dc000011cc0000
11cc000011cc0000125800001258000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80000
12f8000012f8000012f8000012f8000012f8000012f8000012f8000012f8
000012f8000012f8000012f8000012f8000012f8000012f8000012f80001
00000869006f0009006b0007000200100010005d000007e80a1d00040001
0000002501c2000100000000000000500008000100000000000100090058
0001000000000002000700610001000000000003001f0068000100000000
000400090087000100000000000500080000000100000000000600090090
0001000000000007003200990001000000000012000900cb000100000000
0100000900d40001000000000101001000dd0001000000000102000e00ed
0001000000000103001400fb00010000000001040012010f000100000001
0007002f01210001000000020007003c015000010000000300070030018c
0001000000040007003a01bc0001000000050007003601f6000100000006
00070030022c0001000000070007003c025c000300010404000200060298
0003000104060002000e029e0003000104070002000c02ac000300010409
0002000e02b800030001040b0002001002c600030001040c0002000c02d6
0003000104100002001002e20003000104110002000a02f2000300010412
0002000602fc0003000104130002001003020003000104140002000c0312
0003000104160002000c031e0003000104190002000e032a00030001041d
0002000c0338000300010804000200060344000300010c0a0002000c034a
362e316431386531a920313939302d32303036204170706c6520436f6d70
7574657220496e632e20a92031393831204c696e6f7479706520414720a9
20313939302d3931205479706520536f6c7574696f6e7320496e632e4865
6c766574696361526567756c617248656c7665746963613b20362e316431
3865313b20323030392d30362d323948656c76657469636148656c766574
69636148656c766574696361206973206120726567697374657265642074
726164656d61726b206f66204c696e6f7479706520414748656c76657469
63614c6967617475726573436f6d6d6f6e204c69676174757265734e756d
6265722053706163696e6750726f706f7274696f6e616c204e756d626572
734d6f6e6f737061636564204e756d6265727348656c7665746963612065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414748656c766574696361206973742065696e2065696e676574
726167656e657320576172656e7a65696368656e20646572204c696e6f74
79706520414748656c766574696361208f20756e206d61726368696f2072
65676973747261746f206469204c696e6f7479706520414748656c766574
6963612069732065656e20676572656769737472656572642068616e6465
6c736d65726b2076616e204c696e6f7479706520414748656c7665746963
61208a722065747420726567697374726572617420766172756d8a726b65
20669a72204c696e6f7479706520414748656c7665746963612065732075
6e61206d617263612072656769737472616461206465204c696e6f747970
6520414748656c7665746963612065722065742072656769737472657265
7420766172656dbe726b652074696c68bf72656e6465204c696e6f747970
652041476a196e969ad4004f007200640069006e00e60072004e006f0072
006d0061006c0052006500670075006c00610072004e006f0072006d0061
0061006c0069004e006f0072006d0061006c005200650067006f006c0061
0072006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c
006900650072004e006f0072006d0061006c004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d0061006c5e3889c4
4f53004e006f0072006d0061006cb800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[4857 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 380 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>SBMBAA+Helvetica AddT42Char 
1 1496 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>SBMBAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/hyphen 16 def
/four 23 def
end
SBMBAA+Helvetica /Encoding get
dup 45 /hyphen put
dup 52 /four put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica /SBMBAA+Helvetica findfont ct_VMDictPut/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen 6{/.notdef}rp /four 203{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf196.72 359.125 mo(-4)[6.65985 0 ]xsh638.501 304.154 mo
632.201 304.154 li
226.501 304.154 mo
232.801 304.154 li
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 1152 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/three 22 def
end
SBMBAA+Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen 5{/.notdef}rp /three /four 203{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf196.72 310.821 mo(-3)[6.65985 0 ]xsh638.501 255.754 mo
632.201 255.754 li
226.501 255.754 mo
232.801 255.754 li
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 872 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/two 21 def
end
SBMBAA+Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen 4{/.notdef}rp /two /three /four 203{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf196.72 262.422 mo(-2)[6.65985 0 ]xsh638.501 207.454 mo
632.201 207.454 li
226.501 207.454 mo
232.801 207.454 li
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 796 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/one 20 def
end
SBMBAA+Helvetica /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one /two /three /four 203{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf196.72 214.126 mo(-1)[6.65985 0 ]xsh638.501 159.154 mo
632.201 159.154 li
226.501 159.154 mo
232.801 159.154 li
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 576 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/zero 19 def
end
SBMBAA+Helvetica /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf203.376 165.821 mo(0)sh638.501 110.754 mo
632.201 110.754 li
226.501 110.754 mo
232.801 110.754 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf203.376 117.422 mo(1)sh638.501 62.4537 mo
632.201 62.4537 li
226.501 62.4537 mo
232.801 62.4537 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf203.376 69.1255 mo(2)sh638.501 14.1539 mo
632.201 14.1539 li
226.501 14.1539 mo
232.801 14.1539 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf203.376 20.8209 mo(3)sh289.301 4.4537 mo
289.301 10.7537 li
289.301 352.454 mo
289.301 346.154 li
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 440 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>SBMBAA+Helvetica AddT42Char 
1 1652 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/period 17 def
/five 24 def
end
SBMBAA+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five 202{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf275.399 379.125 mo(0.5)[11.12 5.56 0 ]xsh359.201 4.4537 mo
359.201 10.7537 li
359.201 352.454 mo
359.201 346.154 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf353.642 379.125 mo(1)sh429.001 4.4537 mo
429.001 10.7537 li
429.001 352.454 mo
429.001 346.154 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf415.103 379.125 mo(1.5)[11.12 5.56 0 ]xsh498.801 4.4537 mo
498.801 10.7537 li
498.801 352.454 mo
498.801 346.154 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf493.243 379.125 mo(2)sh568.701 4.4537 mo
568.701 10.7537 li
568.701 352.454 mo
568.701 346.154 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf554.798 379.125 mo(2.5)[11.12 5.56 0 ]xsh638.501 4.4537 mo
638.501 10.7537 li
638.501 352.454 mo
638.501 346.154 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf632.938 379.125 mo(3)sh226.501 352.454 mo
638.501 352.454 li
638.501 4.45401 li
226.501 4.45401 li
cp
@
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if

1 0 3 <> SBMBAA+Helvetica AddT42Char 
1 104 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>SBMBAA+Helvetica AddT42Char 
1 248 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>SBMBAA+Helvetica AddT42Char 
1 504 18 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>SBMBAA+Helvetica AddT42Char 
1 2788 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>SBMBAA+Helvetica AddT42Char 
1 2976 62 <00010080fe6d020005c700070035401c031c0010041c07120917171a0501
580304200700190809f0216c33182b2b4ef43c4dfd3cf43c4e456544e600
3f4dfd3ffd31301321152311331521800180d6d6fe8005c793f9cc93>SBMBAA+Helvetica AddT42Char 
1 3064 64 <0001002ffe6d01af05c70007003e402000070102031c050410001c071209
17171a06200201580003190809f0213c7c182b2b4ef43c4df43cfd4e4565
44e6003f4dfd3f3cfd3c01113939313013331123352111212fd5d50180fe
80ff00063493f8a60000>SBMBAA+Helvetica AddT42Char 
1 4556 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/slash 18 def
/V 57 def
/bracketleft 62 def
/bracketright 64 def
/r 85 def
end
SBMBAA+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five 32{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 20{/.notdef}rp /r 141{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [0 -20 -20 0 0 0 ]msf163.173 235.672 mo([V\(r\)-V\(r)[-5.56 -13.3401 -6.65985 -6.65985 -6.65985 -6.65985 -13.3401 -6.65985 0 ]yshMOQTAN+Helvetica*1 [0 -16 -16 0 0 0 ]msf169.165 163.469 mo(0)shMOQTAN+Helvetica*1 [0 -20 -20 0 0 0 ]msf163.173 154.579 mo(\)] r)[-6.65985 -5.56 -5.56 0 ]yshMOQTAN+Helvetica*1 [0 -16 -16 0 0 0 ]msf169.165 130.133 mo(0)shMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf418.61 403.125 mo(r/r)[6.65985 5.56 0 ]xshMOQTAN+Helvetica*1 [16 0 0 -16 0 0 ]msf437.485 409.125 mo(0)sh0.749 0.212 0 rgb
true set_gvm
%ADOBeginSubsetFont: KHOAAA+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /KHOAAA+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74206e7d83040000012c000002166670676dc62bd4b60000034400000200
676c7966de96a932000019ac0000014068656164cf8bbaf2000005440000
0036686865610cca02960000057c00000024686d74788f92d202000005a0
0000031c6c6f6361264026e0000008bc000001906d61787008d608cd0000
0a4c000000206e616d6518d6208c00000a6c0000072e7072657016a939d3
0000119c0000081067646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
00ee00cd003b00870289003f005600c1005e01ec00b20193008b012d0089
00ee003b00ae00b200c700b20037002d006003a600c100fc00d300b800d3
025c00cb00c100660031021900c1004e005400b2009c0202021d007500c1
019600c1020e023f01ac009e029c017f00a0005a001f042700c100f40058
03b4006d003302a8005e046a02850700007302a2007501100073005e0242
024e0902009804f600370546005c00bc00b000a6036d02e7075e004401f8
0075006800dd00e1003502370062008d0262008900be01d301b601d701e3
025200cf01c301fc01cd05480548054805660000001700ee05c100b6021b
007100b60000001b003f030405480548054805480000001f0029004e0029
004e0066019305cb019e008b015000ee00ee0031009a0091004e009a0548
00b000310398002d036d003300e9004a004a00290398039800330583004a
00c3008f005205d3005a019c0075067d00600398039803b601b200330398
058301c70398039803980000001201e5061d003904210227065e008700e9
05b0023d02d70077008302f6058301b400df058d02a600750112059c0283
0162005e0242024e004e0552008b058d001404f60021058d005c002d001f
05f4005201ba022d001003a601aa0075006800dd00e105c902e7020c0646
006405ec01ee01f8062f062501b205f80200008301c10635003d01fc0633
01be0639060e00680083006200be7b857fff00820030002a000040070605
04030201002c2010b002254964b040515820c859212d2cb002254964b040
515820c859212d2c20100720b00050b00d7920b8ffff5058041b0559b005
1cb0032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051c
b0032508e12d2c4b505820b80107454459212d2cb002254560442d2c4b53
58b00225b0022545445921212d2c45442db800072c4bb800065058b10101
8e59b801ff85b800441db9000600035f5e2db800082c2020456944b00160
2db800092cb800082a212db8000a2c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db8000b2c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b8000c2c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db8000d2c2020456944b001602020457d691844b00160
2db8000e2cb8000d2a2db8000f2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800102c4b535845441b2121592d0001
00000001000062bf8c8f5f0f3cf50111080000000000a1cd888000000000
c62fe93dfeaafd9c08c0069e00000006000100000000000000010000059c
fd9c00000856feaafbdc08810001000000000000000000000000000000c7
04cd00660000000000fa00000200000002aa00dd0400fffa06aa00810639
006002aa005e02aa00600464005a02000058020000890239fff20400003b
040000a00400003d0400003b040000330400002b04000054040000390400
00520400004c023900a002390079046400600464005804640060038d007d
02aa005402aa00540400ffee03d7009e019a00a003d7009e0333007903ae
00ae0464005c05b4006d0464005a0464005804640058049c009603f4007f
05b4004a0696003d046400230231ff480625006605b400d50464ffe30400
ffec0464001f04e5002b080000d90464005803f400060156feaa06520071
046400580464006d0464005804d3011d07e5007307e5007304d3011d0856
00ac05b400370625009806250098057d0252057d008f05c7fff605560031
04d3003504e3002904e3002905c7002b05ee005802aa003905c7003f057d
001d071d003f05c700270529007105c700560625002f0473002f04bc0012
04e300210585001b061b004605c70019065c0002050c004604640089034a
000203f4004803f4002704d30012042b005e02a2009c0464000e04640023
042b000003f20021046400420464007d04d30048038300540383ffcf049c
fff8042b003304640014057dfff8057d00460200008901fa0083034a0093
0606007306060021060600cd0606008105b400c90400049c038300140625
0025062500250464005805b4003705b4003705b4003705b4003705b40037
04d300b207e5004407e5004404d300b20856007d0544004a05b4003704d3
00a604d300a40625008d06e7014c06960050057d025206960127031200be
031200be031200810312008105b400480464004a0400009102a2003502a2
0035050c001205b4fff604d3003d0383006d05b400310312008d0312008d
031200250312002507e5013f03f401b603f4005a03f401b603f401b603f4
006603f401b603f4006604f6ffec04d3022d0800ff7f0312008d031200be
031201fc031201cd0652006206520062071f01350652004806520048064a
00c1057d005e065c003d0464001f0544007d05f4ffb20200fff202007fff
02007fff02007fff02007fff02007fff0000002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000a000a0
00a000a000a000a000a000a000a000a000a000a000a000a000a000010000
00c7007a0004000000000002001000400011000007e80810000100010000
003f02fa00010000000000000036000900010000000000010006003f0001
000000000002000700450001000000000003001b004c0001000000000004
0006006700010000000000050007006d0001000000000006000600740001
0000000001000018007a0001000000000101000c00920001000000000102
000c009e0001000000000103000900aa0001000000000104001000b30001
000000000105000c00c30001000000000106000e00cf0001000000000107
000900000001000000000108001500dd0001000000000109001500f20001
0000000101080015010700010000000101090015011c0001000000020108
0013013100010000000201090016014400010000000301080015015a0001
0000000301090015016f0001000000040108001101840001000000040109
001201950001000000050108001201a70001000000050109001101b90001
000000060108001901ca0001000000060109001401e30001000000070108
001001f700010000000701090014020700010000000801080017021b0001
000000080109001302320001000000090108001302450001000000090109
0013025800010000000d01080015026b00010000000d0109001502800001
0001000b01080012029500010001000b0109000802a70001000200130108
000a02af0001000200130109000802b90001000300170108000c02c10001
000300170109000902cd00010004000c0000004602d600010004001f0000
0046031c0001001900210108000c036200010019002101090008036e0003
000104040002000603760003000104060002000e037c0003000104070002
000c038a0003000104090002000e039600030001040b0002001003a40003
0001040c0002000c03b40003000104100002001003c00003000104110002
000a03d00003000104120002000603da0003000104130002001003e00003
000104140002000c03f00003000104160002000c03fc0003000104190002
000e040800030001041d0002000c04160003000108040002000604220003
00010c0a0002000c0428494e56495349424c45a920313939302d39392041
70706c6520436f6d707574657220496e632e20a920313939302d39312042
697473747265616d20496e632e53796d626f6c526567756c617253796d62
6f6c3b20362e31643765333b20323030392d30352d313253796d626f6c36
2e316437653353796d626f6c416c6c205479706f67726170686963204665
617475726573416c6c204665617475726573416c6c204665617475726573
494e56495349424c45496e697469616c204361706974616c73416c6c2043
61706974616c73416c6c204c6f7765722043617365556e69636f64652064
65636f6d706f736974696f6e43616e6f6e6963616c20636f6d706f736974
696f6e448e636f6d706f736974696f6e20556e69636f6465436f6d706f73
6974696f6e2063616e6f6e69717565496e20556e69636f6465207a65726c
6567656e616e65726b616e6e7465204b6f6d706f736974696f6e53636f6d
706f73697a696f6e6520756e69636f6465436f6d706f73697a696f6e6520
63616e6f6e696361556e69636f64652d73706c697473696e674b6c617373
69656b65207765657267617665556e69636f64652d7570706c9a736e696e
674b616e736c696b6f6d706f736974696f6e446573636f6d706f73696369
976e20646520556e69636f6465436f6d706f73696369976e2063616e976e
696361556e69636f64656f706cbf736e696e674b616e6f6e69736b206b6f
6d706f736974696f6e4465636f6d706f73698d8b6f20646520556e69636f
6465436f6d706f73698d8b6f204f72746f646f7861556e69636f64652d61
74736b696c6c656c73654b616e6f6e69736b206f707062796767696e6755
6e69636f6465206465636f6d706f736974696f6e4b616e6f6f6e696e656e
206b6f6b6f6f6e70616e6f95aa89f082b382ea82bd20556e69636f646590
b38b4b8d8790acb2cea440bd58a4c0b8d1bcd0b7c7b2d5a658556e69636f
646520bad0bcaeb1e2babb20b1b8bcba436f707972696768742031393930
2d3938204170706c6520436f6d707574657220496e632e20436f70797269
67687420313939302d39312042697473747265616d20496e632e436f7079
726967687420313939302d3938204170706c6520436f6d70757465722049
6e632e20436f7079726967687420313939302d3931204269747374726561
6d20496e632e556e69636f646520b7d6bde2b9e6b7b6c5c5d7d66a196e96
9ad4004f007200640069006e00e60072004e006f0072006d0061006c0052
006500670075006c00610072004e006f0072006d00610061006c0069004e
006f0072006d0061006c005200650067006f006c00610072006530ec30ae
30e530e930fcc77cbc18ccb40052006500670075006c006900650072004e
006f0072006d0061006c004e006f0072006d0061006c041e0431044b0447
043d044b0439004e006f0072006d0061006c5e3889c44f53004e006f0072
006d0061006c0000b800072b41ff0280010500fe0003010400fe00030103
007d0003010200fe0003010100fe0003010000fe000300ff00fe000300fe
00fe000300fd00fe000300fc00fe000300fb00fe000300fa00fe000300f8
00fe000300f700fe000300f600fe000300f500fe000300f400fe000300f3
00fe000300f200fe000300f100fe000300f000fe000300ef00fe000300ee
00fe000300ed00fe000300ec00fe000300eb0000000300ea00fe000300e9
00e80064000500e900fe000300e80064000300e700fe000300e600fe0003
00e500fe000300e400fe000300e300fe000300e200fe000300e100fe0003
00df00fe000300de00fe000300dc00fe000300db00fe000300da00fe0003
00d900fe000300d800fe000300d700fe000300d60084001d000500d60023
000300d200fe000300d20023000400d100fe000300d000fe000300d00023
000400cf00fe000300ce00fe000300cc00fe000300cb00c8000300ca00fe
000300c900fe000300c800fe000300c700fe000300c60064000300c500fe
000300c400fe000300c300fe000300c100fe000300bf00fe000300be00fe
000300bd00fe000300bc00fe000300bb00fe000300ba00b9004f000500ba
00fe000300baffd0000400b9004f000300b800b7000e000500b800160003
00b80080000400b700b60006000500b7000e000300b70040000400b60006
000300b50032000300b40082000341ff00b300a00033000500b3005c0003
00b30040000400b200fe000300b10064000300b000af00ba000500b000fe
000300af00ae0076000500af00ba000300af0080000400ae00a000330005
00ae0076000300ae0040000400ab004b000300aa00fe000300a900fe0003
00a800fe000300a70064000300a6003a000300a50064000300a400fe0003
00a3005c000300a20064000300a100a00033000500a1003f000300a10040
000400a000330003009f003a0003009e00410003009d00d20003009c00fe
0003009b004b0003009a00fe0003009900fe00030098007d000300970038
0003009600fe0003009500fe00030094003a00030093007d00030092007d
0003009100640003009000fe0003008f00fa0003008e003a0003008d007d
0003008c007d0003008b00c80003008a00fe0003008900fe000300880028
00030088fff00004008700fe0003008600fe000300850084001d00050085
003e00030084001d00030083008200330005008300fe00030083ffd00004
0082003300030081008000dc0005008100fe0003008100c000040080007f
008c0005008000dc0003008000800004007f007e003c0005007f008c0003
007f00400004007e003c0003007d00fe0003007c00fe0003007b007a003c
0005007b00fe0003007bffd00004007a003c0003007900fe0003007800fe
0003007700fe0003007600640003007541ff00fe00030073007200450005
007300fe00030073ffd000040072004500030071007000ba0005007100fe
00030070006f00760005007000ba0003007000800004006f006e00260005
006f00760003006f00400004006e00260003006b00fe0003006800fe0003
006700fe0003006500fe0003006300fe0003005f00fe0003005e00fe0003
005d00fe0003005c00fe0003005b005a00640005005b00fe0003005a0064
0003005900fe0003005800fe0003005700fe0003005600fe0003005500fe
0003005400fe00030053007d0003005200fe0003005000fe0003004f00fe
0003004e00fe0003004d00fe0003004c00fe0003004b00fe00030048ffe0
0004004700640003004600fe0003004400230004004300fe0003004200fe
0003004100fe0003004000260003003f00fe0003003e00fe0003003d00fe
0003003c00fe0003003b00fe0003003a00fe0003003900430003003800fe
0003003700fe0003003400fe0003003300fe0003003200fe000300310034
0003003000fe0003002f00fe0003002e00fe0003002d00fe0003002c0048
0003002b00fe0003002a00fe0003002900fe000300280027003a00050028
00fe00030027003a0003002600fe0003002500fe00030024000f00030023
001b0003002200960003002100fe0003002000550003001f003a0003001e
00fe0003001d003a0003001c003a0003001b417600640003001a00640003
001900480003001800fe0003001700fe0003001600fe0003001500fe0003
0015001000040014001100250005001400fe000300130012004b00050013
0096000300120011002500050012004b0003001100250003001000fe0003
001000100004000f00fa0003000e00fe0003000d00fe0003000c00fe0003
000b00fe0003000a00fe0003000900fe0003000800fe0003000700350003
000600ce0003000500fe0003000400fe0003000300fe00030002001d0003
0002001000040001006400030060001b0060001d0080000d0090000d00a0
000d00b0000d00c0000d00070001014c858d01732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b1d00>
[321 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 96 <00010089fe4e040405830035005f4036201d132c1017230b0935000d0313
17039b32179b0d091d9b2621b13273365b046b046a2c0310092c35000520
1a192906192f202c223610dcecd4e4d4e4111739315d0010e4e4d4ecd4c4
ec10ee10c41112393911393912393911123930251e013332363534262706
070623222635343633321716173e01353426232206151123111012333216
151406071e011514062322262701a00e6a44697a7574070d4c271d1f2022
1b52120a4241705f7164b4ddcba3ca8d86bbbee3aa6f930ba4394abba1a2
ca2502062122201f1c1e07041c7c628095b1d2fa8904b80131014caa8b62
982d2ec895bdf36553000000>KHOAAA+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>KHOAAA+Symbol AddT42Char 
KHOAAA+Symbol /CharStrings get begin
/beta 96 def
end
KHOAAA+Symbol /Encoding get
dup 98 /beta put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAO+Symbol /KHOAAA+Symbol findfont ct_VMDictPut/MOQTAO+Symbol*1 [98{/.notdef}rp /beta 157{/.notdef}rp]MOQTAO+Symbol nfMOQTAO+Symbol*1 [20 0 0 -20 0 0 ]msf257.618 35.313 mo(b)shtrue set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 1948 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>SBMBAA+Helvetica AddT42Char 
1 2248 32 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/six 25 def
/equal 32 def
end
SBMBAA+Helvetica /Encoding get
dup 54 /six put
dup 61 /equal put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six 6{/.notdef}rp /equal 24{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 20{/.notdef}rp /r 141{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf268.598 35.313 mo( = 6.0)[5.56 11.68 5.56 11.12 5.56 0 ]xsh4 ml
579.601 43.0538 mo
585.801 43.0538 li
579.601 65.3538 mo
585.801 65.3538 li
582.702 65.3538 mo
582.702 43.0538 li
534.202 64.6538 mo
540.402 64.6538 li
534.202 77.2538 mo
540.402 77.2538 li
537.301 77.2538 mo
537.301 64.6538 li
531.001 67.9538 mo
537.202 67.9538 li
531.001 78.3538 mo
537.202 78.3538 li
534.101 78.3538 mo
534.101 67.9538 li
513.001 75.8538 mo
519.202 75.8538 li
513.001 82.4538 mo
519.202 82.4538 li
516.101 82.4538 mo
516.101 75.8538 li
488.801 87.6538 mo
495.001 87.6538 li
488.801 94.7538 mo
495.001 94.7538 li
491.902 94.7538 mo
491.902 87.6538 li
475.902 96.1538 mo
482.101 96.1538 li
475.902 100.154 mo
482.101 100.154 li
479.001 100.154 mo
479.001 96.1538 li
473.202 95.4538 mo
479.402 95.4538 li
473.202 99.7538 mo
479.402 99.7538 li
476.301 99.7538 mo
476.301 95.4538 li
452.301 106.954 mo
458.501 106.954 li
452.301 110.554 mo
458.501 110.554 li
455.402 110.554 mo
455.402 106.954 li
450.902 108.054 mo
457.101 108.054 li
450.902 110.854 mo
457.101 110.854 li
454.001 110.854 mo
454.001 108.054 li
443.402 111.954 mo
449.601 111.954 li
443.402 115.954 mo
449.601 115.954 li
446.501 115.954 mo
446.501 111.954 li
438.801 114.554 mo
445.001 114.554 li
438.801 117.054 mo
445.001 117.054 li
441.902 117.054 mo
441.902 114.554 li
426.101 120.254 mo
432.301 120.254 li
426.101 122.054 mo
432.301 122.054 li
429.202 122.054 mo
429.202 120.254 li
409.001 129.454 mo
415.202 129.454 li
409.001 131.354 mo
415.202 131.354 li
412.101 131.354 mo
412.101 129.454 li
401.801 133.554 mo
408.001 133.554 li
401.801 135.154 mo
408.001 135.154 li
404.902 135.154 mo
404.902 133.554 li
399.901 134.754 mo
406.101 134.754 li
399.901 136.054 mo
406.101 136.054 li
403.001 136.054 mo
403.001 134.754 li
398.001 134.854 mo
404.202 134.854 li
398.001 137.154 mo
404.202 137.154 li
401.102 137.154 mo
401.102 134.854 li
392.301 138.454 mo
398.501 138.454 li
392.301 139.754 mo
398.501 139.754 li
395.401 139.754 mo
395.401 138.454 li
373.702 148.254 mo
379.901 148.254 li
373.702 149.654 mo
379.901 149.654 li
376.801 149.654 mo
376.801 148.254 li
373.702 149.054 mo
379.901 149.054 li
373.702 150.054 mo
379.901 150.054 li
376.801 150.054 mo
376.801 149.054 li
364.702 153.754 mo
370.901 153.754 li
364.702 154.654 mo
370.901 154.654 li
367.801 154.654 mo
367.801 153.754 li
352.601 160.154 mo
358.801 160.154 li
352.601 161.354 mo
358.801 161.354 li
355.702 161.354 mo
355.702 160.154 li
347.501 164.154 mo
353.702 164.154 li
347.501 164.854 mo
353.702 164.854 li
350.601 164.854 mo
350.601 164.154 li
344.801 165.054 mo
351.001 165.054 li
344.801 165.854 mo
351.001 165.854 li
347.901 165.854 mo
347.901 165.054 li
333.601 172.054 mo
339.801 172.054 li
333.601 172.554 mo
339.801 172.554 li
336.702 172.554 mo
336.702 172.054 li
327.601 175.854 mo
333.801 175.854 li
327.601 176.254 mo
333.801 176.254 li
330.702 176.254 mo
330.702 175.854 li
321.301 180.454 mo
327.501 180.454 li
321.301 180.854 mo
327.501 180.854 li
324.401 180.854 mo
324.401 180.454 li
307.202 188.954 mo
313.401 188.954 li
307.202 189.454 mo
313.401 189.454 li
310.301 189.454 mo
310.301 188.954 li
295.101 198.154 mo
301.301 198.154 li
295.101 198.454 mo
301.301 198.454 li
298.202 198.454 mo
298.202 198.154 li
295.101 199.754 mo
301.301 199.754 li
295.101 199.954 mo
301.301 199.954 li
298.202 199.954 mo
298.202 199.754 li
290.601 202.154 mo
296.801 202.154 li
290.601 202.454 mo
296.801 202.454 li
293.702 202.454 mo
293.702 202.154 li
280.601 210.454 mo
286.801 210.454 li
280.601 210.654 mo
286.801 210.654 li
283.702 210.654 mo
283.702 210.454 li
275.001 217.054 mo
281.202 217.054 li
275.001 217.154 mo
281.202 217.154 li
278.101 217.154 mo
278.101 217.054 li
268.801 226.454 mo
275.001 226.454 li
268.801 226.554 mo
275.001 226.554 li
271.901 226.554 mo
271.901 226.454 li
261.801 229.954 mo
268.001 229.954 li
261.801 230.054 mo
268.001 230.054 li
264.901 230.054 mo
264.901 229.954 li
253.501 244.154 mo
259.702 244.154 li
253.501 244.254 mo
259.702 244.254 li
256.601 244.254 mo
256.601 244.154 li
242.601 274.354 mo
248.801 274.354 li
242.601 274.454 mo
248.801 274.454 li
245.702 274.454 mo
245.702 274.354 li
385.501 25.5538 mo
385.501 31.7538 li
331.202 25.5538 mo
331.202 31.7538 li
331.202 28.6538 mo
385.501 28.6538 li
@
242.551 277.604 mo
248.851 277.604 li
248.851 271.303 li
242.551 271.303 li
cp
f
253.451 247.404 mo
259.751 247.404 li
259.751 241.104 li
253.451 241.104 li
cp
f
261.751 233.104 mo
268.051 233.104 li
268.051 226.803 li
261.751 226.803 li
cp
f
268.751 229.604 mo
275.051 229.604 li
275.051 223.303 li
268.751 223.303 li
cp
f
274.951 220.204 mo
281.251 220.204 li
281.251 213.904 li
274.951 213.904 li
cp
f
280.551 213.704 mo
286.851 213.704 li
286.851 207.404 li
280.551 207.404 li
cp
f
290.551 205.503 mo
296.851 205.503 li
296.851 199.203 li
290.551 199.203 li
cp
f
295.051 203.003 mo
301.351 203.003 li
301.351 196.703 li
295.051 196.703 li
cp
f
295.051 201.404 mo
301.351 201.404 li
301.351 195.104 li
295.051 195.104 li
cp
f
307.151 192.404 mo
313.451 192.404 li
313.451 186.104 li
307.151 186.104 li
cp
f
321.251 183.804 mo
327.551 183.804 li
327.551 177.504 li
321.251 177.504 li
cp
f
327.551 179.204 mo
333.851 179.204 li
333.851 172.904 li
327.551 172.904 li
cp
f
333.551 175.503 mo
339.851 175.503 li
339.851 169.203 li
333.551 169.203 li
cp
f
344.751 168.604 mo
351.051 168.604 li
351.051 162.304 li
344.751 162.304 li
cp
f
347.451 167.604 mo
353.751 167.604 li
353.751 161.304 li
347.451 161.304 li
cp
f
352.551 163.904 mo
358.851 163.904 li
358.851 157.604 li
352.551 157.604 li
cp
f
364.651 157.404 mo
370.951 157.404 li
370.951 151.104 li
364.651 151.104 li
cp
f
373.651 152.704 mo
379.951 152.704 li
379.951 146.404 li
373.651 146.404 li
cp
f
373.651 152.104 mo
379.951 152.104 li
379.951 145.804 li
373.651 145.804 li
cp
f
392.251 142.304 mo
398.551 142.304 li
398.551 136.004 li
392.251 136.004 li
cp
f
397.951 139.104 mo
404.251 139.104 li
404.251 132.804 li
397.951 132.804 li
cp
f
399.852 138.503 mo
406.152 138.503 li
406.152 132.203 li
399.852 132.203 li
cp
f
401.751 137.503 mo
408.051 137.503 li
408.051 131.203 li
401.751 131.203 li
cp
f
408.951 133.604 mo
415.251 133.604 li
415.251 127.304 li
408.951 127.304 li
cp
f
426.051 124.304 mo
432.351 124.304 li
432.351 118.004 li
426.051 118.004 li
cp
f
438.751 119.003 mo
445.051 119.003 li
445.051 112.703 li
438.751 112.703 li
cp
f
443.351 117.104 mo
449.652 117.104 li
449.652 110.804 li
443.351 110.804 li
cp
f
450.851 112.604 mo
457.152 112.604 li
457.152 106.304 li
450.851 106.304 li
cp
f
452.251 111.904 mo
458.551 111.904 li
458.551 105.604 li
452.251 105.604 li
cp
f
473.151 100.804 mo
479.451 100.804 li
479.451 94.504 li
473.151 94.504 li
cp
f
475.851 101.304 mo
482.152 101.304 li
482.152 95.004 li
475.851 95.004 li
cp
f
488.751 94.304 mo
495.051 94.304 li
495.051 88.004 li
488.751 88.004 li
cp
f
512.951 82.304 mo
519.251 82.304 li
519.251 76.004 li
512.951 76.004 li
cp
f
530.951 76.304 mo
537.251 76.304 li
537.251 70.004 li
530.951 70.004 li
cp
f
534.151 74.104 mo
540.451 74.104 li
540.451 67.804 li
534.151 67.804 li
cp
f
579.551 57.304 mo
585.851 57.304 li
585.851 51.004 li
579.551 51.004 li
cp
f
355.151 31.804 mo
361.451 31.804 li
361.451 25.504 li
355.151 25.504 li
cp
f
0 0 1 rgb
MOQTAO+Symbol*1 [20 0 0 -20 0 0 ]msf257.618 55.3209 mo(b)shMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf268.598 55.3209 mo( = 6.2)[5.56 11.68 5.56 11.12 5.56 0 ]xsh0.5 lw
10 ml
622.701 18.8536 mo
628.9 18.8536 li
622.701 29.7536 mo
628.9 29.7536 li
625.801 29.7536 mo
625.801 18.8536 li
618.6 20.0536 mo
624.801 20.0536 li
618.6 31.1536 mo
624.801 31.1536 li
621.701 31.1536 mo
621.701 20.0536 li
614.501 12.3536 mo
620.701 12.3536 li
614.501 29.0536 mo
620.701 29.0536 li
617.6 29.0536 mo
617.6 12.3536 li
595.6 29.4536 mo
601.801 29.4536 li
595.6 37.3536 mo
601.801 37.3536 li
598.701 37.3536 mo
598.701 29.4536 li
591.701 33.1536 mo
597.901 33.1536 li
591.701 41.6536 mo
597.901 41.6536 li
594.801 41.6536 mo
594.801 33.1536 li
581.301 30.2536 mo
587.501 30.2536 li
581.301 42.8536 mo
587.501 42.8536 li
584.401 42.8536 mo
584.401 30.2536 li
568.501 44.8536 mo
574.701 44.8536 li
568.501 50.8536 mo
574.701 50.8536 li
571.6 50.8536 mo
571.6 44.8536 li
561.201 46.1536 mo
567.401 46.1536 li
561.201 52.1536 mo
567.401 52.1536 li
564.301 52.1536 mo
564.301 46.1536 li
559.001 56.4536 mo
565.201 56.4536 li
559.001 61.7536 mo
565.201 61.7536 li
562.1 61.7536 mo
562.1 56.4536 li
548.1 50.4536 mo
554.301 50.4536 li
548.1 59.3536 mo
554.301 59.3536 li
551.201 59.3536 mo
551.201 50.4536 li
544.801 59.1536 mo
551.001 59.1536 li
544.801 64.3536 mo
551.001 64.3536 li
547.901 64.3536 mo
547.901 59.1536 li
541.401 60.9536 mo
547.6 60.9536 li
541.401 65.6536 mo
547.6 65.6536 li
544.501 65.6536 mo
544.501 60.9536 li
522.901 72.3536 mo
529.1 72.3536 li
522.901 76.5536 mo
529.1 76.5536 li
526.001 76.5536 mo
526.001 72.3536 li
516.201 76.2536 mo
522.401 76.2536 li
516.201 79.7536 mo
522.401 79.7536 li
519.301 79.7536 mo
519.301 76.2536 li
515.001 71.2536 mo
521.201 71.2536 li
515.001 77.1536 mo
521.201 77.1536 li
518.1 77.1536 mo
518.1 71.2536 li
514.401 74.1536 mo
520.6 74.1536 li
514.401 77.9536 mo
520.6 77.9536 li
517.501 77.9536 mo
517.501 74.1536 li
503.701 78.8536 mo
509.901 78.8536 li
503.701 82.3536 mo
509.901 82.3536 li
506.801 82.3536 mo
506.801 78.8536 li
503.701 81.8536 mo
509.901 81.8536 li
503.701 85.1536 mo
509.901 85.1536 li
506.801 85.1536 mo
506.801 81.8536 li
497.901 82.3536 mo
504.1 82.3536 li
497.901 85.4536 mo
504.1 85.4536 li
501.001 85.4536 mo
501.001 82.3536 li
487.301 89.0536 mo
493.501 89.0536 li
487.301 91.9536 mo
493.501 91.9536 li
490.401 91.9536 mo
490.401 89.0536 li
484.6 91.4536 mo
490.801 91.4536 li
484.6 94.0536 mo
490.801 94.0536 li
487.701 94.0536 mo
487.701 91.4536 li
481.801 89.1536 mo
488.001 89.1536 li
481.801 93.0536 mo
488.001 93.0536 li
484.901 93.0536 mo
484.901 89.1536 li
473.401 98.1536 mo
479.6 98.1536 li
473.401 100.354 mo
479.6 100.354 li
476.501 100.354 mo
476.501 98.1536 li
465.401 100.854 mo
471.6 100.854 li
465.401 102.854 mo
471.6 102.854 li
468.501 102.854 mo
468.501 100.854 li
460.201 103.854 mo
466.401 103.854 li
460.201 106.054 mo
466.401 106.054 li
463.301 106.054 mo
463.301 103.854 li
451.001 107.554 mo
457.201 107.554 li
451.001 109.754 mo
457.201 109.754 li
454.1 109.754 mo
454.1 107.554 li
448.6 108.554 mo
454.801 108.554 li
448.6 111.154 mo
454.801 111.154 li
451.701 111.154 mo
451.701 108.554 li
446.201 109.754 mo
452.401 109.754 li
446.201 111.754 mo
452.401 111.754 li
449.301 111.754 mo
449.301 109.754 li
446.201 110.554 mo
452.401 110.554 li
446.201 112.154 mo
452.401 112.154 li
449.301 112.154 mo
449.301 110.554 li
433.1 117.854 mo
439.301 117.854 li
433.1 119.454 mo
439.301 119.454 li
436.201 119.454 mo
436.201 117.854 li
430.501 119.354 mo
436.701 119.354 li
430.501 120.854 mo
436.701 120.854 li
433.6 120.854 mo
433.6 119.354 li
427.1 120.054 mo
433.301 120.054 li
427.1 121.454 mo
433.301 121.454 li
430.201 121.454 mo
430.201 120.054 li
415.501 125.954 mo
421.701 125.954 li
415.501 127.754 mo
421.701 127.754 li
418.6 127.754 mo
418.6 125.954 li
407.901 129.954 mo
414.1 129.954 li
407.901 131.054 mo
414.1 131.054 li
411.001 131.054 mo
411.001 129.954 li
406.001 131.654 mo
412.201 131.654 li
406.001 132.854 mo
412.201 132.854 li
409.1 132.854 mo
409.1 131.654 li
404.1 132.554 mo
410.301 132.554 li
404.1 133.954 mo
410.301 133.954 li
407.201 133.954 mo
407.201 132.554 li
388.801 140.054 mo
395.001 140.054 li
388.801 141.354 mo
395.001 141.354 li
391.901 141.354 mo
391.901 140.054 li
388.801 140.354 mo
395.001 140.354 li
388.801 141.254 mo
395.001 141.254 li
391.901 141.254 mo
391.901 140.354 li
387.701 141.454 mo
393.901 141.454 li
387.701 142.354 mo
393.901 142.354 li
390.801 142.354 mo
390.801 141.454 li
382.301 143.154 mo
388.501 143.154 li
382.301 144.454 mo
388.501 144.454 li
385.401 144.454 mo
385.401 143.154 li
378.901 145.754 mo
385.101 145.754 li
378.901 146.754 mo
385.101 146.754 li
382.001 146.754 mo
382.001 145.754 li
369.601 150.954 mo
375.801 150.954 li
369.601 151.754 mo
375.801 151.754 li
372.701 151.754 mo
372.701 150.954 li
357.201 157.954 mo
363.401 157.954 li
357.201 158.654 mo
363.401 158.654 li
360.301 158.654 mo
360.301 157.954 li
351.801 161.354 mo
358.001 161.354 li
351.801 161.954 mo
358.001 161.954 li
354.901 161.954 mo
354.901 161.354 li
350.501 162.154 mo
356.701 162.154 li
350.501 162.754 mo
356.701 162.754 li
353.601 162.754 mo
353.601 162.154 li
349.101 162.254 mo
355.301 162.254 li
349.101 163.054 mo
355.301 163.054 li
352.201 163.054 mo
352.201 162.254 li
344.901 165.454 mo
351.101 165.454 li
344.901 165.954 mo
351.101 165.954 li
348.001 165.954 mo
348.001 165.454 li
331.301 173.354 mo
337.501 173.354 li
331.301 173.954 mo
337.501 173.954 li
334.401 173.954 mo
334.401 173.354 li
331.301 173.754 mo
337.501 173.754 li
331.301 174.254 mo
337.501 174.254 li
334.401 174.254 mo
334.401 173.754 li
324.801 177.654 mo
331.001 177.654 li
324.801 178.054 mo
331.001 178.054 li
327.901 178.054 mo
327.901 177.654 li
315.901 183.154 mo
322.101 183.154 li
315.901 183.654 mo
322.101 183.654 li
319.001 183.654 mo
319.001 183.154 li
312.201 186.454 mo
318.401 186.454 li
312.201 186.754 mo
318.401 186.754 li
315.301 186.754 mo
315.301 186.454 li
310.201 187.354 mo
316.401 187.354 li
310.201 187.654 mo
316.401 187.654 li
313.301 187.654 mo
313.301 187.354 li
302.101 193.354 mo
308.301 193.354 li
302.101 193.654 mo
308.301 193.654 li
305.201 193.654 mo
305.201 193.354 li
297.701 196.554 mo
303.901 196.554 li
297.701 196.754 mo
303.901 196.754 li
300.801 196.754 mo
300.801 196.554 li
293.001 200.754 mo
299.201 200.754 li
293.001 200.954 mo
299.201 200.954 li
296.101 200.954 mo
296.101 200.754 li
282.801 208.854 mo
289.001 208.854 li
282.801 209.054 mo
289.001 209.054 li
285.901 209.054 mo
285.901 208.854 li
273.901 217.454 mo
280.101 217.454 li
273.901 217.654 mo
280.101 217.654 li
277.001 217.654 mo
277.001 217.454 li
273.901 218.954 mo
280.101 218.954 li
273.901 219.154 mo
280.101 219.154 li
277.001 219.154 mo
277.001 218.954 li
270.601 221.354 mo
276.801 221.354 li
270.601 221.454 mo
276.801 221.454 li
273.701 221.454 mo
273.701 221.354 li
263.301 229.754 mo
269.501 229.754 li
263.301 229.854 mo
269.501 229.854 li
266.401 229.854 mo
266.401 229.754 li
259.201 236.454 mo
265.401 236.454 li
259.201 236.554 mo
265.401 236.554 li
262.301 236.554 mo
262.301 236.454 li
254.701 246.654 mo
260.901 246.654 li
254.701 246.654 mo
260.901 246.654 li
249.601 250.154 mo
255.801 250.154 li
249.601 250.254 mo
255.801 250.254 li
252.701 250.254 mo
252.701 250.154 li
243.501 266.154 mo
249.701 266.154 li
243.501 266.254 mo
249.701 266.254 li
246.601 266.254 mo
246.601 266.154 li
235.601 301.554 mo
241.801 301.554 li
235.601 301.654 mo
241.801 301.654 li
238.701 301.654 mo
238.701 301.554 li
385.501 45.5536 mo
385.501 51.7536 li
331.201 45.5536 mo
331.201 51.7536 li
331.201 48.6536 mo
385.501 48.6536 li
@
gsave
0 -99.352 mo
792 -99.352 li
792 512.648 li
0 512.648 li
cp
clp
241.851 301.654 mo
241.851 299.915 240.44 298.504 238.701 298.504 cv
236.962 298.504 235.551 299.915 235.551 301.654 cv
235.551 303.392 236.962 304.803 238.701 304.803 cv
240.44 304.803 241.851 303.392 241.851 301.654 cv
f
249.771 266.254 mo
249.771 264.516 248.36 263.104 246.621 263.104 cv
244.882 263.104 243.471 264.516 243.471 266.254 cv
243.471 267.992 244.882 269.404 246.621 269.404 cv
248.36 269.404 249.771 267.992 249.771 266.254 cv
f
255.771 250.173 mo
255.771 248.435 254.36 247.024 252.621 247.024 cv
250.882 247.024 249.471 248.435 249.471 250.173 cv
249.471 251.912 250.882 253.323 252.621 253.323 cv
254.36 253.323 255.771 251.912 255.771 250.173 cv
f
260.931 246.574 mo
260.931 244.835 259.519 243.424 257.781 243.424 cv
256.042 243.424 254.631 244.835 254.631 246.574 cv
254.631 248.312 256.042 249.723 257.781 249.723 cv
259.519 249.723 260.931 248.312 260.931 246.574 cv
f
265.371 236.494 mo
265.371 234.755 263.96 233.344 262.221 233.344 cv
260.482 233.344 259.071 234.755 259.071 236.494 cv
259.071 238.232 260.482 239.644 262.221 239.644 cv
263.96 239.644 265.371 238.232 265.371 236.494 cv
f
269.571 229.774 mo
269.571 228.035 268.16 226.624 266.421 226.624 cv
264.682 226.624 263.271 228.035 263.271 229.774 cv
263.271 231.512 264.682 232.923 266.421 232.923 cv
268.16 232.923 269.571 231.512 269.571 229.774 cv
f
276.891 221.374 mo
276.891 219.636 275.48 218.224 273.741 218.224 cv
272.002 218.224 270.591 219.636 270.591 221.374 cv
270.591 223.113 272.002 224.524 273.741 224.524 cv
275.48 224.524 276.891 223.113 276.891 221.374 cv
f
280.131 218.973 mo
280.131 217.235 278.72 215.824 276.981 215.824 cv
275.242 215.824 273.831 217.235 273.831 218.973 cv
273.831 220.712 275.242 222.123 276.981 222.123 cv
278.72 222.123 280.131 220.712 280.131 218.973 cv
f
280.131 217.534 mo
280.131 215.795 278.72 214.384 276.981 214.384 cv
275.242 214.384 273.831 215.795 273.831 217.534 cv
273.831 219.272 275.242 220.684 276.981 220.684 cv
278.72 220.684 280.131 219.272 280.131 217.534 cv
f
289.131 208.894 mo
289.131 207.155 287.72 205.744 285.981 205.744 cv
284.242 205.744 282.831 207.155 282.831 208.894 cv
282.831 210.632 284.242 212.043 285.981 212.043 cv
287.72 212.043 289.131 210.632 289.131 208.894 cv
f
299.211 200.854 mo
299.211 199.115 297.8 197.704 296.061 197.704 cv
294.322 197.704 292.911 199.115 292.911 200.854 cv
292.911 202.593 294.322 204.004 296.061 204.004 cv
297.8 204.004 299.211 202.593 299.211 200.854 cv
f
304.011 196.654 mo
304.011 194.915 302.6 193.504 300.861 193.504 cv
299.122 193.504 297.711 194.915 297.711 196.654 cv
297.711 198.393 299.122 199.804 300.861 199.804 cv
302.6 199.804 304.011 198.393 304.011 196.654 cv
f
308.331 193.534 mo
308.331 191.795 306.92 190.384 305.181 190.384 cv
303.442 190.384 302.031 191.795 302.031 193.534 cv
302.031 195.273 303.442 196.684 305.181 196.684 cv
306.92 196.684 308.331 195.273 308.331 193.534 cv
f
316.491 187.534 mo
316.491 185.795 315.079 184.384 313.341 184.384 cv
311.602 184.384 310.191 185.795 310.191 187.534 cv
310.191 189.273 311.602 190.684 313.341 190.684 cv
315.079 190.684 316.491 189.273 316.491 187.534 cv
f
318.411 186.574 mo
318.411 184.835 317 183.424 315.261 183.424 cv
313.522 183.424 312.111 184.835 312.111 186.574 cv
312.111 188.313 313.522 189.724 315.261 189.724 cv
317 189.724 318.411 188.313 318.411 186.574 cv
f
322.131 183.333 mo
322.131 181.594 320.72 180.184 318.981 180.184 cv
317.242 180.184 315.831 181.594 315.831 183.333 cv
315.831 185.073 317.242 186.483 318.981 186.483 cv
320.72 186.483 322.131 185.073 322.131 183.333 cv
f
331.131 177.934 mo
331.131 176.195 329.72 174.784 327.981 174.784 cv
326.242 174.784 324.831 176.195 324.831 177.934 cv
324.831 179.673 326.242 181.084 327.981 181.084 cv
329.72 181.084 331.131 179.673 331.131 177.934 cv
f
337.611 173.974 mo
337.611 172.235 336.2 170.824 334.461 170.824 cv
332.722 170.824 331.311 172.235 331.311 173.974 cv
331.311 175.713 332.722 177.124 334.461 177.124 cv
336.2 177.124 337.611 175.713 337.611 173.974 cv
f
337.611 173.614 mo
337.611 171.875 336.2 170.464 334.461 170.464 cv
332.722 170.464 331.311 171.875 331.311 173.614 cv
331.311 175.353 332.722 176.764 334.461 176.764 cv
336.2 176.764 337.611 175.353 337.611 173.614 cv
f
351.171 165.694 mo
351.171 163.955 349.76 162.544 348.021 162.544 cv
346.282 162.544 344.871 163.955 344.871 165.694 cv
344.871 167.432 346.282 168.844 348.021 168.844 cv
349.76 168.844 351.171 167.432 351.171 165.694 cv
f
355.371 162.574 mo
355.371 160.835 353.96 159.424 352.221 159.424 cv
350.482 159.424 349.071 160.835 349.071 162.574 cv
349.071 164.313 350.482 165.724 352.221 165.724 cv
353.96 165.724 355.371 164.313 355.371 162.574 cv
f
356.811 162.454 mo
356.811 160.715 355.4 159.304 353.661 159.304 cv
351.922 159.304 350.511 160.715 350.511 162.454 cv
350.511 164.193 351.922 165.604 353.661 165.604 cv
355.4 165.604 356.811 164.193 356.811 162.454 cv
f
358.011 161.614 mo
358.011 159.875 356.6 158.464 354.861 158.464 cv
353.122 158.464 351.711 159.875 351.711 161.614 cv
351.711 163.353 353.122 164.764 354.861 164.764 cv
356.6 164.764 358.011 163.353 358.011 161.614 cv
f
363.531 158.374 mo
363.531 156.635 362.12 155.224 360.381 155.224 cv
358.642 155.224 357.231 156.635 357.231 158.374 cv
357.231 160.113 358.642 161.524 360.381 161.524 cv
362.12 161.524 363.531 160.113 363.531 158.374 cv
f
375.771 151.294 mo
375.771 149.555 374.36 148.144 372.621 148.144 cv
370.882 148.144 369.471 149.555 369.471 151.294 cv
369.471 153.033 370.882 154.444 372.621 154.444 cv
374.36 154.444 375.771 153.033 375.771 151.294 cv
f
385.131 146.254 mo
385.131 144.514 383.72 143.104 381.981 143.104 cv
380.242 143.104 378.831 144.514 378.831 146.254 cv
378.831 147.993 380.242 149.404 381.981 149.404 cv
383.72 149.404 385.131 147.993 385.131 146.254 cv
f
388.491 143.733 mo
388.491 141.994 387.079 140.583 385.341 140.583 cv
383.602 140.583 382.191 141.994 382.191 143.733 cv
382.191 145.472 383.602 146.883 385.341 146.883 cv
387.079 146.883 388.491 145.472 388.491 143.733 cv
f
394.011 141.934 mo
394.011 140.195 392.6 138.784 390.861 138.784 cv
389.122 138.784 387.711 140.195 387.711 141.934 cv
387.711 143.673 389.122 145.084 390.861 145.084 cv
392.6 145.084 394.011 143.673 394.011 141.934 cv
f
394.971 140.733 mo
394.971 138.994 393.559 137.583 391.821 137.583 cv
390.082 137.583 388.671 138.994 388.671 140.733 cv
388.671 142.472 390.082 143.883 391.821 143.883 cv
393.559 143.883 394.971 142.472 394.971 140.733 cv
f
394.971 140.733 mo
394.971 138.994 393.559 137.583 391.821 137.583 cv
390.082 137.583 388.671 138.994 388.671 140.733 cv
388.671 142.472 390.082 143.883 391.821 143.883 cv
393.559 143.883 394.971 142.472 394.971 140.733 cv
f
410.331 133.294 mo
410.331 131.555 408.92 130.144 407.181 130.144 cv
405.442 130.144 404.031 131.555 404.031 133.294 cv
404.031 135.033 405.442 136.444 407.181 136.444 cv
408.92 136.444 410.331 135.033 410.331 133.294 cv
f
412.251 132.333 mo
412.251 130.594 410.84 129.184 409.101 129.184 cv
407.362 129.184 405.951 130.594 405.951 132.333 cv
405.951 134.073 407.362 135.483 409.101 135.483 cv
410.84 135.483 412.251 134.073 412.251 132.333 cv
f
414.171 130.414 mo
414.171 128.675 412.76 127.264 411.021 127.264 cv
409.282 127.264 407.871 128.675 407.871 130.414 cv
407.871 132.153 409.282 133.564 411.021 133.564 cv
412.76 133.564 414.171 132.153 414.171 130.414 cv
f
421.731 126.814 mo
421.731 125.074 420.319 123.664 418.581 123.664 cv
416.841 123.664 415.43 125.074 415.43 126.814 cv
415.43 128.553 416.841 129.964 418.581 129.964 cv
420.319 129.964 421.731 128.553 421.731 126.814 cv
f
433.371 120.814 mo
433.371 119.074 431.96 117.664 430.221 117.664 cv
428.482 117.664 427.071 119.074 427.071 120.814 cv
427.071 122.553 428.482 123.964 430.221 123.964 cv
431.96 123.964 433.371 122.553 433.371 120.814 cv
f
436.731 120.094 mo
436.731 118.355 435.319 116.944 433.581 116.944 cv
431.841 116.944 430.43 118.355 430.43 120.094 cv
430.43 121.833 431.841 123.244 433.581 123.244 cv
435.319 123.244 436.731 121.833 436.731 120.094 cv
f
439.371 118.654 mo
439.371 116.915 437.96 115.504 436.221 115.504 cv
434.482 115.504 433.071 116.915 433.071 118.654 cv
433.071 120.393 434.482 121.804 436.221 121.804 cv
437.96 121.804 439.371 120.393 439.371 118.654 cv
f
452.451 111.333 mo
452.451 109.594 451.04 108.184 449.301 108.184 cv
447.562 108.184 446.151 109.594 446.151 111.333 cv
446.151 113.073 447.562 114.483 449.301 114.483 cv
451.04 114.483 452.451 113.073 452.451 111.333 cv
f
452.451 110.733 mo
452.451 108.994 451.04 107.583 449.301 107.583 cv
447.562 107.583 446.151 108.994 446.151 110.733 cv
446.151 112.472 447.562 113.883 449.301 113.883 cv
451.04 113.883 452.451 112.472 452.451 110.733 cv
f
454.851 109.773 mo
454.851 108.034 453.44 106.624 451.702 106.624 cv
449.962 106.624 448.551 108.034 448.551 109.773 cv
448.551 111.513 449.962 112.923 451.702 112.923 cv
453.44 112.923 454.851 111.513 454.851 109.773 cv
f
457.251 108.574 mo
457.251 106.835 455.84 105.424 454.101 105.424 cv
452.362 105.424 450.951 106.835 450.951 108.574 cv
450.951 110.313 452.362 111.724 454.101 111.724 cv
455.84 111.724 457.251 110.313 457.251 108.574 cv
f
466.491 104.974 mo
466.491 103.235 465.08 101.824 463.341 101.824 cv
461.602 101.824 460.191 103.235 460.191 104.974 cv
460.191 106.713 461.602 108.124 463.341 108.124 cv
465.08 108.124 466.491 106.713 466.491 104.974 cv
f
471.651 101.854 mo
471.651 100.115 470.24 98.7036 468.501 98.7036 cv
466.761 98.7036 465.35 100.115 465.35 101.854 cv
465.35 103.593 466.761 105.004 468.501 105.004 cv
470.24 105.004 471.651 103.593 471.651 101.854 cv
f
479.691 99.2134 mo
479.691 97.4744 478.28 96.0634 476.541 96.0634 cv
474.801 96.0634 473.39 97.4744 473.39 99.2134 cv
473.39 100.952 474.801 102.363 476.541 102.363 cv
478.28 102.363 479.691 100.952 479.691 99.2134 cv
f
488.091 91.1734 mo
488.091 89.4344 486.68 88.0234 484.942 88.0234 cv
483.202 88.0234 481.791 89.4344 481.791 91.1734 cv
481.791 92.9124 483.202 94.3234 484.942 94.3234 cv
486.68 94.3234 488.091 92.9124 488.091 91.1734 cv
f
490.851 92.7334 mo
490.851 90.9944 489.44 89.5834 487.702 89.5834 cv
485.962 89.5834 484.551 90.9944 484.551 92.7334 cv
484.551 94.4724 485.962 95.8834 487.702 95.8834 cv
489.44 95.8834 490.851 94.4724 490.851 92.7334 cv
f
493.611 90.4537 mo
493.611 88.7147 492.2 87.3037 490.461 87.3037 cv
488.721 87.3037 487.31 88.7147 487.31 90.4537 cv
487.31 92.1927 488.721 93.6037 490.461 93.6037 cv
492.2 93.6037 493.611 92.1927 493.611 90.4537 cv
f
504.171 83.9737 mo
504.171 82.2347 502.76 80.8237 501.021 80.8237 cv
499.282 80.8237 497.871 82.2347 497.871 83.9737 cv
497.871 85.7127 499.282 87.1237 501.021 87.1237 cv
502.76 87.1237 504.171 85.7127 504.171 83.9737 cv
f
509.931 83.3736 mo
509.931 81.6346 508.52 80.2236 506.782 80.2236 cv
505.042 80.2236 503.631 81.6346 503.631 83.3736 cv
503.631 85.1126 505.042 86.5236 506.782 86.5236 cv
508.52 86.5236 509.931 85.1126 509.931 83.3736 cv
f
509.931 80.4937 mo
509.931 78.7547 508.52 77.3437 506.782 77.3437 cv
505.042 77.3437 503.631 78.7547 503.631 80.4937 cv
503.631 82.2327 505.042 83.6437 506.782 83.6437 cv
508.52 83.6437 509.931 82.2327 509.931 80.4937 cv
f
520.731 76.0538 mo
520.731 74.3148 519.319 72.9038 517.581 72.9038 cv
515.841 72.9038 514.43 74.3148 514.43 76.0538 cv
514.43 77.7928 515.841 79.2038 517.581 79.2038 cv
519.319 79.2038 520.731 77.7928 520.731 76.0538 cv
f
521.211 74.1338 mo
521.211 72.3948 519.8 70.9838 518.061 70.9838 cv
516.322 70.9838 514.911 72.3948 514.911 74.1338 cv
514.911 75.8728 516.322 77.2838 518.061 77.2838 cv
519.8 77.2838 521.211 75.8728 521.211 74.1338 cv
f
522.411 77.9737 mo
522.411 76.2347 521 74.8237 519.261 74.8237 cv
517.522 74.8237 516.111 76.2347 516.111 77.9737 cv
516.111 79.7127 517.522 81.1237 519.261 81.1237 cv
521 81.1237 522.411 79.7127 522.411 77.9737 cv
f
529.131 74.4937 mo
529.131 72.7547 527.72 71.3437 525.982 71.3437 cv
524.242 71.3437 522.831 72.7547 522.831 74.4937 cv
522.831 76.2327 524.242 77.6437 525.982 77.6437 cv
527.72 77.6437 529.131 76.2327 529.131 74.4937 cv
f
547.611 63.2134 mo
547.611 61.4744 546.2 60.0634 544.461 60.0634 cv
542.721 60.0634 541.31 61.4744 541.31 63.2134 cv
541.31 64.9524 542.721 66.3634 544.461 66.3634 cv
546.2 66.3634 547.611 64.9524 547.611 63.2134 cv
f
550.971 61.7735 mo
550.971 60.0345 549.56 58.6235 547.822 58.6235 cv
546.082 58.6235 544.671 60.0345 544.671 61.7735 cv
544.671 63.5125 546.082 64.9235 547.822 64.9235 cv
549.56 64.9235 550.971 63.5125 550.971 61.7735 cv
f
554.331 54.8135 mo
554.331 53.0745 552.92 51.6635 551.181 51.6635 cv
549.442 51.6635 548.031 53.0745 548.031 54.8135 cv
548.031 56.5525 549.442 57.9635 551.181 57.9635 cv
552.92 57.9635 554.331 56.5525 554.331 54.8135 cv
f
565.251 59.1338 mo
565.251 57.3948 563.84 55.9838 562.101 55.9838 cv
560.362 55.9838 558.951 57.3948 558.951 59.1338 cv
558.951 60.8728 560.362 62.2838 562.101 62.2838 cv
563.84 62.2838 565.251 60.8728 565.251 59.1338 cv
f
567.531 49.1734 mo
567.531 47.4344 566.12 46.0234 564.381 46.0234 cv
562.642 46.0234 561.231 47.4344 561.231 49.1734 cv
561.231 50.9124 562.642 52.3234 564.381 52.3234 cv
566.12 52.3234 567.531 50.9124 567.531 49.1734 cv
f
574.731 47.8536 mo
574.731 46.1146 573.319 44.7036 571.581 44.7036 cv
569.841 44.7036 568.43 46.1146 568.43 47.8536 cv
568.43 49.5926 569.841 51.0036 571.581 51.0036 cv
573.319 51.0036 574.731 49.5926 574.731 47.8536 cv
f
587.571 36.5738 mo
587.571 34.8348 586.16 33.4238 584.421 33.4238 cv
582.682 33.4238 581.27 34.8348 581.27 36.5738 cv
581.27 38.3128 582.682 39.7238 584.421 39.7238 cv
586.16 39.7238 587.571 38.3128 587.571 36.5738 cv
f
598.011 37.5337 mo
598.011 35.7947 596.6 34.3837 594.862 34.3837 cv
593.122 34.3837 591.711 35.7947 591.711 37.5337 cv
591.711 39.2727 593.122 40.6837 594.862 40.6837 cv
596.6 40.6837 598.011 39.2727 598.011 37.5337 cv
f
601.851 33.4537 mo
601.851 31.7147 600.44 30.3037 598.702 30.3037 cv
596.962 30.3037 595.551 31.7147 595.551 33.4537 cv
595.551 35.1927 596.962 36.6037 598.702 36.6037 cv
600.44 36.6037 601.851 35.1927 601.851 33.4537 cv
f
620.81 20.7334 mo
620.81 18.9944 619.399 17.5834 617.661 17.5834 cv
615.922 17.5834 614.51 18.9944 614.51 20.7334 cv
614.51 22.4724 615.922 23.8834 617.661 23.8834 cv
619.399 23.8834 620.81 22.4724 620.81 20.7334 cv
f
624.891 25.5337 mo
624.891 23.7947 623.48 22.3837 621.742 22.3837 cv
620.002 22.3837 618.591 23.7947 618.591 25.5337 cv
618.591 27.2727 620.002 28.6837 621.742 28.6837 cv
623.48 28.6837 624.891 27.2727 624.891 25.5337 cv
f
628.971 24.3335 mo
628.971 22.5945 627.56 21.1835 625.822 21.1835 cv
624.082 21.1835 622.671 22.5945 622.671 24.3335 cv
622.671 26.0725 624.082 27.4835 625.822 27.4835 cv
627.56 27.4835 628.971 26.0725 628.971 24.3335 cv
f
361.371 48.5738 mo
361.371 46.8348 359.96 45.4238 358.221 45.4238 cv
356.482 45.4238 355.071 46.8348 355.071 48.5738 cv
355.071 50.3128 356.482 51.7238 358.221 51.7238 cv
359.96 51.7238 361.371 50.3128 361.371 48.5738 cv
f
0 0.624 0.075 rgb
MOQTAO+Symbol*1 [20 0 0 -20 0 0 ]msf257.618 75.3209 mo(b)shMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf268.598 75.3209 mo( = 6.4)[5.56 11.68 5.56 11.12 5.56 0 ]xsh607.701 19.9537 mo
613.901 19.9537 li
607.701 31.8537 mo
613.901 31.8537 li
610.801 31.8537 mo
610.801 19.9537 li
583.201 44.6537 mo
589.401 44.6537 li
583.201 55.5537 mo
589.401 55.5537 li
586.301 55.5537 mo
586.301 44.6537 li
558.801 53.8537 mo
565.001 53.8537 li
558.801 63.0537 mo
565.001 63.0537 li
561.901 63.0537 mo
561.901 53.8537 li
555.301 48.9537 mo
561.501 48.9537 li
555.301 55.2537 mo
561.501 55.2537 li
558.401 55.2537 mo
558.401 48.9537 li
535.901 60.5537 mo
542.1 60.5537 li
535.901 66.9537 mo
542.1 66.9537 li
539.001 66.9537 mo
539.001 60.5537 li
534.301 55.9537 mo
540.501 55.9537 li
534.301 63.9537 mo
540.501 63.9537 li
537.401 63.9537 mo
537.401 55.9537 li
515.901 71.7537 mo
522.1 71.7537 li
515.901 77.5537 mo
522.1 77.5537 li
519.001 77.5537 mo
519.001 71.7537 li
512.901 75.5537 mo
519.1 75.5537 li
512.901 80.1537 mo
519.1 80.1537 li
516.001 80.1537 mo
516.001 75.5537 li
509.901 75.7537 mo
516.1 75.7537 li
509.901 83.1537 mo
516.1 83.1537 li
513.001 83.1537 mo
513.001 75.7537 li
496.001 85.1537 mo
502.201 85.1537 li
496.001 89.8537 mo
502.201 89.8537 li
499.1 89.8537 mo
499.1 85.1537 li
493.1 82.7537 mo
499.301 82.7537 li
493.1 87.2537 mo
499.301 87.2537 li
496.201 87.2537 mo
496.201 82.7537 li
485.401 85.7537 mo
491.6 85.7537 li
485.401 91.9537 mo
491.6 91.9537 li
488.501 91.9537 mo
488.501 85.7537 li
476.001 95.5537 mo
482.201 95.5537 li
476.001 99.8537 mo
482.201 99.8537 li
479.1 99.8537 mo
479.1 95.5537 li
470.6 91.7537 mo
476.801 91.7537 li
470.6 95.4537 mo
476.801 95.4537 li
473.701 95.4537 mo
473.701 91.7537 li
469.001 97.5537 mo
475.201 97.5537 li
469.001 100.454 mo
475.201 100.454 li
472.1 100.454 mo
472.1 97.5537 li
461.001 97.4537 mo
467.201 97.4537 li
461.001 103.154 mo
467.201 103.154 li
464.1 103.154 mo
464.1 97.4537 li
458.501 102.954 mo
464.701 102.954 li
458.501 106.454 mo
464.701 106.454 li
461.6 106.454 mo
461.6 102.954 li
456.001 98.8537 mo
462.201 98.8537 li
456.001 102.754 mo
462.201 102.754 li
459.1 102.754 mo
459.1 98.8537 li
442.301 109.954 mo
448.501 109.954 li
442.301 112.554 mo
448.501 112.554 li
445.401 112.554 mo
445.401 109.954 li
437.401 115.354 mo
443.6 115.354 li
437.401 117.954 mo
443.6 117.954 li
440.501 117.954 mo
440.501 115.354 li
436.501 107.954 mo
442.701 107.954 li
436.501 112.354 mo
442.701 112.354 li
439.6 112.354 mo
439.6 107.954 li
436.1 112.654 mo
442.301 112.654 li
436.1 116.254 mo
442.301 116.254 li
439.201 116.254 mo
439.201 112.654 li
428.201 117.554 mo
434.401 117.554 li
428.201 120.354 mo
434.401 120.354 li
431.301 120.354 mo
431.301 117.554 li
428.201 119.354 mo
434.401 119.354 li
428.201 121.754 mo
434.401 121.754 li
431.301 121.754 mo
431.301 119.354 li
423.901 121.254 mo
430.1 121.254 li
423.901 124.154 mo
430.1 124.154 li
427.001 124.154 mo
427.001 121.254 li
416.1 124.454 mo
422.301 124.454 li
416.1 127.854 mo
422.301 127.854 li
419.201 127.854 mo
419.201 124.454 li
414.1 126.154 mo
420.301 126.154 li
414.1 128.354 mo
420.301 128.354 li
417.201 128.354 mo
417.201 126.154 li
412.001 121.654 mo
418.201 121.654 li
412.001 125.054 mo
418.201 125.054 li
415.1 125.054 mo
415.1 121.654 li
405.801 130.254 mo
412.001 130.254 li
405.801 132.554 mo
412.001 132.554 li
408.901 132.554 mo
408.901 130.254 li
400.001 135.654 mo
406.201 135.654 li
400.001 137.654 mo
406.201 137.654 li
403.1 137.654 mo
403.1 135.654 li
396.101 133.854 mo
402.301 133.854 li
396.101 136.854 mo
402.301 136.854 li
399.201 136.854 mo
399.201 133.854 li
389.301 141.354 mo
395.501 141.354 li
389.301 143.554 mo
395.501 143.554 li
392.401 143.554 mo
392.401 141.354 li
387.601 137.954 mo
393.801 137.954 li
387.601 141.254 mo
393.801 141.254 li
390.701 141.254 mo
390.701 137.954 li
385.801 141.154 mo
392.001 141.154 li
385.801 143.254 mo
392.001 143.254 li
388.901 143.254 mo
388.901 141.154 li
385.801 141.354 mo
392.001 141.354 li
385.801 143.154 mo
392.001 143.154 li
388.901 143.154 mo
388.901 141.354 li
376.201 144.954 mo
382.401 144.954 li
376.201 147.454 mo
382.401 147.454 li
379.301 147.454 mo
379.301 144.954 li
374.301 147.354 mo
380.501 147.354 li
374.301 148.954 mo
380.501 148.954 li
377.401 148.954 mo
377.401 147.354 li
371.701 149.154 mo
377.901 149.154 li
371.701 150.854 mo
377.901 150.854 li
374.801 150.854 mo
374.801 149.154 li
363.101 152.454 mo
369.301 152.454 li
363.101 154.854 mo
369.301 154.854 li
366.201 154.854 mo
366.201 152.454 li
357.601 157.054 mo
363.801 157.054 li
357.601 158.554 mo
363.801 158.554 li
360.701 158.554 mo
360.701 157.054 li
356.201 155.654 mo
362.401 155.654 li
356.201 157.554 mo
362.401 157.554 li
359.301 157.554 mo
359.301 155.654 li
354.801 158.854 mo
361.001 158.854 li
354.801 160.554 mo
361.001 160.554 li
357.901 160.554 mo
357.901 158.854 li
343.501 163.554 mo
349.701 163.554 li
343.501 165.154 mo
349.701 165.154 li
346.601 165.154 mo
346.601 163.554 li
343.501 165.054 mo
349.701 165.054 li
343.501 166.354 mo
349.701 166.354 li
346.601 166.354 mo
346.601 165.054 li
342.701 164.654 mo
348.901 164.654 li
342.701 166.254 mo
348.901 166.254 li
345.801 166.254 mo
345.801 164.654 li
338.701 166.254 mo
344.901 166.254 li
338.701 168.354 mo
344.901 168.354 li
341.801 168.354 mo
341.801 166.254 li
336.201 169.854 mo
342.401 169.854 li
336.201 171.454 mo
342.401 171.454 li
339.301 171.454 mo
339.301 169.854 li
329.401 174.254 mo
335.601 174.254 li
329.401 175.554 mo
335.601 175.554 li
332.501 175.554 mo
332.501 174.254 li
320.201 179.854 mo
326.401 179.854 li
320.201 181.054 mo
326.401 181.054 li
323.301 181.054 mo
323.301 179.854 li
316.301 184.254 mo
322.501 184.254 li
316.301 185.654 mo
322.501 185.654 li
319.401 185.654 mo
319.401 184.254 li
315.201 183.754 mo
321.401 183.754 li
315.201 184.754 mo
321.401 184.754 li
318.301 184.754 mo
318.301 183.754 li
314.201 184.754 mo
320.401 184.754 li
314.201 186.554 mo
320.401 186.554 li
317.301 186.554 mo
317.301 184.754 li
311.1 186.054 mo
317.301 186.054 li
311.1 187.054 mo
317.301 187.054 li
314.201 187.054 mo
314.201 186.054 li
301.1 192.354 mo
307.301 192.354 li
301.1 193.454 mo
307.301 193.454 li
304.201 193.454 mo
304.201 192.354 li
301.1 193.754 mo
307.301 193.754 li
301.1 194.754 mo
307.301 194.754 li
304.201 194.754 mo
304.201 193.754 li
296.301 196.054 mo
302.501 196.054 li
296.301 197.054 mo
302.501 197.054 li
299.401 197.054 mo
299.401 196.054 li
289.801 203.254 mo
296.001 203.254 li
289.801 204.454 mo
296.001 204.454 li
292.901 204.454 mo
292.901 203.254 li
287.001 205.154 mo
293.201 205.154 li
287.001 205.854 mo
293.201 205.854 li
290.1 205.854 mo
290.1 205.154 li
285.6 206.354 mo
291.801 206.354 li
285.6 207.454 mo
291.801 207.454 li
288.701 207.454 mo
288.701 206.354 li
279.6 212.354 mo
285.801 212.354 li
279.6 213.054 mo
285.801 213.054 li
282.701 213.054 mo
282.701 212.354 li
276.301 215.354 mo
282.501 215.354 li
276.301 216.354 mo
282.501 216.354 li
279.401 216.354 mo
279.401 215.354 li
272.901 220.054 mo
279.1 220.054 li
272.901 220.754 mo
279.1 220.754 li
276.001 220.754 mo
276.001 220.054 li
265.301 227.654 mo
271.501 227.654 li
265.301 228.654 mo
271.501 228.654 li
268.401 228.654 mo
268.401 227.654 li
258.801 236.954 mo
265.001 236.954 li
258.801 237.654 mo
265.001 237.654 li
261.901 237.654 mo
261.901 236.954 li
258.801 238.354 mo
265.001 238.354 li
258.801 238.954 mo
265.001 238.954 li
261.901 238.954 mo
261.901 238.354 li
256.401 240.154 mo
262.601 240.154 li
256.401 240.854 mo
262.601 240.854 li
259.501 240.854 mo
259.501 240.154 li
251.001 249.954 mo
257.201 249.954 li
251.001 250.454 mo
257.201 250.454 li
254.101 250.454 mo
254.101 249.954 li
248.001 257.854 mo
254.201 257.854 li
248.001 258.254 mo
254.201 258.254 li
251.101 258.254 mo
251.101 257.854 li
244.701 269.454 mo
250.901 269.454 li
244.701 269.854 mo
250.901 269.854 li
247.801 269.854 mo
247.801 269.454 li
240.901 273.254 mo
247.101 273.254 li
240.901 273.954 mo
247.101 273.954 li
244.001 273.954 mo
244.001 273.254 li
236.401 291.854 mo
242.601 291.854 li
236.401 292.254 mo
242.601 292.254 li
239.501 292.254 mo
239.501 291.854 li
230.501 335.254 mo
236.701 335.254 li
230.501 335.454 mo
236.701 335.454 li
233.601 335.454 mo
233.601 335.254 li
385.501 65.5537 mo
385.501 71.7537 li
331.201 65.5537 mo
331.201 71.7537 li
331.201 68.6537 mo
385.501 68.6537 li
@
233.601 331.826 mo
230.451 336.929 li
236.751 336.929 li
cp
f
239.501 288.526 mo
236.351 293.629 li
242.651 293.629 li
cp
f
244.001 270.026 mo
240.851 275.129 li
247.151 275.129 li
cp
f
247.801 266.125 mo
244.651 271.229 li
250.951 271.229 li
cp
f
251.101 254.526 mo
247.951 259.629 li
254.251 259.629 li
cp
f
254.101 246.725 mo
250.951 251.829 li
257.251 251.829 li
cp
f
259.501 236.925 mo
256.351 242.029 li
262.651 242.029 li
cp
f
261.901 235.126 mo
258.751 240.23 li
265.051 240.23 li
cp
f
261.901 233.725 mo
258.751 238.829 li
265.051 238.829 li
cp
f
268.401 224.626 mo
265.251 229.73 li
271.551 229.73 li
cp
f
276.001 216.925 mo
272.851 222.029 li
279.151 222.029 li
cp
f
279.401 212.326 mo
276.251 217.429 li
282.551 217.429 li
cp
f
282.701 209.126 mo
279.551 214.23 li
285.851 214.23 li
cp
f
288.701 203.326 mo
285.551 208.429 li
291.851 208.429 li
cp
f
290.101 202.026 mo
286.951 207.129 li
293.251 207.129 li
cp
f
292.901 200.326 mo
289.751 205.429 li
296.051 205.429 li
cp
f
299.401 193.025 mo
296.251 198.128 li
302.551 198.128 li
cp
f
304.201 190.726 mo
301.051 195.829 li
307.351 195.829 li
cp
f
304.201 189.426 mo
301.051 194.529 li
307.351 194.529 li
cp
f
314.201 183.025 mo
311.051 188.128 li
317.351 188.128 li
cp
f
317.301 182.126 mo
314.151 187.229 li
320.451 187.229 li
cp
f
318.301 180.726 mo
315.151 185.829 li
321.451 185.829 li
cp
f
319.401 181.426 mo
316.251 186.529 li
322.551 186.529 li
cp
f
323.301 176.926 mo
320.151 182.029 li
326.451 182.029 li
cp
f
332.501 171.326 mo
329.351 176.429 li
335.651 176.429 li
cp
f
339.301 167.126 mo
336.151 172.229 li
342.451 172.229 li
cp
f
341.801 163.826 mo
338.651 168.929 li
344.951 168.929 li
cp
f
345.801 161.926 mo
342.651 167.029 li
348.951 167.029 li
cp
f
346.601 162.126 mo
343.451 167.229 li
349.751 167.229 li
cp
f
346.601 160.826 mo
343.451 165.929 li
349.751 165.929 li
cp
f
357.901 156.226 mo
354.751 161.329 li
361.051 161.329 li
cp
f
359.301 153.025 mo
356.151 158.128 li
362.451 158.128 li
cp
f
360.701 154.326 mo
357.551 159.429 li
363.851 159.429 li
cp
f
366.201 150.126 mo
363.051 155.229 li
369.351 155.229 li
cp
f
374.801 146.426 mo
371.651 151.529 li
377.951 151.529 li
cp
f
377.401 144.626 mo
374.251 149.729 li
380.551 149.729 li
cp
f
379.301 142.726 mo
376.151 147.829 li
382.451 147.829 li
cp
f
388.901 138.726 mo
385.751 143.829 li
392.051 143.829 li
cp
f
388.901 138.726 mo
385.751 143.829 li
392.051 143.829 li
cp
f
390.701 136.126 mo
387.551 141.229 li
393.851 141.229 li
cp
f
392.401 138.926 mo
389.251 144.029 li
395.551 144.029 li
cp
f
399.201 131.826 mo
396.051 136.929 li
402.35 136.929 li
cp
f
403.101 133.126 mo
399.952 138.229 li
406.251 138.229 li
cp
f
408.901 127.926 mo
405.751 133.029 li
412.05 133.029 li
cp
f
415.101 119.826 mo
411.952 124.929 li
418.251 124.929 li
cp
f
417.201 123.726 mo
414.051 128.829 li
420.35 128.829 li
cp
f
419.201 122.626 mo
416.051 127.729 li
422.35 127.729 li
cp
f
427.001 119.226 mo
423.851 124.329 li
430.151 124.329 li
cp
f
431.301 117.025 mo
428.152 122.128 li
434.451 122.128 li
cp
f
431.301 115.426 mo
428.152 120.529 li
434.451 120.529 li
cp
f
439.201 110.926 mo
436.051 116.029 li
442.35 116.029 li
cp
f
439.601 106.626 mo
436.452 111.729 li
442.751 111.729 li
cp
f
440.501 113.126 mo
437.351 118.229 li
443.651 118.229 li
cp
f
445.401 107.726 mo
442.251 112.829 li
448.55 112.829 li
cp
f
459.101 97.2256 mo
455.952 102.329 li
462.251 102.329 li
cp
f
461.601 101.126 mo
458.452 106.229 li
464.751 106.229 li
cp
f
464.101 96.8257 mo
460.952 101.929 li
467.251 101.929 li
cp
f
472.101 95.5254 mo
468.952 100.628 li
475.251 100.628 li
cp
f
473.701 90.1255 mo
470.551 95.2285 li
476.85 95.2285 li
cp
f
479.101 94.1255 mo
475.952 99.2285 li
482.251 99.2285 li
cp
f
488.501 85.3257 mo
485.351 90.4287 li
491.651 90.4287 li
cp
f
496.201 81.4258 mo
493.051 86.5288 li
499.35 86.5288 li
cp
f
499.101 83.9258 mo
495.952 89.0288 li
502.251 89.0288 li
cp
f
513.001 75.9258 mo
509.851 81.0288 li
516.151 81.0288 li
cp
f
516.001 74.3257 mo
512.851 79.4287 li
519.151 79.4287 li
cp
f
519.001 71.1255 mo
515.851 76.2285 li
522.151 76.2285 li
cp
f
537.401 56.4258 mo
534.251 61.5288 li
540.55 61.5288 li
cp
f
539.001 60.2256 mo
535.851 65.3286 li
542.151 65.3286 li
cp
f
558.401 48.6255 mo
555.251 53.7285 li
561.55 53.7285 li
cp
f
561.901 54.9258 mo
558.751 60.0288 li
565.05 60.0288 li
cp
f
586.301 46.5254 mo
583.152 51.6284 li
589.451 51.6284 li
cp
f
610.801 22.4258 mo
607.652 27.5288 li
613.951 27.5288 li
cp
f
358.301 65.1255 mo
355.151 70.2285 li
361.451 70.2285 li
cp
f
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: SBMBAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal SBMBAA+Helvetica gcheck setglobal} if
1 2328 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>SBMBAA+Helvetica AddT42Char 
1 2616 51 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>SBMBAA+Helvetica AddT42Char 
1 3164 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>SBMBAA+Helvetica AddT42Char 
1 3568 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>SBMBAA+Helvetica AddT42Char 
1 3972 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>SBMBAA+Helvetica AddT42Char 
1 4064 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>SBMBAA+Helvetica AddT42Char 
1 4132 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>SBMBAA+Helvetica AddT42Char 
1 4316 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>SBMBAA+Helvetica AddT42Char 
1 4696 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>SBMBAA+Helvetica AddT42Char 
SBMBAA+Helvetica /CharStrings get begin
/C 38 def
/P 51 def
/a 68 def
/e 72 def
/i 76 def
/l 79 def
/n 81 def
/o 82 def
/t 87 def
end
SBMBAA+Helvetica /Encoding get
dup 67 /C put
dup 80 /P put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAN+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six 6{/.notdef}rp /equal 5{/.notdef}rp /C 12{/.notdef}rp /P 5{/.notdef}rp /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]MOQTAN+Helvetica nfMOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf255.86 95.3209 mo(Cornell Potential)[14.44 11.12 6.65985 11.12 11.12 4.44 4.44 5.56 13.3401 11.12 5.56 11.12 11.12 5.56 4.44 11.12 0 ]xsh1 lw
233.201 352.454 mo
234.801 332.854 li
239.001 303.154 li
243.101 283.154 li
247.301 268.654 li
251.501 257.354 li
255.601 248.254 li
259.801 240.554 li
264.001 234.054 li
268.101 228.254 li
272.301 223.054 li
276.401 218.354 li
280.601 214.054 li
284.801 210.054 li
288.901 206.254 li
293.101 202.754 li
297.201 199.354 li
301.401 196.054 li
305.601 192.954 li
309.701 189.954 li
313.901 187.054 li
318.101 184.254 li
322.201 181.454 li
326.401 178.754 li
330.501 176.154 li
334.701 173.554 li
338.901 171.054 li
343.001 168.554 li
347.201 166.054 li
351.301 163.654 li
355.501 161.254 li
359.701 158.854 li
363.801 156.454 li
368.001 154.154 li
372.201 151.854 li
376.301 149.554 li
380.501 147.354 li
384.601 145.054 li
388.801 142.854 li
393.001 140.654 li
397.101 138.354 li
401.301 136.254 li
405.401 134.054 li
409.6 131.854 li
413.801 129.654 li
417.901 127.554 li
422.1 125.354 li
426.301 123.254 li
430.401 121.154 li
434.6 119.054 li
438.701 116.854 li
442.901 114.754 li
447.1 112.654 li
451.201 110.554 li
455.401 108.454 li
459.6 106.454 li
463.701 104.354 li
467.901 102.254 li
472.001 100.154 li
476.201 98.1537 li
480.401 96.0537 li
484.501 94.0537 li
488.701 91.9537 li
492.801 89.8537 li
497.001 87.8537 li
501.201 85.8537 li
505.301 83.7537 li
509.501 81.7537 li
513.701 79.6537 li
517.801 77.6537 li
522.001 75.6537 li
526.1 73.6537 li
530.301 71.5537 li
534.501 69.5537 li
538.6 67.5537 li
542.801 65.5537 li
546.901 63.5537 li
551.1 61.4537 li
555.301 59.4537 li
559.401 57.4537 li
563.6 55.4537 li
567.801 53.4537 li
571.901 51.4537 li
576.1 49.4537 li
580.201 47.4537 li
584.401 45.4537 li
588.6 43.4537 li
592.701 41.4537 li
596.901 39.4537 li
601.001 37.4537 li
605.201 35.4537 li
609.401 33.4537 li
613.501 31.4537 li
617.701 29.4537 li
621.901 27.4537 li
626.001 25.4537 li
630.201 23.5537 li
634.301 21.5537 li
638.501 19.5537 li
409.201 88.6537 mo
463.501 88.6537 li
@
MOQTAN+Helvetica*1 [20 0 0 -20 0 0 ]msf222.399 379.625 mo(0)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/MOQTAO+Symbol*1 uf/MOQTAO+Symbol uf/KHOAAA+Symbol uf/MOQTAN+Helvetica*1 uf/MOQTAN+Helvetica uf/SBMBAA+Helvetica ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
