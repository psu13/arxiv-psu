%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CFCAplotrev.pdf
%%Creator: Adobe Acrobat 8.0
%%For: chrisquigg
%%CreationDate: 5/17/10, 11:49:41
%%BoundingBox: -1 0 568 560
%%HiResBoundingBox: 0 0 567.6895 559.3290
%%CropBox: 0 0 567.6895 559.3290
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2010-03-04T13:59:17+01:00"
   xap:ModifyDate="2010-03-04T14:13:18+01:00"
   xap:MetadataDate="2010-03-04T14:13:18+01:00"
   xapMM:DocumentID="uuid:5E1286102729DF118FA1E8A11712CDBD"
   xapMM:InstanceID="uuid:572b8db4-a260-d84a-912c-ba043817ac0d"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="True"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">cacfplotrev2</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="256"
      xapGImg:height="232"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxDzR541DRPMenaYu&#xA;mxz2d7JbRCZ7nhcyvdTmFhZ2yxyGb6sv72csyBUNd8VUE8/35/MeTytLp8dtpqOIIdSnN0rXE5s1&#xA;uzHbkWxtWKq26m4DUVjTbFV+meXvK195m80vqVjY3t9LqURX6xDDJKEXS7IBRzDNx2JxVMf+Vc+R&#xA;f0f9Q/QNj6Ppehy+rxepx48K+px5cqftVriqpN5A8kTcOWgaePTcSLxtYV3Xxou49sVc3kDyQ1wk&#xA;50DT+caPGoFrDxo5Umq8aE/AKHtv44qpQfl75OjvLq4bRdOdLjhwiNnBROC0NPh/a69MVVYPIHki&#xA;BCiaBp5Bd5DytYWNZHLncr0q2w7DbFVMflz5FFpDajQbH0oPS4H6vFzPosrLyfjyavEcq9e+Kqkv&#xA;kDyRI8LtoGngwOZE42sIBJRk+IBfiFHOx779sVUv+Ve+Tv0j9b/Qunen6Ppeh9Tg48uXLn9nr26Y&#xA;qqxeQPJEbzOugaeTO4kflawkAhFT4QV+EUQbDvv3xVTP5c+RTaTWp0Gx9Kf1eZ+rxcx6zMzcX48l&#xA;pyPGnTtiqpP5A8kToEfQNPADpIONrCprG4cbhelV3HcbYqpSfl75ObUYLsaLpyxwwzRNB9Tg4s0r&#xA;RMHPw9U9IgbftYqqr5A8kLcPONA0/nIiRsDaw8aIWIovGgPxmp77eGKuh8geSIefHQNPPqOZG5Ws&#xA;Lbt4VXYe2KqY/LnyKLFLL9A2Pooixhvq8XOiUpV+PInbc13xVq6/L3ydPPZyrounRrazGV0FnBSR&#xA;TDJFwPwjasgbv0xVVbyB5Ia4Sc6Bp/ONHjUC1h40cqTVeNCfgFD238cVdF5A8kRvM66Bp5M7iR+V&#xA;rCQCEVPhBX4RRBsO+/fFVqfl75GSCSAaDYcJDIzE20JasrFmoxWo3bbw7YqpXf5c+TZrSK3i0bT4&#xA;fSkgcSfVIWYrBKkhQniD8apxPz74qs1jyn+XdhafpG/0TT4oLJvUBW0iqzsDEqBFSsjOZOKIASzE&#xA;UHKmKpX5f/Lfy7dX8vmLVtAsYLi6iSOw0k20BSztwSw9RQvFrmTl+9bcL9hSQCzqp9F5A8kRvM66&#xA;Bp5M7iR+VrCQCEVPhBX4RRBsO+/fFWLfmF5a/L3RvI2rW/6LsLa7uLG7h08rbwtcGV4Xo0e3P4Ce&#xA;RavwgVqMVej4q7FXYq7FXYqx7UfIuh3/AJlh8ySSXsOqwxxQepbXtzbxvFDI0qRyxRSIkic3NVYU&#xA;PfFXW/kPy7BrNvrPC5mvrYKYTPd3M0YlWD6t9YMUkjRmcw/A0pXmR1O5xVry/wDo9/MfmcD0mvor&#xA;+IsPhMqo2nWgUn9oA0NMVZFiqyeeKCCSeU8YolLyNQmiqKk0FT0yM5CIJPIKgX8waYiM7tKqKCzM&#xA;YJ6ADcn7Ga8dsaX/AFSPzZ+HLuTHNkwQuqatpWk2Ul9qt5Bp9jFT1bq6lSGJamg5PIVUVPviqzSN&#xA;b0XWrIX2j39tqVkzFFurOaOeIsuzAPGWWo774qjcVU7q6trS2lurqVLe2t0aWeeVgkaRoOTO7NQK&#xA;qgVJOKqVzqem2tj9fubuGCxop+tyyKkVJCFQ+oxC/EWAG+9cVROKuxVQOoWAv1043MQ1B4muEsy6&#xA;+sYUYI0ojryKKzqpalKkYqr4q7FXYqgLrX9CtJpYLrUbW3ng9H1opZo0dPrTmK35KzAr60gKx1+0&#xA;dhviqPxV5xrX5vzaT5kn0qfRf9DjuYrOC8ad0MsjvErsoaD6uyoJT8Mc7yCnxog+IKqOu/nPPp2o&#xA;X9lbeX5r5rC5+rSyxSSMoWly/qssME8iqq2UnL4TQletSVVXeY/z78peWPL9trGuwXKJcXtxp6x2&#xA;YW4HqW5qHDsYapJGVdTSu9CK4qnvl5ZfNjWPmrUIjFpRRLry7pcoHNBItVvLkK7oZXQ/ul/3Wp3+&#xA;NiFVZdiqB1XVY7CONVjNxeXBKWdmhAeVwKnc/ZVerMdlGKsB8z6csnlvXtY1K6t5Z5bC6jbUyY+F&#xA;fS5RWdiJFkUQElg7hhI7j5cVXpmKuxV2KuxV2KuxV2KpD5euIW13zRAGrKmoRMy0OwbTrQDfp2xV&#xA;PsVQWuf8cXUP+Yab/k2cxdd/cT/qS+5lHmEn1T/jmXn/ABgk/wCIHPI8f1D3ueWS57M6551+ZElh&#xA;Y+dfJms+YOK+VrF70T3MwrbW2oypGLK4uCQVjVVWZVkbZGYbiuKpL5p8zeVrlrjVPL1xPa6Neajp&#xA;1t5t82adKY7N7UCf+6uopAFZJPTjnuIwCqOo5/D8CqT2V1eaz5t0jR7HXtTn8lXGuXsGm3sGoXQl&#xA;uraDRxPLGL5JBPPAl4GCSeoTsQG2BxVIfrOsw+RtPuZ9a1LUJdc0LzXDqYvbya4jkSxhdbYiF2MS&#xA;PGqfbRQzVPImuKoi68xJa+Wh/gzzHqGo2qaNbSa9O1/PcG0vjqFnHboC7sbWWSNrlXgTgOKj4R3V&#xA;TPSbzXINdsdZOt6lNNd/mDqmiPay3k72g05RecbcWzOYaI0KlW48l6A0AGKpPpnmr8w5bT65puow&#xA;S+cPqWqSaxoq6vfahc/WVtZmjjbSHtBbaeYLlU9OkiqwHDlIXUlVkX5d3Hlif847CTQNeu9fjPlO&#xA;4N5cXd5NfcJze2ZZeczP6Uh6yQrQIafCtcVd5n1XzPD5g/NO80/UL1pdJXRreytvrU6W1rbXkcJv&#xA;5o4kEyRusKtJ6oidkoWUbkMqlf6Z1A6bqDR+brG28vC+08QlNe1bULUyGG59e2l8w/V4JbVJisT1&#xA;WRuDrxNBKqlVdZ+fbjT73y5qV9qt7Z+XJLHzBbpNc6g95bXFzBJGbYQXTJAbuq8hbPIpkcdCx3xV&#xA;iBkbVfKzalrV7cyMmk+SLu/v2up4pKHUp1mlnmR0YgI7Nydvhaj7MqkKvq22MJt4jA/qQlF9KTmZ&#xA;OS0+FuZLFqjvXfFUpufJPk+6vbu+udEsp7y/jMN7cSW8bPLGyhWWQkfFVVANewHhiqAl/LX8v1Ws&#xA;mi2a2ccKxvatEn1bjE8kqu0ZHHkrTy/F1+Nq1rirHIPy+8sedVgk1PTFuPKNpPc3Ol210JBNeXVz&#xA;IWlvpCeDrFuywp0ZTy+zwAVejWdnbWVnBZ2kYhtbaNIYIl+ykcahVUewApiqF1nVxp8SpDCbvUbj&#xA;kLKxVgrSMoqSzHZI0qObnYe7FVKqS6Lo9zfetdahO08k543V2vqwGQKzA29sp4PFaoyqysrH1vtE&#xA;kfaVRfn2e3tvI+umQ8EOn3UaUBpVoHCjbFU/xV2KuxV2KuxV2KuxVIfL06NrvmiAB+aahExJRwlG&#xA;060pRyOBO24BqMVT7FVk8EU8EkEo5RSqUkWpFVYUIqKHpkZxEgQeRVAv5f0x0ZHWVkYFWUzz0IOx&#xA;H28147H0v+px+TPxJd6Y5smDsVdirsVdirsVdiqn9Wt/rBufST6yU9Mz8Rz4A8uPLrxqa0xVUxV2&#xA;KqcNtbwBxBEkQkdpJOCheTtuzNTqx7nFVTFXYq7FXYqxJmTzpcSQrR/J9u7R3BIqupzJT4FO4azQ&#xA;1V/9+uOP92G9RVluKpXrmt/o5IoLaA3mq3ZKWFip48yPtPI9G9OGOtXcjboAzFVKqW6RpFxeM93f&#xA;yrcrcqBdz+myfWacWRIQXPp2icnX0mBL/aLEEl1WTAACg2A6DFUg8/3EcHknXWcOQ1hdIPTR5DVo&#xA;XAqEDEDxJ2HfFU/xV2KuxV2KuxV2KuxVIfL06NrvmiAB+aahExJRwlG060pRyOBO24BqMVT7FXYq&#xA;knnLzjoflDQbjW9amMFnArGoVm5OFJWMEAgM5HFa98VVvLHmfRPM+jQaxotx9a0+4H7uYKygkdR8&#xA;QFaHY02riqQfmX51vfLEOlmGW20+2v7h4rzXL+Ce5tLNI4jIPUigeEkykcVLSoo6k9iqk9l+ZHmJ&#xA;oNB9Q6Vfx6n5jGi/pbTZRPaXVm1lNci4t1jnmaCTnEEZJHalD1BBxVH+aPzHu9A8y65YyW0c9lpm&#xA;hWmp2sa1Wea8u7ye0jgLluAR2ijUfDsSTXFUq83efvPfliZZNSbRYIVksraxsHDm71maX0heNY0u&#xA;eUCxPNxRZIpDtViFocVZn5c8w3V9q2u6PfpGl/o1yqgxAhJLS5T1bWWjFiG48o333ZGIoCBirHNK&#xA;8yfmJ5ptr/WfLT6TZ6NDdXFrpVvf29zPPeCzme3lkeaK4gW3V5YmCfupDTc+GKoPy/8AmV5l87XV&#xA;raeVoLPSmisIr7XbrUo5bwW8s8s0KWsUMMtp6h52shMhkA402NcVRWoeZ/zIgvfLmhyxabpur6te&#xA;3trPfSQy3trJDaWrXMc8EMdzbSJ6nHiUkkqpr1FCVU08n+adeufMeueVvMS2rato6211De2KSQwX&#xA;NpecxG/oyvM0bo0LK6+ow6UOKswxV2KuxV2KsX1J5PNF5caLayPHodq5h1y8jZo2nfjvZW8iFWWn&#xA;IevIp2/u1+PkY1WTQwxQxJDCixwxqEjjQBVVVFAqgbAAYqlWv+YoNKEcCKLjUbhWaC2LiNRHHQyT&#xA;zSGoigiBq8h9gAWKqVUDpWhG99a41NfrCXJH1kzIn+lGNnCgx1lCWqgq0EfKu5Z6sSSqyXFXYqkH&#xA;n+4jg8k66zhyGsLpB6aPIatC4FQgYgeJOw74qn+KuxV2KuxV2KuxV5l5U84XepfmbqmlReY4dQtr&#xA;R72G90x2tIhC8MqiCOzhWl67xLyFxLJ+7LH4OmyrK9Bupx5i8x24tJTEdQjY3gMXpA/o20+Egyer&#xA;X5JTFWRYq7FUBrug6Tr2lzaVq9uLvTrgoZ7ZiwVxHIsiq3Eiq8kHJehGx2OKt6Joum6HpVvpWmQ/&#xA;V9PtFKW0HJmCJUkIpYk8VrRR2G2KoDzNoWt6hPYXui6y2k31g7nhLG1zZXEcqhXS5tllty9OIKMJ&#xA;FKn2JGKsWj/KKVbe8uzq0cfmS51aLXYdQt7JIrOG7gg+rqFsvUcsjRM4krNzbkTzriqh5k/LTXL7&#xA;RvMeo31/HrPmfUIbH6mkEBsbZE0m5+u21tEjy3TL6k/Lk7yNuewGKorW/Iut+arDU4U16W28s+aU&#xA;hmvdJ1CyeW8tlMaLJHaSSzILUuqAlHhfg9WWhxVNfKOmXh81eadengktre+ltrCxjmVkd4NNR0Mx&#xA;VgDxeaaTgf2lAbocVSuT8tfNFhb3+neVfNQ0XR768a/igey+s3FnJLN686WkwuII1jkkLHhLFIBy&#xA;I6YqpaB+VeseXIdLuPL+tW9jq1rp8emaq01nJdWd8kLvJFNJD9ZhmWZXlduQn/aINRTFUTdfl15l&#xA;abRtRh8zCbXdKvbu+ku9RtHureRry3NsYoraO5tvQijRvgVZDvuakklVN/KXk+60jU9X1zVdQXVN&#xA;d1poRdXMUH1WCOC2VlggghMk7Kq82JLSMST1xVk+KuxV2KsY13VLrUrybQ9KuTZRW3D9O6wpC/Vo&#xA;5FLCCB2BU3LjjX/faNzO5QM2yjEyNAWU40KPRoNNhstHEaafZKsEMMX2EVAAFH0YAQeTLJhlA1IU&#xA;h9d8xW2m8bZCkmoyo0kUMj+nGkakBp55DtHChO7Hr0WrUGFrQmiaE5nbUbxmkmmKvJI6+nJOU4vE&#xA;8iEBokhbmIoORUA8mrITRVkWKuxV2Ksc/MG7nh8oa0kdlNcrJp12HliMIWP9ywq/qSRt7/CDirI8&#xA;VdirsVdirsVdiqmlvbpI0qRIsrfacKAxr4nriqS+XpXOu+aIzC6ouoRMJyU4MTp1pVQAxeopvVaY&#xA;qn2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD6lefUtOur0xmX6tDJN6QZVLempbiGcqgrTqxA8cVec6&#xA;V+c89yL2O+0P6ld2Wl6jq0kBnlB46etq4iZLm2tJ0aQXn2mi4/DVS4NQqs1L8+dGsZIrZrHnfTLf&#xA;zi0+sRq62+nesGdqj7czWsohTvTcrXFUv/Oj/nIbQPIclro8Czz6vfwx3IngjilS3tpGILlZJI6y&#xA;sqn01YcejNUfCwZACxfJdbyhLSGxikYwQA8VZmdmZjV5HZiWeR2JZ3YlmJqTmD4wmeb02inpgeHG&#xA;QZfazS0uToOkpaRIJtYuVNwYDUiJOnqS8asEWlKDdm+Fd8zMcaDpO0NR4uQkchsl8OkXekXp8y3r&#xA;y3NlMQdVjk5iWkbSCO9ZQVX00Rx/ozJSNfjH7xTym4TOlZWUMpDKwqrDcEHuMVbxV2KuxVIPP8sk&#xA;XknXSkLzlrC6UrGUBUGFwWPNkFF7038AcVT/ABV2KuxV2KuxV2KuxVIfLzzHXfNCGOkQ1CIrLyHx&#xA;E6daVHHqKYqn2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbJHHLG0Uqh43BV0YAqykUIIPUHFWPD8t/y&#xA;/FnHZf4d076pFL9Yjg+rRcBIQFLU4/yqF+QA6YqwH8xbryvFDN5Z0ayivNV1GW4uPVcFo7RLtj9c&#xA;cSAckST1ZOSBhzLsopViuLm1IjybCYYxc95fzf1/q5+5iN75B8q6ksbavYpqdypd5Lu5q0skkh5S&#xA;O7Cm7H6AKAUAAzVnUzu7cHJqJzNksx0ZvTu/URUkuIk5xiUEwx8jwWafj8RQNsqL8UjfCv7RW/RY&#xA;rlxdAulyETPD3fey200HUNMg/SskLaldmZbi9gmVTcyDivKX4GkjaeJkrCqUVU/drueWbdymV2V7&#xA;a31pDeWkqzW1wiyQyr0ZWFQRirBPNHl3WbI2dtp0epXvltfrTfozR7oWN1BO/o/VFWf1rZvq0ZE/&#xA;wcqLyUcSi0CrFLfyR+dA0y/uJtal/Td9H+jyiXd0IgZ1hjlvELTyQW6QhZXi9C2EnIjFWYeQb7zx&#xA;FfXdr5n0289aeO2dbsPDJZrJDZxRXAQ+rzUS3Ebso4ftVOKvLbrzD+e3k+a1e9guL6W+gBsfVEt9&#xA;Es9+VubmC4jgkqv1OVfSWT4uMRPBW3xVn+leZvNfmD8n9d1jWrH0rm5t75baAxGzYWogK82jeSY/&#xA;bDlTy+JaHFXp+KuxV2KuxV2KuxV2KpD5ea4/TvmhWRBANQiKSByXLfo605ApxAAG1DyNfAYqn2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxVC6hqlhp0PrXkywp+zXck/5Kjc/RluLDPIaiLQTSUW/nvy7NMIjM8VT&#xA;QPIhC/eK0+nMqXZuYC6tHGE/9SP0/V5j06cudRx40rWvhmAdubJ5j5//ADHkVRpWi0lurvlHbrXi&#xA;ZSv22J6pClQXalewqSAdbm1XFtH6epYSzcP08+/u93n5/wBrE9J0pLFJZHcz3103qXl03V37AVrx&#xA;jSvFF7DxNSdfKVuHI2vu7m4Mn1SxVXvXC7vukQc8VZwCCzMwpHGvxSNsKDkyyxY+I+TVOYiHqHkz&#xA;yfHpNnFNdhpL2vqkylJHEpDp6zMFWkrRPwKqeCD4U+Hc7zFDhjTnYMZjHfmWU5Y3JRFpd1YawbjT&#xA;6HTr53fULRif3cxFRcQV2HMikqdGJ5ijcuarxa586fmoNM0trbUNTkFxPCNbu7iwS1a0ma3vGe2i&#xA;dNLvP3XOKH4vqspBoC451CqeT+bPP+oWlhoukXOoHXZNWZbi5Nqlv/uNXT5pkdrq5057VeU6x/F9&#xA;XDEnjxSuyqG1fzN+e2n22lwPbRzt+m7ayv8AUbOJpXlh5QrcUtWtAsduayFZvVLU8OyqYeYp/wA5&#xA;ZNX1yXSbqaHTxqlrp+lxBraPjFIbX1JAkmk3jhKSS1naaQD/AH1tUKsx8yR63b/llqUV4y3eprpU&#xA;630ksymrfV29RhJDbW6OR2pBGG8FxVlmKuxV2KuxV2KuqPv6Yqs9eH1fR9RfVIqI6jlTxp1xVJPL&#xA;31j9O+aOXD0P0hFwpXny/R1pyr2p0piqfYq7FXYq7FXYq7FXYq7FXYqg9X1S30ywlvJ/sxj4U7sx&#xA;+yo+eXYMJyTEQgmnkeqapealePdXTlnY/Cv7Kr2VR2Azq8OGOOPDFpJtBSSRxxtJIwVFFWY9AMsJ&#xA;pCXP+Zd2LR9Hj5zQOSNOtVNHnmoSIuX7KmnLfZd2Ocj29HjqUdh1/WxOQnYK+k6XLbtLeXsgn1O6&#xA;p9YlXlwRR9mGEN9mNP8AhjVjuc5aUr2HJqJbv9QnFzHp2np6uoTbklGkSFNyZHVPiY0B4xru1D0U&#xA;Myyx47YTkIiy9H8geTE01Pr9yWe5Ysy8nLVd1QPI5ARXcmPZuA4j4FoozaafF1YaPGckvEly6fj8&#xA;d7N8zHauxV2KuxV2KuxV2KpB5/8ArP8AgnXfq/Dl9QuufqVpw9F+VKd6dMVT/FXYq7FXYq7FWKea&#xA;PL95d+cPKGsWsUsqaXd3RvSszLGkMun3MasYWdY2YzSIvILy360rirFrTytrLfm4nmiLRp4Reukt&#xA;7d3yabJFDaHTVhEMEic72O5W4Xi6q/pceRqa4qzLQU1D/EXmN1miFl+kIw0BiYylv0babiX1AoHt&#xA;6f04qyLFXYq7FXYq7FXYq7FXYq7FXnX5iaq0+ox6ejfurUBpB2Mjiv4LT7znQdlYKhxnnL7mqZYd&#xA;LLHFG0kjBI0FWY9AM2pNMWKXt7qOu3f1OwiZolIIQbDc0DSN29h91TnPdq9s4sA9Z9w6liIynsOS&#xA;aaR+WlxZ3Darc6gramB+4UR1hhXYmMVYMwanxnYt8gAOG1PtNPJYEI8B7+f4+DkDSxqrV31u4uvq&#xA;1ppkDS6ldRpI0dOQgEq1X1Psjkf2VqK0JJVQWFscduBMiIJPIPQvI3kiK0UPP++nLepcTt15mvcl&#xA;v3hVuLOtKgbBVAUZ2DFxHycDFCWpnvtAMo1Pzl5a0jUItMvLh47hhGOMcE8scQmb04fWlijeKH1G&#xA;HFPUZeR6VzZAO+AAFBA2H5o+R763gni1B4kubi1tLdbq2urR5Jb4E2vGO4iicrMFPB6cTQ77YpTu&#xA;DX9Hn0dtaS6UaWiSSvdSVjRUiJDs3MKQF4nriqg/m3y3HHayzahDDBe2wvbaeY+lE8BKKH9R+KCp&#xA;mSgJqa9MVRWlaxperWz3Om3Ud3bxzS27yRHkolt5GilT5q6Ef2YqjMVdirsVY5+YMepN5Q1o2s8M&#xA;UI0679dJYWlZh6LbIyyxhNq9VbFWR4q7FXYq7FWM6v58tLPWJdF03TL7X9WtY1lv7TTVg/0ZJAWj&#xA;M8t1Nawq0gFVQOXI3403xVH+U/NGl+aNAttb0z1BaXPNfTnT05Y5IpGiljkSp4ukiMp3xVN8VSHy&#xA;8tx+nfNDM6GA6hEEjCEOG/R1pyJfkQQdqDiKeJxVPsVdirsVdirsVdirsVdiriQASTQDqcVeJatq&#xA;Cz3d1fTMFWR3kZj0AJqM7HHAQgB3Bo5ligF95lvzb25MGl25BuLgjYDsP8qRv2V7dT2B5bt/t+On&#xA;jwx3meQ/SWUMfH/V+9NYfN35feW9St9Ck1OztLhxKZFe4irFJEEr9ZYt8Msgfbl1pQZ53PDqNReW&#xA;QlI+47+7yHlycsUNgjPPvmEWWjmys356lqgaC0VCOQUrWSRakfZTcb9aV2y3sfQHU5xH+Ebn9XxY&#xA;ZsghGyyryL5JhsUDikuoXA53V2QDx5qnMK1Ax5GME8t2PgAAvRwxmRoPMkz1M+EbRDOn8taLIeUl&#xA;vyegBbm4JoKb8SBmyjERFB3+LFHHERHJKda/L+y1O/lnGoXdpaXi266lYQGH0rn6o3KAs0kbypTY&#xA;NwcBgKHvWTYk9x+R3keTRbDSYopLSHT4z6UtqVhka8ESwxX0jIo5zQqrcOXwfE1VOKo+P8tLOXyx&#xA;e+WNT1O8v9GunDQQ1jt3gUTGbislukbOCxFfU5VA+eKsb1z8gNF1Y6ZavqN3b6fpVittbzxzM920&#xA;4RIDIxl5xhPq8XHgq05MWoO6rO/JvlKw8p6Eui6fLLLZxz3E8XrlWdfrU7zsvJVWoDyGld8VTvFX&#xA;Yq7FUg8/rct5J136vIkbCwui5kQuCnovyAAZKEjoe3gcVT/FXYq7FXYq8y0q28/eWNV83RWXls6x&#xA;NrmpvqWlawLq1itQs0McSRXgkkW5QW/pU/dRPUdKGuKqsn5i6xpfmO08mTTaLe6/FZWUl5c6jqf6&#xA;Ka5urtpUMdlapa3bSU9ENSo+2o64q9IxVIfLyTDXfNDmSsR1CILFxHwkadaVPLqa4qn2KuxV2Kux&#xA;V2KuxV2KuxVBa3cC30a/uCeIit5XLHtxQnLcAvJEeYWieT5tvLu613UYtOsjwiYk8m6BV+3K4FNl&#xA;HbxoO+bDtrtWOnxGXyHeWrhs8A+JegaRpVrYWcVvbpwgi3QH7TMftSP/AJTZ5JnzzyzM5m5FzQAB&#xA;QYr5w8meV5fMNv5uv3l/S1i1uLIRlKD0HZ/TCEUkaXkQS32RShWmZuizZpjwMYvjv7fur+1hMiI4&#xA;jyCDt7a81PVDPLRry6KpQElIkr8KKTTYFqlurHfwA9J7J7LjpcXCN5c5H8dHQ5s0tROhyfRtjZQ2&#xA;dusMQ2AFWPUkZrIQEQ7LT4I4o0ERk292KuxV2KuxV2KuxV2KuxVIPP8AHM/knXRFL6TCwuix4hqq&#xA;IXqu/j44qn+KuxV2KuxV2Kpdp2hWlhqeq6lE8j3OryxTXHqEFU9GBIESMACiUj5b1PJm3pQBVMcV&#xA;SHy9E413zRIZnZG1CJRAQnBSNOtKsCFD1Nd6tTFU+xV2KuxV2KuxV2KuxVzMFBZjRRuSegGKgW8w&#xA;/MXzSb3T72ztX42ccMnN605kIdz/AJPhmIdT+9jEfzh97dqZeBHgH95Ln/RHd7z18mD/AJY2dvda&#xA;ZJrKkSRXTtHbsOjRQsVrv2LhiCOo4+GaD2l1Zyajg/hgPv3tq08OGPmWR635hstMURuxe6kB9K3j&#xA;oZGp4A7D/WbYfr1Oi0OXUz4MYv7h72zJkjAXLkxBmvdSuxLPQy0ISNSTHEpO4Wu5/wApju3t0z03&#xA;sfsWGljQ9WQ85fq8nRZs89RKh9P45ss8p6VI2q2sVrGssqMJSJGMat6fxfEwWQqNqfZObzVEYsMq&#xA;/FubgwiGweqwT+YzMgnsbOOEkeo6XkrsF7kKbZAT7chnLOW8m0zz1+Ztp+mbuW3udZuYbye3t9Ik&#xA;iZAiPcTQWzKsemWhVQ/ocm+tT/uyzGnUKrrP81/zavtQu7VfKLWcdrLGjSz2t38Xr3sNnwjYHg5g&#xA;Wc3DuDxZF6KPixVfr3m38z0h8s3FrJdJLe6VZT3lrb6e/wAd5MT9a5q9rc0Ea0JQzQGP7X737Cqo&#xA;LUvzm/M3QoJItS8sNcmw0+5urzUxbXMdu7Q2L3MbE9IwJFWOTqCTtw2GKsj0H8yPPV75v0fR7ny6&#xA;7aVfRzNcaulrd28YVGnCzAXADRL+5jHpyDkeYINOPJV6hirsVdirsVSDz/FJL5J10JM8BWwumLRh&#xA;CWAhclTzVxRu9N/AjFU/xV2KuxV2KuxV2KpbZ+ZdCvdavdEtLyOfU9Njjlv7eM8jCJiwQOw+EMfT&#xA;Pw1qBQ03GKoPy9DTXfNE3Nzz1CJfTJ+AcdOtNwPE13xVPsVeVaV+dRn8zyWGpRW+maO2py29pqV3&#xA;zgjmsBb3HozpLKyxsZLmykoy/DwKinLfFUgtfzg/MjUHjh02Cwubu4vZbaG2hs4Z3VIo7mSnFNaE&#xA;lW+rrVpkhpuQrdAqyvyx+Zfme/1a00/WNDNipn1OC8vI/TmgZtPr+7txHPJcM6kENyhAb9nFUri/&#xA;PaZ/K1zr0mj3Nv8AVL64jmtZLadSLW3X1PTMj+nGt0yEfDUgGvWmKpv5B/OC280NqFzd28Wl6ZaQ&#xA;27xztKz1aWa5gkZ2KRhYg9pRXYDwO+2KvRUdHRXRgyMAVYGoIO4IIxVhPnPzPXnp9m3wD4Z5B+0f&#xA;5R7DvmHqs/CKDsIgabH4svrP0j9LyqYt5jnkgBZdChYpPINvrkikho1INfRjYfEf92H4fsg8tYDw&#xA;7/xOilIk2d5Fhz615otriTQtDvJLdg7C5ZRGUhoQrFeYJDbjZTt1pXr0ObsrTaqYyGNyIHUshqDj&#xA;judk+0fRmV2PIz3ctDdXklWdqeLMWag/ZBJzeaTRwxjhgBEeTrpSnnkya2to7ePinU/abuTm1hAR&#xA;GzsMWIQFB6L+XGkmOCbU5FoZv3UH+oDVj9LCn0Zpe1s9kQHTcuTAM0zTM3Yq7FXYqtkjjljaKVQ8&#xA;bgq6MAVZSKEEHqDiq7FXYq7FXYq7FUg8/wAHreSddX1Hj42F09YzxJ4wuaH2PfFU/wAVdirsVdir&#xA;sVdiqTweXzF5xvfMXr1F3p1rp4tuO6m1nuJvU5135fWqUp298VQug2MB8xeY7wtL6q6hGoUTSiKn&#xA;6NtOsIb0id+pWuKsixVSms7SZFSaCORFpxV1VgKbCgIxV0VnaRO0kUEccjGrOqqCTvuSB7nFVQIg&#xA;pRQKVI27nr9+Koa80vT7x7V7qBZWs5xdW3LokwRkD0GxIVzSvz64qiI4YYwBGioAAoCgD4VrQbdh&#xA;XFWF+YTYaLcNHo7vZyzqfrVrA3G2Abfn6NCqSHryj4k/tV2ynLkp2vZ2jEv3k/oH4+Ty/ULibXLy&#xA;TT7Zmj02BuGoXa/7tINGtYm+giVh9n7I+KpTUZJ72fh+t1Ov1ZzZDLp/D7mhJeX9+nlzy4iRG3VV&#xA;vbpQois4eLBFVB+0fTKrQUXvghjvcuty5Y4xxS/tTO+/LZNJhW606N2snp9duXAMjSjbm5AWvLxp&#xA;167nOr7FycQ4Dt+lxMMZ5zxHaKyGGOFAkYoB95+edPGIAoO0hARFBPPLnlu61m6AAMdpGf389Nh/&#xA;kr4scxtXq44Y/wBLoGyMber29vDbwRwQqEiiUKiDsBtnLTkZEk8y3KmRV2KuxV2KuxV2KuxV2Kux&#xA;V2Ksc/MHT4LnyhrUsjzK0OnXZQRTzRKf3LH40jdFfp+0DirI8VdirsVdirsVdirsVSHy9Ai675on&#xA;Bfm+oRKQXcpRdOtKUQngDvuQKnFU+xV2KuxV2KuxVL9c1aPTLFp2oZW+GFPFj/Ad8jOVBytJpjmn&#xA;w9OrxfX9Tv8AVL2fTbOVlkYhtU1JafuQ9G9GOhB9eRDUdkX4j+yG1+eVRsu27UzeFgMIDbl7vJC6&#xA;bYXepTDy/wCWofQtrb93dXyBvTiowEkcTAMHmAfkanr3rXji48RkbLxeTLw+cj0et+WPJVjpFjFb&#xA;KnCGPf061ZmO5Z28SewzYY9N1kxw6CU5ceX5Ml9OMx+mVHp048KClPCmZg25O1AAFBKn8o+W3m9U&#xA;2Kc61oCwX/gAQv4ZljXZgK4kcITSGCGCJYoY1iiQUVEAVQPYDMaUjI2dyyX5FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FUg8/28c/knXVcuAthdOPTd4zVYXIqUKkjxB2PfFU/xV2KuxV2KuxV2KuxVIfL1vbrr&#xA;vmi4WJBPJqESPMFAdlXTrQqpbqQKmmKp9irsVdirsVdiry38wNR13VfMZ8u6HG7X6RjlcBC8dpE4&#xA;FZ3qChkYmkaN9qlT8IOY87Jd9opQxYuYEpcz3fjoEHovlSK5mfy/pLlYbZ2OragA0iRyOzl0WUsn&#xA;rzPKrCV1b4DX9uvAjCD9TjazXRnHw4D095/H2pb5ZvPzP0X86h5UsdCNr+WaSSD9ICzNGAsS6M12&#xA;ftEzqqVP+rlwiBydRGAHIJn+aXmP8z7DX7q28qtdyE2BOnWkFkJo3uGilPN2ktpI34uq7/W4uG1Y&#xA;pOW5ZIfzH+ZPmcX17Pp819a6PL6r6QF0t2upzCNPjeOOK4jRgA91OebrsVr8SoVKrL/yv8weYtXt&#xA;NQTW547qe1e2AuIomhCvNaxyyQFXSJuSFuVSgNHG2Ks2xV2KuxV2KuxV2KuxV2KuxV2KuxV2KpB5&#xA;/tra48k66txEkypYXUiLIoYB1hcqwrXcHocVT/FXYq7FXYq7FXYq7FWP+XY7MeYPNMiLGLtr+ESu&#xA;AvqFBp1pwDH7VK1pXFWQYq7FXYq7FUj8w69cW00Oj6SqT+YL5WNtG9Wit4wDW7ugpVhCrDiAN3ei&#xA;gjdlVY9bWsl6lx5f8uXTi3aZj5m8zqyevLckRiaON0ofrDxED1AvCJVCLQqAirMdI0jTdI0+HT9O&#xA;t0trSBeMcUahR7migbnqTiqMxV2KrWjjZkZlDNGaxsQCVJBBI8NjTFXJHGnLgoXkSzcQBVj1Jp3x&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVY9+YUVlJ5I1wXaROgsbloxKFIEghcoRy/aB6YqyHFXYq7&#xA;FXYq7FWF+ZPzCuNI8yfo2LT0uNOtP0b+mL1pjHJD+mLt7K29GERv6vGSPlJV1ovSp2xVann+/P5j&#xA;yeVpdPjttNRxBDqU5ula4nNmt2Y7ci2NqxVW3U3AaisabYq15f8AOHlFdX86zfpG29XT9Qf68AwM&#xA;yrZ6dbet+7FZGEZjcbA7g4qm+ofmB5O06SWO/wBTjtmgj9aYyK6qsfomfmWK8ePpjrXqQv2mAKqS&#xA;6l+Z1tD530jy9Ym2uYL2Y2t8TI6XUMjQGeNlhZQXQrwPJaij1PECpVZ1iqVa/rn6NSCC2h+uatfu&#xA;YtOsQePNwKs8j0b04Y1+KR6bbAAuyqyrELDTb3VHu9K0+/dhPID5s80QgxSXMoRozbWBPqpGIjGE&#xA;YBv3anYmRmbFWd6bpthplhBp+nwJbWVsgjggjFFVR2GKonFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FWM/mLfaTB5P1mC+uLeKWbT7v6vFO6KzuIWA4KxqTUjpirJsVdirsVdirsVSPVfJXl&#xA;zVdatdavbd3v7QRhGWaaON/QkMsHqxI6xy+jK5ePmp4MarQ4qpW/kPy7BrNvrPC5mvrYKYTPd3M0&#xA;YlWD6t9YMUkjRmcw/A0pXmR1O5xVjnk/yB5HsL7z1pWnWwtzqdwtvqcSTyvI0M9hC/Jg7uQS9xKQ&#xA;/WpOKt/8qhh+tvcz6vc6hNeWN5pOo3F0sIkNldwQxqsSwxxRK8b2kbVKGtWr2GKsn0Hyyumalqd9&#xA;I6yyXjwrb0Whjgt7dIUUnu7FWZiKdQKbVKqK17XLfSLRJXje4ubiRYLKyhFZp5n6Ig9gCzt0VQWa&#xA;ig4qwjSNJ1fX7+edroD1ykeva5bh1EyQuGGl6a49J1tU5uHnB5M1afETwVeh2dna2VpDaWsYhtrd&#xA;BHDEvRVUUAxVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpB5/uba38k661xKkKvY&#xA;XUaNIwUF2hcKorTcnoMVT/FXYq7FXYq7FXYq7FUh8vTo2u+aIAH5pqETElHCUbTrSlHI4E7bgGox&#xA;VPsVQOtazZaPp7312WKKVSOKMc5ZZZGCRRRJ+08jsFUeOKvP9DtNc85avcalek2+llWtpbmIkB4e&#xA;bcrGxdXqFVlX61dKP37DjGQiKQq9KtrW2tbeO2tYkgt4VCRQxKERFHRVVaAAe2KqmKuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpB5/uI4PJOus4chrC6QemjyGrQuBUIGIHiTsO+Kp/&#xA;irsVdirsVdirsVdiqQ+Xp0bXfNEAD801CJiSjhKNp1pSjkcCdtwDUYqmup6lZaZp9xqF9L6NpbIZ&#xA;JpKMxCjwVQzMx6BVBJOwFcVea6JBqP5k6iuv3yvaeVYGkTSo1aj3ELcQ4oVIKTqGWaStafu4jw9S&#xA;SZV6hDDDBCkMKLFDEoSONAFVVUUCqBsAB0GKr8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiqQef7iODyTrrOHIawukHpo8hq0LgVCBiB4k7Dviqf4q7FXYq7FXYq7FXYqxvSdRtbX&#xA;U/N0t231a1tL1J7i7mISFY1020Z2LsaAIq1avQYqxOzsbr80dSi1fU4ZLf8AL+0Yvo2nyiSKXVGK&#xA;lfrVwhoVg7wDq6mrbGmKvT1VVUKoCqooqjYADsMVSzzPrg0PQ7nVTD9YFtwrFy4V5yKn2qNSnKvT&#xA;FWJan+bkVle+Y7dNIluh5aUvetFKgYqTCImCuFFD6kpfeqiPo3KgVZboGujVl1BWh+rz6bezWM8f&#xA;LmKxENG4ai/3kMiPSmxNN6VxVNMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqQef5/&#xA;R8k663pvJysLpKRjkRyhcVPsO+Kp/irsVdirsVdirsVeYeVfN2vXv5jXWnTaiblPrGqwX+h8IQun&#xA;wWU0aafPVEEym6jYvWRyH5fDThiq3WfLvmPUvOGr2ur6Nd6h5MkvYNQt7e0ls1S9lSytogl2JbqB&#xA;zBFJbt+5MZWRjVvhUBlWWjzB5lGmAjytejUBDtCJtP8AR9bh9nl9brw5bVp0xVVn8w68PT9Hyxft&#xA;VwJecunCiftEUu+uKqN9qmpXqvZXflK8udLuYZY7yGZ9NcPy4qEKNdlWRlL8q+2KvD/y9863eo/m&#xA;3r3lNvJEUOiWEWpWMVjaRRRloUu0BE4lmS1kZmXkzBj8RPHYnFXtWh3Wpabb3CL5X1FZLm7ubqZv&#xA;X0+Qu08zOGZmu6/YKinRQOI2AxVEDzF5m+pwMfK979cPpfWEE2n+mKsvrcG+t1PFeXGo32xVUl8w&#xA;68JIfS8sX5jLkXBaXTgQnBqFaXe558Rv2riqn+nPMX6S9T/Duo/UvR4+n6mm19XlXl/vX/L74qqR&#xA;eYdeMk3q+WL8RhwLcrLpxJTgtS1bvY8+Q27UxVTPmLzN9TnYeV7364PV+roZtP8ATNGb0ebfW6jk&#xA;vHlQbb4qqXHmHXhGPq/li/aTmgYPLpwHAuPUO12dwlSPfFVOTXPMR1KCRPLuoiyWGZZ4/U02plZo&#xA;jEw/0vsqyd++Kqi+Yde+syBvLF/9WCIY2Euncy5LcwR9bpQDjT6cVdB5h14+p63li/WjkRcJdONU&#xA;/ZJrd9cVUx5i8zfUEY+V736+UQyR+tp/pB9uYDfW60G9NsVdd655iaeya38u6ikSTFrxTJpvxRej&#xA;IoUf6Wf92lD9GKqjeYde+sxhfLF/9WKOZGMuncw4K8AB9bpQjlX6MVdF5h14yTer5YvxGHAtysun&#xA;ElOC1LVu9jz5DbtTFVqeYfMX1eQv5XvhcBpPSUS6fwKhm9LkfrdalePLwOKqV3rnmaSziEHlzUIr&#xA;r1bdpj6unceCyo06gm7PWMMBiqvL5h14SQ+l5YvzGXIuC0unAhODUK0u9zz4jftXFXL5h176zIG8&#xA;sX/1YIhjYS6dzLktzBH1ulAONPpxV0XmHXjJN6vli/EYcC3Ky6cSU4LUtW72PPkNu1MVSfzNqfmz&#xA;UvKeqaZD5Wv11HULK6toXWbTfSSSWNo4yxa85UqwJopxVm+KuxV2KuxV2KuxVoIgYuFAZqBmpuQO&#xA;lT9OKsA8kee9e1rzILW+W2+oajbX95YQwxus1qun34sTFcO0jrI0vLnUIlCGXelcVegYq7FXYqxu&#xA;TzBrCfmLbeXngt10m40q6v4rhXdrhpre4toirKVVESlyehYn/J6FVkmKuxV2KsJ87+afMuma7pun&#xA;6J9VmluFEg014Zri6uv3yxuoMTxpaRRo3JriXkvKgp4qs2xV2KuxVif5j6/5g0fR45dBe1+vsZGE&#xA;E8bXE8yxRtIY7a2WW29Rqgcz6o4JyahxVPPL2qDV9A0zVRxA1C0guhwqV/fRrJ8PIK1Pi2qMVTDF&#xA;XYqwH85PzKm8jeWjc2EKT6xdLMbFZw31dRAnqSPKVp0FAqg1ZiO1SFWdW9xDcW8VxA4khmRZInHR&#xA;lYVUj5g4qqYq7FWMfmJrHmXS9Bjfy1AlxrF1dQW1vHII32kashVJZrRHYIpoDKvzxVHeTdZbWvLG&#xA;nam8vrS3EX76QQ/V/wB4jFJAYvUuAhDqQQJGHgSMVTnFXYqlHnHXm8veU9Y11YfrD6XZT3awdA5h&#xA;jLhSewJG58MVSf8ALXzJ5g1rTtQi8xRxw6zpt39XuYYohDwEkEVwgISe9jJ4zihSZtqVo1RirL8V&#xA;dirsVdirsVdiqAsNA0PTr29vrDT7e1vdRcSX9zDEkck7itGlZQCx3PXFUfirsVdiqi1jZtex3zQR&#xA;m9ijeCO5Kj1FikZWdA3XizRqSPYYqrYq7FXYqk2s+TPKWt3tvfaxo9nqF7aAC2uLiFJJIwG5AKzA&#xA;kANviqc4q7FUPqOoWWm6fc6hfSrBZWcTz3M7/ZSKNSzsadgorirzrVfMOqeYdI0+71j8vk1Pylf3&#xA;dt6UNxILrUI4pmCxXsmmi2kRUUPVwJy6qTUdcVemRxpGixxqEjQBURRQADYAAdsVbxV2KqN9Y2d/&#xA;ZzWV7BHc2dyjRXFvKoeN0YUZWVqggjFVbFXYq7FUHrGi6RrVhJp+r2UGoWMtDJbXMayxkqaqSrgi&#xA;oO4xVXtLS1s7WK0tIY7e1gQRwW8ShI0RRRVRFACgDoBiqrirsVWyxRTRPFKiyRSKUkjcBlZWFCCD&#xA;sQRiqD0bQtF0SyFho1hb6dZBi4trWNIY+TfabigAqcVR2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KpD5+8sN5q8l6z5dS4+qvqlpJbx3FKhGcfCWHda/aHhiqU6fpn5k3t5pJ1640/SdO0v&#xA;jLdxaPPPM99KiFVVzNBbCC3qeZjHMmgHKmKqvkf8y9F846trVlpTwzW+kmEpdQXCT+qkzTIC6oP3&#xA;R5W7EKSTxKk0rTFWX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FUPqOn2uo2FxYXas9rdxtDOiO8TFHHFgHjKutQeqkHFVC30LSbfU21OC3EV61r&#xA;FYl0LKv1aB3eKMRg+mAjStSi138MVR+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k="/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:5D1286102729DF118FA1E8A11712CDBD"
    stRef:documentID="uuid:93038D712529DF118FA1E8A11712CDBD"/>
   <xapTPg:MaxPageSize
    stDim:w="792.000000"
    stDim:h="612.000000"
    stDim:unit="Points"/>
   <xapTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Helvetica-Oblique"
      stFnt:fontFamily="Helvetica"
      stFnt:fontFace="Oblique"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d18e1"
      stFnt:composite="False"
      stFnt:fontFileName="Helvetica.dfont"/>
     <rdf:li
      stFnt:fontName="Helvetica"
      stFnt:fontFamily="Helvetica"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d18e1"
      stFnt:composite="False"
      stFnt:fontFileName="Helvetica.dfont"/>
    </rdf:Bag>
   </xapTPg:Fonts>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xapG:groupName="Default Swatch Group"
      xapG:groupType="0"/>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -559.329 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 559.329 li
567.69 559.329 li
567.69 0 li
cp
clp
[1 0 0 1 -80.2625 0 ]ct
271.17 356.094 mo
270.603 356.094 li
271.734 354.849 li
271.737 354.852 li
273.753 352.629 li
273.751 352.627 li
275.769 350.406 li
275.769 350.406 li
276.159 349.976 li
281.606 343.978 li
281.817 343.746 li
281.817 343.746 li
284.52 340.769 li
285.858 339.3 li
285.856 339.298 li
287.873 337.076 li
287.874 337.077 li
289.89 334.863 li
289.886 334.86 li
291.904 332.638 li
291.906 332.64 li
293.922 330.417 li
293.921 330.416 li
295.173 329.038 li
295.173 329.346 li
294.921 330.102 li
294.669 330.849 li
294.669 332.352 li
294.426 333.099 li
294.426 334.35 li
294.669 334.845 li
294.669 336.096 li
294.921 336.6 li
294.921 337.095 li
295.173 337.347 li
295.425 337.851 li
295.668 338.346 li
295.92 338.598 li
296.172 338.85 li
296.676 339.345 li
296.919 339.597 li
297.423 339.849 li
297.675 339.849 li
298.17 340.101 li
298.674 340.344 li
298.926 340.344 li
297.423 341.352 li
296.172 342.351 li
294.669 343.35 li
293.418 344.349 li
292.176 345.096 li
290.925 346.095 li
289.674 346.851 li
288.423 347.598 li
287.172 348.345 li
286.173 349.101 li
284.922 349.848 li
283.923 350.352 li
282.672 351.099 li
281.673 351.594 li
280.674 352.098 li
279.675 352.602 li
278.919 353.097 li
277.92 353.601 li
276.921 354.096 li
276.174 354.348 li
275.418 354.852 li
274.671 355.095 li
273.924 355.347 li
273.168 355.599 li
272.421 355.851 li
271.926 355.851 li
271.17 356.094 li
268.572 356.094 mo
268.173 356.094 li
267.921 355.851 li
267.669 355.599 li
267.426 355.599 li
267.174 355.347 li
266.922 355.095 li
266.67 354.6 li
266.418 354.348 li
266.418 353.601 li
266.175 353.097 li
266.175 352.602 li
266.418 352.098 li
266.418 351.099 li
266.67 350.352 li
266.67 349.596 li
266.922 349.101 li
267.174 348.345 li
267.426 347.598 li
267.921 346.851 li
268.173 345.852 li
268.668 345.096 li
268.92 344.097 li
269.424 343.35 li
269.919 342.351 li
270.423 341.352 li
271.17 340.344 li
271.674 339.345 li
272.421 338.094 li
272.925 337.095 li
273.672 335.844 li
274.419 334.845 li
275.175 333.594 li
275.922 332.352 li
276.921 331.101 li
277.668 329.85 li
278.676 328.599 li
279.675 327.096 li
280.422 325.845 li
281.421 324.351 li
282.672 323.1 li
283.671 321.597 li
284.67 320.094 li
285.921 318.6 li
286.92 317.097 li
288.171 315.594 li
289.422 313.848 li
290.673 312.345 li
291.924 310.851 li
293.175 309.096 li
294.426 307.35 li
295.92 305.847 li
297.171 304.101 li
298.674 302.346 li
300.168 300.6 li
301.671 298.845 li
303.174 297.099 li
304.668 295.344 li
306.171 293.346 li
307.674 291.6 li
309.168 289.845 li
310.923 287.847 li
312.426 286.101 li
314.172 284.094 li
315.918 282.348 li
317.421 280.35 li
319.176 278.352 li
320.922 276.345 li
322.668 274.599 li
324.423 272.601 li
326.169 270.594 li
328.176 268.596 li
329.922 266.598 li
331.668 264.6 li
333.675 262.602 li
335.421 260.595 li
337.419 258.597 li
337.671 258.274 li
337.671 262.391 li
336.42 263.844 li
334.926 265.599 li
333.675 267.345 li
332.172 269.1 li
330.921 270.594 li
329.67 272.349 li
328.419 274.095 li
326.925 275.598 li
325.674 277.344 li
324.423 278.847 li
323.424 280.602 li
322.173 282.096 li
320.922 283.599 li
319.671 285.345 li
318.672 286.848 li
317.673 288.351 li
316.422 289.845 li
315.423 291.348 li
314.424 292.851 li
313.425 294.345 li
312.426 295.848 li
311.418 297.351 li
310.419 298.845 li
309.42 300.096 li
308.673 301.599 li
307.674 303.102 li
306.918 304.344 li
306.171 305.595 li
305.172 307.098 li
304.425 308.349 li
303.669 309.6 li
303.174 310.851 li
302.418 312.102 li
301.671 313.344 li
301.176 314.352 li
300.42 315.594 li
299.925 316.845 li
299.421 317.844 li
298.926 319.095 li
298.422 320.094 li
297.918 321.102 li
297.423 322.101 li
297.171 323.1 li
296.676 324.099 li
296.424 325.098 li
296.307 325.562 li
295.278 326.696 li
294.831 327.186 li
294.832 327.187 li
292.333 329.938 li
290.79 331.632 li
290.793 331.634 li
288.775 333.856 li
288.774 333.855 li
286.758 336.069 li
286.762 336.073 li
284.745 338.294 li
284.742 338.292 li
282.726 340.515 li
282.727 340.516 li
280.499 342.97 li
278.694 344.952 li
278.697 344.954 li
276.679 347.176 li
276.678 347.175 li
275.052 348.968 li
271.454 352.93 li
270.63 353.835 li
270.631 353.836 li
268.61 356.062 li
268.605 356.058 li
268.572 356.094 li
407.871 189.145 mo
407.673 188.847 li
407.571 188.697 li
408.42 187.848 li
410.418 186.102 li
412.425 184.095 li
414.423 182.349 li
416.421 180.594 li
418.419 178.596 li
420.426 176.85 li
422.424 175.095 li
424.422 173.349 li
426.42 171.594 li
428.175 169.848 li
430.173 168.345 li
432.171 166.599 li
433.926 164.844 li
435.924 163.35 li
437.67 161.595 li
439.668 160.101 li
441.423 158.598 li
443.169 157.095 li
445.176 155.601 li
446.922 154.098 li
448.668 152.595 li
450.423 151.101 li
452.169 149.85 li
453.924 148.347 li
455.418 147.096 li
457.173 145.602 li
458.919 144.351 li
460.422 143.1 li
461.925 141.849 li
463.671 140.598 li
465.174 139.599 li
465.185 139.59 li
464.238 140.634 li
464.239 140.635 li
458.191 147.295 li
458.19 147.294 li
456.497 149.161 li
453.875 152.048 li
452.673 152.847 li
451.422 153.846 li
450.171 154.602 li
448.668 155.601 li
447.174 156.6 li
445.923 157.599 li
444.42 158.85 li
442.926 159.849 li
441.423 160.848 li
439.92 162.099 li
438.426 163.098 li
436.923 164.349 li
435.42 165.6 li
433.926 166.851 li
432.423 168.102 li
430.668 169.344 li
429.174 170.595 li
427.671 171.846 li
425.925 173.097 li
424.422 174.6 li
422.676 175.851 li
421.173 177.345 li
419.418 178.596 li
417.924 180.099 li
416.169 181.602 li
414.423 183.096 li
412.92 184.347 li
411.174 185.85 li
409.419 187.344 li
407.925 189.099 li
407.871 189.145 li
490.176 149.219 mo
490.176 148.851 li
490.419 148.095 li
490.419 147.348 li
490.671 146.601 li
490.671 142.848 li
490.419 142.344 li
490.419 141.849 li
490.176 141.345 li
489.924 141.102 li
489.672 140.598 li
489.42 140.094 li
489.168 139.851 li
488.925 139.599 li
488.421 139.347 li
488.169 139.095 li
487.674 138.852 li
487.17 138.6 li
486.918 138.348 li
485.676 138.348 li
485.172 138.096 li
482.67 138.096 li
482.175 138.348 li
481.419 138.348 li
480.672 138.6 li
479.925 138.852 li
479.169 138.852 li
478.17 139.095 li
477.423 139.347 li
476.424 139.851 li
475.668 140.094 li
474.669 140.346 li
473.67 140.85 li
472.671 141.345 li
471.672 141.597 li
470.673 142.101 li
469.674 142.596 li
468.675 143.352 li
467.676 143.847 li
466.425 144.351 li
465.426 145.098 li
464.175 145.602 li
462.924 146.349 li
461.673 147.096 li
460.422 147.852 li
459.423 148.599 li
458.706 148.955 li
461.311 146.086 li
461.313 146.088 li
463.329 143.865 li
463.329 143.865 li
466.061 140.856 li
467.37 139.419 li
467.368 139.417 li
469.381 137.2 li
469.386 137.205 li
471.402 134.982 li
471.398 134.979 li
471.473 134.896 li
472.671 134.1 li
473.922 133.101 li
475.425 132.102 li
476.676 131.094 li
477.918 130.347 li
479.169 129.348 li
480.672 128.601 li
481.671 127.845 li
482.922 127.098 li
484.173 126.351 li
485.424 125.595 li
486.423 124.848 li
487.422 124.344 li
488.673 123.597 li
489.672 123.102 li
490.671 122.598 li
491.418 122.094 li
492.426 121.599 li
493.425 121.095 li
494.172 120.852 li
494.919 120.348 li
495.918 120.096 li
496.674 119.844 li
497.421 119.601 li
497.925 119.349 li
498.672 119.097 li
499.419 119.097 li
499.923 118.845 li
502.425 118.845 li
502.668 119.097 li
502.92 119.097 li
503.424 119.349 li
503.676 119.601 li
503.919 119.844 li
504.171 120.096 li
504.171 120.348 li
504.423 120.852 li
504.423 123.597 li
504.171 124.344 li
504.171 124.848 li
503.919 125.595 li
503.676 126.351 li
503.424 127.098 li
503.172 127.845 li
502.668 128.601 li
502.425 129.348 li
501.921 130.347 li
501.426 131.094 li
501.174 132.102 li
500.418 133.101 li
499.923 134.1 li
499.419 135.099 li
498.672 136.098 li
498.168 137.349 li
497.421 138.348 li
496.674 139.599 li
495.918 140.85 li
495.171 142.101 li
494.424 143.352 li
493.425 144.594 li
492.669 145.845 li
491.67 147.096 li
490.671 148.599 li
490.176 149.219 li
false sop
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 0.6 0.6 colr
f
302.175 340.596 mo
302.085 340.596 li
314.317 328.675 li
314.424 328.599 li
316.17 327.348 li
317.925 325.845 li
319.419 324.594 li
321.174 323.1 li
322.92 321.597 li
323.462 321.189 li
323.28 321.363 li
324.315 322.443 li
326.484 320.373 li
325.633 319.485 li
326.673 318.6 li
327.917 317.529 li
328.653 318.303 li
330.822 316.233 li
330.198 315.576 li
332.172 314.1 li
332.56 313.71 li
332.991 314.163 li
335.169 312.093 li
334.789 311.697 li
335.925 310.851 li
337.05 309.72 li
337.338 310.023 li
339.507 307.944 li
339.384 307.815 li
339.669 307.602 li
341.662 305.859 li
341.676 305.874 li
343.845 303.804 li
343.806 303.764 li
345.42 302.346 li
345.672 303.102 li
346.176 304.101 li
346.671 304.848 li
347.175 305.595 li
347.418 306.594 li
347.922 307.35 li
348.426 308.097 li
348.921 308.844 li
349.425 309.6 li
349.92 310.347 li
350.424 310.851 li
350.919 311.598 li
351.262 312.106 li
350.676 312.597 li
349.173 313.596 li
347.67 314.847 li
345.924 316.098 li
344.421 317.097 li
343.17 318.348 li
341.676 319.347 li
340.173 320.346 li
338.67 321.597 li
337.176 322.596 li
335.925 323.595 li
334.422 324.351 li
333.171 325.35 li
331.668 326.349 li
330.426 327.096 li
329.175 328.095 li
327.924 328.851 li
326.673 329.598 li
325.422 330.597 li
324.171 331.344 li
322.92 331.848 li
321.669 332.595 li
320.418 333.351 li
319.419 333.846 li
318.168 334.602 li
317.169 335.097 li
316.17 335.601 li
314.919 336.096 li
313.92 336.6 li
312.921 337.095 li
311.922 337.599 li
310.923 338.094 li
310.176 338.346 li
309.168 338.85 li
308.421 339.102 li
307.422 339.345 li
306.675 339.597 li
305.919 339.849 li
304.92 340.101 li
304.173 340.101 li
303.916 340.185 li
303.741 340.002 li
303.383 340.344 li
302.922 340.344 li
302.175 340.596 li
308.088 335.862 mo
305.919 337.932 li
306.954 339.012 li
309.123 336.942 li
308.088 335.862 li
312.426 331.713 mo
310.257 333.792 li
311.292 334.872 li
313.461 332.802 li
312.426 331.713 li
316.764 327.573 mo
314.595 329.643 li
315.63 330.732 li
317.799 328.662 li
316.764 327.573 li
321.111 323.433 mo
318.933 325.503 li
319.977 326.592 li
322.146 324.513 li
321.111 323.433 li
300.061 340.475 mo
299.673 340.344 li
298.926 340.344 li
300.42 339.345 li
301.923 338.346 li
303.426 337.095 li
303.753 336.876 li
300.061 340.475 li
417.798 249.969 mo
417.924 249.345 li
417.924 248.094 li
418.176 246.852 li
418.176 245.601 li
418.419 244.098 li
418.419 240.345 li
418.671 239.094 li
418.671 232.101 li
418.923 231.849 li
419.634 231.138 li
419.805 231.318 li
421.974 229.239 li
421.703 228.956 li
422.676 227.844 li
423.693 226.699 li
424.143 227.169 li
426.312 225.099 li
425.753 224.515 li
426.672 223.596 li
427.878 222.39 li
428.49 223.029 li
430.659 220.959 li
430.001 220.267 li
430.668 219.6 li
432.03 218.049 li
432.828 218.889 li
434.997 216.819 li
434.026 215.797 li
434.421 215.352 li
436.176 213.345 li
438.174 211.347 li
439.92 209.349 li
441.918 207.351 li
443.673 205.344 li
445.419 203.346 li
447.174 201.348 li
448.92 199.602 li
450.675 197.595 li
452.421 195.597 li
454.176 193.599 li
455.922 191.844 li
457.425 189.846 li
459.171 188.1 li
460.674 186.102 li
462.42 184.347 li
462.438 184.323 li
484.88 162.452 li
484.425 163.602 li
483.921 164.844 li
483.174 166.095 li
482.418 167.094 li
481.923 168.345 li
481.176 169.848 li
480.42 171.099 li
480.014 171.778 li
479.538 172.233 li
479.662 172.364 li
478.674 173.601 li
477.988 174.957 li
477.369 174.312 li
475.2 176.382 li
476.235 177.462 li
476.766 176.955 li
476.172 177.849 li
475.173 179.1 li
474.426 180.594 li
473.418 182.097 li
472.419 183.6 li
471.42 185.094 li
470.421 186.345 li
469.422 188.1 li
468.171 189.594 li
467.172 191.097 li
465.921 192.6 li
464.922 194.094 li
463.671 195.849 li
462.42 197.352 li
461.421 198.846 li
460.17 200.601 li
458.919 202.095 li
457.668 203.85 li
456.174 205.596 li
454.923 207.099 li
453.672 208.845 li
452.421 210.6 li
450.918 212.346 li
449.676 213.849 li
448.173 215.595 li
446.67 217.35 li
445.419 219.096 li
443.925 220.851 li
442.422 222.597 li
440.919 224.352 li
439.425 226.098 li
437.922 227.844 li
436.419 229.599 li
434.925 231.345 li
433.422 233.1 li
431.676 234.846 li
430.173 236.601 li
428.67 238.347 li
426.924 240.102 li
425.421 241.848 li
423.675 243.594 li
422.172 245.349 li
420.426 247.095 li
418.923 248.85 li
417.798 249.969 li
438.3 211.59 mo
436.131 213.66 li
437.166 214.749 li
439.335 212.67 li
438.3 211.59 li
442.647 207.45 mo
440.469 209.52 li
441.504 210.6 li
443.682 208.53 li
442.647 207.45 li
446.985 203.301 mo
444.816 205.371 li
445.851 206.46 li
448.02 204.39 li
446.985 203.301 li
451.323 199.161 mo
449.154 201.231 li
450.189 202.32 li
452.358 200.25 li
451.323 199.161 li
455.661 195.021 mo
453.492 197.091 li
454.527 198.18 li
456.696 196.101 li
455.661 195.021 li
460.008 190.881 mo
457.839 192.951 li
458.874 194.031 li
461.043 191.961 li
460.008 190.881 li
464.346 186.732 mo
462.177 188.802 li
463.212 189.891 li
465.381 187.821 li
464.346 186.732 li
468.684 182.592 mo
466.515 184.662 li
467.55 185.751 li
469.719 183.681 li
468.684 182.592 li
473.031 178.452 mo
470.853 180.522 li
471.888 181.602 li
474.066 179.532 li
473.031 178.452 li
472.102 172.805 mo
472.923 171.846 li
474.174 170.1 li
475.668 168.345 li
476.919 166.599 li
478.17 165.096 li
479.421 163.35 li
480.672 161.847 li
481.923 160.344 li
483.174 158.598 li
484.425 157.095 li
485.424 155.601 li
486.675 154.098 li
487.674 152.595 li
488.673 151.344 li
489.672 149.85 li
490.176 149.219 li
490.176 149.598 li
489.924 150.597 li
489.672 151.344 li
489.42 152.1 li
488.925 153.099 li
488.673 154.098 li
488.421 155.097 li
487.926 156.096 li
487.674 157.095 li
487.17 158.094 li
487.146 158.143 li
472.102 172.805 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.6 1 0.6 colr
f
298.926 340.344 mo
298.674 340.344 li
298.17 340.101 li
297.675 339.849 li
297.423 339.849 li
296.919 339.597 li
296.676 339.345 li
296.172 338.85 li
295.92 338.598 li
295.668 338.346 li
295.425 337.851 li
295.173 337.347 li
294.921 337.095 li
294.921 336.6 li
294.669 336.096 li
294.669 334.845 li
294.426 334.35 li
294.426 333.099 li
294.669 332.352 li
294.669 330.849 li
294.921 330.102 li
295.173 329.346 li
295.173 329.038 li
296.385 327.704 li
297.954 325.98 li
297.952 325.978 li
299.969 323.756 li
299.97 323.757 li
301.121 322.488 li
305.43 317.743 li
306.018 317.097 li
306.017 317.096 li
308.039 314.87 li
308.043 314.874 li
310.059 312.651 li
310.056 312.648 li
312.074 310.427 li
312.075 310.428 li
313.915 308.4 li
316.104 305.988 li
316.107 305.991 li
318.123 303.768 li
318.122 303.767 li
324.17 297.107 li
324.171 297.108 li
326.083 294.999 li
329.119 291.656 li
330.228 290.439 li
330.226 290.437 li
332.239 288.221 li
332.244 288.225 li
334.26 286.002 li
334.257 285.999 li
336.274 283.777 li
336.276 283.779 li
338.292 281.556 li
338.292 281.556 li
339.131 280.631 li
339.174 280.845 li
339.174 281.844 li
339.426 283.095 li
339.669 284.094 li
339.921 285.345 li
340.173 286.344 li
340.425 287.595 li
340.668 288.594 li
340.92 289.602 li
341.172 290.601 li
341.424 291.852 li
341.676 292.851 li
342.171 293.85 li
342.423 294.849 li
342.675 295.848 li
343.17 296.847 li
343.422 297.846 li
343.515 298.125 li
303.753 336.876 li
303.426 337.095 li
301.923 338.346 li
300.42 339.345 li
298.926 340.344 li
314.317 328.675 mo
344.163 299.589 li
344.169 299.601 li
344.673 300.6 li
344.925 301.347 li
345.42 302.346 li
343.806 303.764 li
342.81 302.724 li
340.641 304.794 li
341.662 305.859 li
339.669 307.602 li
339.384 307.815 li
338.472 306.864 li
336.303 308.934 li
337.05 309.72 li
335.925 310.851 li
334.789 311.697 li
334.125 311.004 li
331.956 313.074 li
332.56 313.71 li
332.172 314.1 li
330.198 315.576 li
329.787 315.144 li
327.618 317.214 li
327.917 317.529 li
326.673 318.6 li
325.633 319.485 li
325.449 319.293 li
323.462 321.189 li
322.92 321.597 li
321.174 323.1 li
319.419 324.594 li
317.925 325.845 li
316.17 327.348 li
314.424 328.599 li
314.317 328.675 li
296.307 325.562 mo
296.424 325.098 li
296.676 324.099 li
297.171 323.1 li
297.423 322.101 li
297.918 321.102 li
298.422 320.094 li
298.926 319.095 li
299.421 317.844 li
299.925 316.845 li
300.42 315.594 li
301.176 314.352 li
301.671 313.344 li
302.418 312.102 li
303.174 310.851 li
303.669 309.6 li
304.425 308.349 li
305.172 307.098 li
306.171 305.595 li
306.918 304.344 li
307.674 303.102 li
308.673 301.599 li
309.42 300.096 li
310.419 298.845 li
311.418 297.351 li
312.426 295.848 li
313.425 294.345 li
314.424 292.851 li
315.423 291.348 li
316.422 289.845 li
317.673 288.351 li
318.672 286.848 li
319.671 285.345 li
320.922 283.599 li
322.173 282.096 li
323.424 280.602 li
324.423 278.847 li
325.674 277.344 li
326.925 275.598 li
328.419 274.095 li
329.67 272.349 li
330.921 270.594 li
332.172 269.1 li
333.675 267.345 li
334.926 265.599 li
336.42 263.844 li
337.671 262.391 li
337.671 267.597 li
337.923 268.848 li
337.923 271.35 li
338.175 272.349 li
338.175 274.851 li
338.418 276.102 li
338.67 277.344 li
338.67 278.352 li
338.763 278.81 li
337.181 280.552 li
337.176 280.548 li
335.16 282.771 li
335.163 282.774 li
333.146 284.995 li
333.144 284.994 li
331.128 287.217 li
331.128 287.217 li
329.115 289.434 li
329.112 289.431 li
327.096 291.654 li
327.098 291.655 li
325.08 293.877 li
325.08 293.877 li
324.976 293.991 li
321.05 298.315 li
321.048 298.314 li
319.032 300.537 li
319.032 300.537 li
316.205 303.65 li
314.991 304.983 li
314.993 304.985 li
312.98 307.202 li
312.975 307.197 li
310.959 309.42 li
310.963 309.423 li
308.945 311.645 li
308.943 311.643 li
306.927 313.866 li
306.928 313.867 li
304.915 316.083 li
304.911 316.08 li
302.895 318.303 li
302.897 318.305 li
300.88 320.527 li
300.879 320.526 li
300.014 321.48 li
296.307 325.562 li
418.671 232.101 mo
418.671 230.346 li
418.419 229.095 li
418.419 227.222 li
462.438 184.323 li
462.42 184.347 li
460.674 186.102 li
459.171 188.1 li
457.425 189.846 li
455.922 191.844 li
454.176 193.599 li
452.421 195.597 li
450.675 197.595 li
448.92 199.602 li
447.174 201.348 li
445.419 203.346 li
443.673 205.344 li
441.918 207.351 li
439.92 209.349 li
438.174 211.347 li
436.176 213.345 li
434.421 215.352 li
434.026 215.797 li
433.962 215.73 li
431.793 217.8 li
432.03 218.049 li
430.668 219.6 li
430.001 220.267 li
429.624 219.87 li
427.455 221.949 li
427.878 222.39 li
426.672 223.596 li
425.753 224.515 li
425.277 224.019 li
423.108 226.089 li
423.693 226.699 li
422.676 227.844 li
421.703 228.956 li
420.939 228.159 li
418.77 230.229 li
419.634 231.138 li
418.923 231.849 li
418.671 232.101 li
418.382 225.16 mo
418.176 224.1 li
418.176 222.849 li
418.037 222.299 li
418.176 222.021 li
418.176 221.85 li
418.176 221.526 li
418.347 221.184 li
418.671 220.527 li
418.671 220.347 li
418.671 219.528 li
418.923 219.024 li
418.923 218.844 li
418.923 218.772 li
419.175 218.277 li
419.175 218.097 li
419.175 217.026 li
419.418 216.522 li
419.418 213.786 li
419.202 213.57 li
419.175 213.534 li
419.175 213.102 li
419.175 212.535 li
418.95 212.319 li
418.923 212.283 li
418.923 211.536 li
418.698 211.32 li
418.671 211.284 li
418.671 211.041 li
418.455 210.816 li
418.203 210.564 li
418.176 210.537 li
418.176 210.285 li
417.951 210.069 li
417.672 209.79 li
417.456 209.565 li
417.204 209.322 li
416.736 208.845 li
416.475 208.845 li
416.448 208.818 li
415.98 208.35 li
415.738 208.35 li
415.674 208.098 li
415.422 207.099 li
414.918 206.1 li
414.675 204.849 li
414.423 203.85 li
414.171 202.851 li
413.676 201.852 li
413.424 200.844 li
413.172 199.845 li
412.883 199.416 li
412.91 199.385 li
412.911 199.386 li
413.763 198.446 li
418.519 193.21 li
418.959 192.726 li
418.958 192.725 li
420.98 190.499 li
420.984 190.503 li
423 188.28 li
422.997 188.278 li
425.015 186.056 li
425.016 186.057 li
427.032 183.843 li
427.028 183.839 li
429.045 181.618 li
429.048 181.62 li
431.064 179.397 li
431.063 179.396 li
433.297 176.935 li
435.096 174.96 li
435.093 174.958 li
437.111 172.736 li
437.112 172.737 li
438.726 170.958 li
445.18 163.85 li
445.185 163.854 li
447.201 161.631 li
447.198 161.628 li
449.215 159.406 li
449.217 159.408 li
451.233 157.185 li
451.233 157.185 li
453.246 154.968 li
453.249 154.971 li
455.265 152.748 li
455.263 152.746 li
457.281 150.525 li
457.281 150.525 li
457.604 150.169 li
458.706 148.955 li
459.423 148.599 li
460.422 147.852 li
461.673 147.096 li
462.924 146.349 li
464.175 145.602 li
465.426 145.098 li
466.425 144.351 li
467.676 143.847 li
468.675 143.352 li
469.674 142.596 li
470.673 142.101 li
471.672 141.597 li
472.671 141.345 li
473.67 140.85 li
474.669 140.346 li
475.668 140.094 li
476.424 139.851 li
477.423 139.347 li
478.17 139.095 li
479.169 138.852 li
479.925 138.852 li
480.672 138.6 li
481.419 138.348 li
482.175 138.348 li
482.67 138.096 li
485.172 138.096 li
485.676 138.348 li
486.918 138.348 li
487.17 138.6 li
487.674 138.852 li
488.169 139.095 li
488.421 139.347 li
488.925 139.599 li
489.168 139.851 li
489.42 140.094 li
489.672 140.598 li
489.924 141.102 li
490.176 141.345 li
490.419 141.849 li
490.419 142.344 li
490.671 142.848 li
490.671 146.601 li
490.419 147.348 li
490.419 148.095 li
490.176 148.851 li
490.176 149.219 li
489.672 149.85 li
488.673 151.344 li
487.674 152.595 li
486.675 154.098 li
485.424 155.601 li
484.425 157.095 li
483.174 158.598 li
481.923 160.344 li
480.672 161.847 li
479.421 163.35 li
478.17 165.096 li
476.919 166.599 li
475.668 168.345 li
474.174 170.1 li
472.923 171.846 li
472.102 172.805 li
418.382 225.16 li
412.293 197.838 mo
411.921 197.1 li
411.669 196.101 li
411.174 195.345 li
410.67 194.346 li
410.418 193.599 li
409.923 192.852 li
409.419 191.844 li
408.924 191.097 li
408.672 190.35 li
408.168 189.594 li
407.871 189.145 li
407.925 189.099 li
409.419 187.344 li
411.174 185.85 li
412.92 184.347 li
414.423 183.096 li
416.169 181.602 li
417.924 180.099 li
419.418 178.596 li
421.173 177.345 li
422.676 175.851 li
424.422 174.6 li
425.925 173.097 li
427.671 171.846 li
429.174 170.595 li
430.668 169.344 li
432.423 168.102 li
433.926 166.851 li
435.42 165.6 li
436.923 164.349 li
438.426 163.098 li
439.92 162.099 li
441.423 160.848 li
442.926 159.849 li
444.42 158.85 li
445.923 157.599 li
447.174 156.6 li
448.668 155.601 li
450.171 154.602 li
451.422 153.846 li
452.673 152.847 li
453.875 152.048 li
450.122 156.181 li
450.117 156.177 li
448.101 158.4 li
448.104 158.403 li
446.087 160.625 li
446.085 160.623 li
444.069 162.846 li
444.069 162.846 li
442.056 165.063 li
442.053 165.06 li
440.037 167.283 li
440.039 167.285 li
438.021 169.506 li
438.021 169.506 li
437.619 169.95 li
433.991 173.945 li
433.989 173.943 li
431.973 176.166 li
431.973 176.166 li
429.275 179.138 li
427.932 180.612 li
427.934 180.614 li
425.917 182.836 li
425.916 182.835 li
423.9 185.049 li
423.904 185.052 li
421.886 187.274 li
421.884 187.272 li
419.868 189.495 li
419.869 189.496 li
417.412 192.202 li
415.836 193.932 li
415.838 193.934 li
413.821 196.156 li
413.82 196.155 li
412.656 197.438 li
412.293 197.838 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.598923 0.761861 0.360784 colr
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
150.172 5.84802 mo
631.922 5.84802 li
631.922 487.598 li
150.172 487.598 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0.25 lw
150.172 487.598 mo
150.172 5.84802 li
@
1.25 lw
158.672 24.348 mo
150.172 24.348 li
158.672 24.348 mo
150.172 24.348 li
154.422 42.848 mo
150.172 42.848 li
154.422 61.348 mo
150.172 61.348 li
154.422 79.848 mo
150.172 79.848 li
154.422 98.348 mo
150.172 98.348 li
158.672 117.098 mo
150.172 117.098 li
154.422 135.598 mo
150.172 135.598 li
154.422 154.098 mo
150.172 154.098 li
154.422 172.598 mo
150.172 172.598 li
154.422 191.098 mo
150.172 191.098 li
158.672 209.598 mo
150.172 209.598 li
154.422 228.098 mo
150.172 228.098 li
154.422 246.848 mo
150.172 246.848 li
154.422 265.348 mo
150.172 265.348 li
154.422 283.848 mo
150.172 283.848 li
158.672 302.348 mo
150.172 302.348 li
154.422 320.848 mo
150.172 320.848 li
154.422 339.348 mo
150.172 339.348 li
154.422 357.848 mo
150.172 357.848 li
154.422 376.598 mo
150.172 376.598 li
158.672 395.098 mo
150.172 395.098 li
154.422 413.598 mo
150.172 413.598 li
154.422 432.098 mo
150.172 432.098 li
154.422 450.598 mo
150.172 450.598 li
154.422 469.098 mo
150.172 469.098 li
158.672 487.598 mo
150.172 487.598 li
@
372.42 322.344 mo
368.919 322.344 li
368.172 322.101 li
366.921 322.101 li
366.174 321.849 li
365.418 321.597 li
364.923 321.597 li
364.176 321.345 li
363.42 321.102 li
362.925 320.85 li
362.169 320.598 li
361.674 320.346 li
360.918 320.094 li
360.171 319.599 li
359.676 319.347 li
358.92 319.095 li
358.425 318.6 li
357.669 318.096 li
357.174 317.844 li
356.67 317.349 li
355.923 316.845 li
355.419 316.35 li
354.924 315.846 li
354.168 315.351 li
353.673 314.595 li
353.169 314.1 li
352.674 313.596 li
351.918 312.849 li
351.423 312.345 li
351.262 312.106 li
352.17 311.346 li
353.673 310.095 li
355.176 308.844 li
356.922 307.35 li
358.425 306.099 li
360.171 304.848 li
361.674 303.345 li
363.42 302.094 li
364.923 300.6 li
366.669 299.349 li
368.172 297.846 li
369.918 296.352 li
371.673 294.849 li
373.176 293.346 li
374.922 291.852 li
376.668 290.349 li
378.171 288.846 li
379.926 287.352 li
381.672 285.849 li
383.418 284.346 li
385.173 282.6 li
386.676 281.097 li
388.422 279.351 li
390.168 277.848 li
391.923 276.102 li
393.669 274.599 li
395.424 272.844 li
396.918 271.35 li
398.673 269.595 li
400.419 267.849 li
402.174 266.094 li
403.92 264.348 li
405.423 262.845 li
407.169 261.099 li
408.924 259.344 li
410.67 257.598 li
412.173 255.852 li
413.919 254.097 li
415.674 252.351 li
417.168 250.596 li
417.798 249.969 li
417.672 250.596 li
417.42 251.847 li
417.42 253.098 li
417.168 254.349 li
416.925 255.852 li
416.673 257.094 li
416.673 258.345 li
416.421 259.596 li
416.169 260.847 li
415.926 262.098 li
415.674 263.349 li
415.422 264.6 li
414.918 265.851 li
414.675 267.102 li
414.423 268.344 li
414.171 269.595 li
413.676 270.846 li
413.424 272.097 li
413.172 273.348 li
412.668 274.347 li
412.425 275.598 li
411.921 276.849 li
411.669 278.1 li
411.174 279.099 li
410.67 280.35 li
410.418 281.601 li
409.923 282.6 li
409.419 283.851 li
408.924 284.85 li
408.42 286.101 li
407.925 287.1 li
407.673 288.099 li
407.169 289.35 li
406.674 290.349 li
406.17 291.348 li
405.675 292.347 li
404.919 293.346 li
404.424 294.345 li
403.92 295.344 li
403.425 296.352 li
402.921 297.351 li
402.426 298.35 li
401.67 299.349 li
401.175 300.096 li
400.671 301.095 li
399.924 302.094 li
399.42 302.85 li
398.673 303.849 li
398.169 304.596 li
397.674 305.352 li
396.918 306.351 li
396.423 307.098 li
395.676 307.845 li
394.92 308.601 li
394.425 309.348 li
393.669 310.095 li
393.174 310.599 li
392.418 311.346 li
391.671 312.102 li
391.176 312.597 li
390.42 313.344 li
389.673 313.848 li
389.169 314.595 li
388.422 315.099 li
387.675 315.594 li
386.919 316.098 li
386.424 316.602 li
385.668 317.097 li
384.921 317.601 li
384.174 318.096 li
383.67 318.348 li
382.923 318.852 li
382.176 319.347 li
381.42 319.599 li
380.673 319.851 li
380.169 320.346 li
379.422 320.598 li
378.675 320.85 li
377.919 321.102 li
377.172 321.345 li
376.425 321.597 li
375.921 321.597 li
375.174 321.849 li
374.418 321.849 li
373.671 322.101 li
372.924 322.101 li
372.42 322.344 li
337.671 258.274 mo
337.671 257.346 li
337.923 256.095 li
337.923 253.602 li
338.175 252.351 li
338.175 251.1 li
338.418 249.849 li
338.418 248.598 li
338.67 247.095 li
338.67 245.844 li
338.922 244.602 li
339.174 243.351 li
339.174 242.1 li
339.426 240.849 li
339.669 239.598 li
339.921 238.347 li
340.173 237.096 li
340.425 235.845 li
340.668 234.594 li
340.92 233.1 li
341.172 231.849 li
341.424 230.598 li
341.676 229.599 li
342.171 228.348 li
342.423 227.097 li
342.675 225.846 li
343.17 224.595 li
343.422 223.344 li
343.926 222.102 li
344.169 220.851 li
344.673 219.852 li
344.925 218.601 li
345.42 217.35 li
345.924 216.351 li
346.176 215.1 li
346.671 214.101 li
347.175 212.85 li
347.67 211.851 li
348.174 210.6 li
348.426 209.601 li
348.921 208.35 li
349.425 207.351 li
349.92 206.352 li
350.424 205.344 li
350.919 204.345 li
351.675 203.346 li
352.17 202.347 li
352.674 201.348 li
353.169 200.349 li
353.673 199.35 li
354.42 198.351 li
354.924 197.352 li
355.419 196.596 li
356.175 195.597 li
356.67 194.85 li
357.174 193.851 li
357.921 193.095 li
358.425 192.096 li
359.172 191.349 li
359.676 190.602 li
360.423 189.846 li
360.918 189.099 li
361.674 188.352 li
362.169 187.596 li
362.925 186.849 li
363.672 186.102 li
364.176 185.598 li
364.923 184.851 li
365.67 184.095 li
366.174 183.6 li
366.921 183.096 li
367.668 182.349 li
368.172 181.845 li
368.919 181.35 li
369.675 180.846 li
370.422 180.351 li
370.926 179.847 li
371.673 179.352 li
372.42 178.848 li
373.176 178.596 li
373.923 178.101 li
374.418 177.849 li
375.174 177.345 li
375.921 177.102 li
376.668 176.85 li
377.424 176.598 li
377.919 176.346 li
378.675 176.094 li
379.422 175.851 li
380.169 175.599 li
380.925 175.347 li
381.672 175.347 li
382.176 175.095 li
383.67 175.095 li
384.426 174.852 li
387.171 174.852 li
387.918 175.095 li
389.169 175.095 li
389.925 175.347 li
390.42 175.347 li
391.176 175.599 li
391.923 175.851 li
392.418 175.851 li
393.174 176.094 li
393.921 176.346 li
394.425 176.598 li
395.172 177.102 li
395.676 177.345 li
396.423 177.597 li
396.918 178.101 li
397.674 178.344 li
398.169 178.848 li
398.925 179.352 li
399.42 179.595 li
400.176 180.099 li
400.671 180.594 li
401.175 181.098 li
401.922 181.602 li
402.426 182.097 li
402.921 182.844 li
403.425 183.348 li
403.92 184.095 li
404.676 184.599 li
405.171 185.346 li
405.675 185.85 li
406.17 186.597 li
406.674 187.344 li
407.169 188.1 li
407.571 188.697 li
406.422 189.846 li
404.424 191.601 li
402.174 193.599 li
400.176 195.597 li
398.169 197.352 li
396.171 199.35 li
393.921 201.348 li
391.923 203.346 li
389.925 205.344 li
387.675 207.351 li
385.668 209.349 li
383.67 211.347 li
381.672 213.345 li
379.422 215.352 li
377.424 217.35 li
375.426 219.348 li
373.419 221.346 li
371.169 223.596 li
369.171 225.594 li
367.173 227.601 li
365.175 229.599 li
362.925 231.849 li
360.918 233.847 li
358.92 235.845 li
356.922 237.852 li
354.924 240.102 li
352.926 242.1 li
350.919 244.098 li
348.921 246.096 li
346.923 248.346 li
345.168 250.344 li
343.17 252.351 li
341.172 254.349 li
339.174 256.347 li
337.671 258.274 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.6 0.6 1 colr
f
337.671 262.391 mo
337.671 258.274 li
339.174 256.347 li
341.172 254.349 li
343.17 252.351 li
345.168 250.344 li
346.923 248.346 li
348.921 246.096 li
350.919 244.098 li
352.926 242.1 li
354.924 240.102 li
356.922 237.852 li
358.92 235.845 li
360.918 233.847 li
362.925 231.849 li
365.175 229.599 li
367.173 227.601 li
369.171 225.594 li
371.169 223.596 li
373.419 221.346 li
375.426 219.348 li
377.424 217.35 li
379.422 215.352 li
381.672 213.345 li
383.67 211.347 li
385.668 209.349 li
387.675 207.351 li
389.925 205.344 li
391.923 203.346 li
393.921 201.348 li
396.171 199.35 li
398.169 197.352 li
400.176 195.597 li
402.174 193.599 li
404.424 191.601 li
406.422 189.846 li
407.571 188.697 li
407.673 188.847 li
407.871 189.145 li
406.17 190.602 li
404.424 192.096 li
402.669 193.599 li
400.923 195.102 li
399.42 196.848 li
397.674 198.351 li
395.919 200.097 li
394.173 201.6 li
392.418 203.346 li
390.924 204.849 li
389.169 206.595 li
387.423 208.35 li
385.668 209.844 li
383.922 211.599 li
382.176 213.345 li
380.673 215.1 li
378.918 216.846 li
377.172 218.601 li
375.426 220.095 li
373.923 221.85 li
372.168 223.596 li
370.422 225.351 li
368.919 227.097 li
367.173 228.852 li
365.418 230.598 li
363.924 232.344 li
362.169 234.099 li
360.675 235.845 li
359.172 237.6 li
357.426 239.346 li
355.923 241.344 li
354.168 243.099 li
352.674 244.845 li
351.171 246.6 li
349.668 248.346 li
348.174 250.101 li
346.671 251.847 li
345.168 253.602 li
343.674 255.348 li
342.171 257.094 li
340.668 258.849 li
339.174 260.352 li
337.923 262.098 li
337.671 262.391 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.598923 0.360784 0.761861 colr
f
351.262 312.106 mo
350.919 311.598 li
350.424 310.851 li
349.92 310.347 li
349.425 309.6 li
348.921 308.844 li
348.426 308.097 li
347.922 307.35 li
347.418 306.594 li
347.175 305.595 li
346.671 304.848 li
346.176 304.101 li
345.672 303.102 li
345.42 302.346 li
347.418 300.6 li
349.425 298.845 li
351.423 297.099 li
353.421 295.344 li
355.419 293.598 li
357.426 291.852 li
359.424 289.845 li
361.422 288.099 li
363.42 286.101 li
365.418 284.346 li
367.425 282.348 li
369.675 280.35 li
371.673 278.595 li
373.671 276.597 li
375.669 274.599 li
377.919 272.601 li
379.926 270.594 li
380.48 270.04 li
380.646 269.928 li
380.7 269.874 li
381.15 269.433 li
381.96 268.893 li
382.05 268.767 li
382.464 268.137 li
383.148 267.678 li
383.202 267.624 li
383.652 267.183 li
384.336 266.724 li
385.209 266.139 li
385.299 266.013 li
385.713 265.392 li
386.397 264.933 li
386.451 264.879 li
386.955 264.375 li
387.702 263.628 li
388.152 263.178 li
388.962 262.638 li
389.043 262.512 li
389.466 261.891 li
390.213 261.387 li
390.294 261.261 li
390.717 260.64 li
391.464 260.136 li
391.545 260.01 li
391.959 259.389 li
392.715 258.885 li
392.796 258.768 li
393.21 258.138 li
393.966 257.643 li
394.047 257.517 li
394.506 256.824 li
394.956 256.374 li
395.703 255.627 li
396.198 255.132 li
396.954 254.376 li
397.503 253.827 li
397.548 253.764 li
398.007 253.08 li
398.7 252.378 li
399.258 251.829 li
399.294 251.766 li
399.382 251.633 li
400.671 250.344 li
402.669 248.346 li
404.676 246.348 li
406.674 244.35 li
408.672 242.1 li
410.922 240.102 li
412.92 238.095 li
414.918 236.097 li
415.608 235.323 li
417.636 233.388 li
417.513 233.259 li
418.671 232.101 li
418.671 239.094 li
418.419 240.345 li
418.419 244.098 li
418.176 245.601 li
418.176 246.852 li
417.924 248.094 li
417.924 249.345 li
417.798 249.969 li
417.168 250.596 li
415.674 252.351 li
413.919 254.097 li
412.173 255.852 li
410.67 257.598 li
408.924 259.344 li
407.169 261.099 li
405.423 262.845 li
403.92 264.348 li
402.174 266.094 li
400.419 267.849 li
398.673 269.595 li
396.918 271.35 li
395.424 272.844 li
393.669 274.599 li
391.923 276.102 li
390.168 277.848 li
388.422 279.351 li
386.676 281.097 li
385.173 282.6 li
383.418 284.346 li
381.672 285.849 li
379.926 287.352 li
378.171 288.846 li
376.668 290.349 li
374.922 291.852 li
373.176 293.346 li
371.673 294.849 li
369.918 296.352 li
368.172 297.846 li
366.669 299.349 li
364.923 300.6 li
363.42 302.094 li
361.674 303.345 li
360.171 304.848 li
358.425 306.099 li
356.922 307.35 li
355.176 308.844 li
353.673 310.095 li
352.17 311.346 li
351.262 312.106 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.360784 0.598923 0.761861 colr
f
345.42 302.346 mo
344.925 301.347 li
344.673 300.6 li
344.169 299.601 li
344.163 299.589 li
362.533 281.686 li
362.961 281.547 li
363.006 281.52 li
363.51 281.268 li
364.005 281.016 li
364.509 280.773 li
365.049 280.494 li
365.085 280.476 li
365.796 279.999 li
366.255 279.765 li
366.714 279.54 li
367.31 279.341 li
366.687 279.936 li
367.722 281.025 li
369.891 278.955 li
369.105 278.128 li
369.297 278.001 li
369.801 277.749 li
369.837 277.722 li
370.548 277.245 li
371.115 276.966 li
371.205 276.876 li
371.642 276.439 li
372.06 276.876 li
374.229 274.806 li
374.128 274.7 li
374.148 274.68 li
374.796 274.248 li
375.3 273.996 li
376.146 273.429 li
376.2 273.375 li
376.65 272.934 li
377.397 272.43 li
377.451 272.376 li
377.901 271.935 li
378.585 271.476 li
379.404 270.927 li
379.449 270.882 li
379.899 270.432 li
380.48 270.04 li
379.926 270.594 li
377.919 272.601 li
375.669 274.599 li
373.671 276.597 li
371.673 278.595 li
369.675 280.35 li
367.425 282.348 li
365.418 284.346 li
363.42 286.101 li
361.422 288.099 li
359.424 289.845 li
357.426 291.852 li
355.419 293.598 li
353.421 295.344 li
351.423 297.099 li
349.425 298.845 li
347.418 300.6 li
345.42 302.346 li
347.148 298.575 mo
344.979 300.645 li
346.014 301.734 li
348.183 299.664 li
347.148 298.575 li
351.495 294.435 mo
349.317 296.505 li
350.361 297.594 li
352.53 295.524 li
351.495 294.435 li
355.833 290.295 mo
353.664 292.365 li
354.699 293.454 li
356.868 291.375 li
355.833 290.295 li
360.171 286.155 mo
358.002 288.225 li
359.037 289.305 li
361.206 287.235 li
360.171 286.155 li
364.509 282.006 mo
362.34 284.076 li
363.375 285.165 li
365.553 283.095 li
364.509 282.006 li
343.515 298.125 mo
343.422 297.846 li
343.17 296.847 li
342.675 295.848 li
342.423 294.849 li
342.171 293.85 li
341.676 292.851 li
341.424 291.852 li
341.172 290.601 li
340.92 289.602 li
340.668 288.594 li
340.425 287.595 li
340.173 286.344 li
339.921 285.345 li
339.669 284.094 li
339.426 283.095 li
339.174 281.844 li
339.174 280.845 li
339.131 280.631 li
341.017 278.554 li
342.324 277.119 li
342.322 277.117 li
344.34 274.896 li
344.34 274.896 li
344.673 274.529 li
344.673 274.671 li
344.421 275.175 li
344.421 279.405 li
344.646 279.63 li
344.673 279.657 li
344.673 280.413 li
344.889 280.629 li
344.925 280.656 li
344.925 280.908 li
345.141 281.124 li
345.168 281.16 li
345.168 281.412 li
345.393 281.628 li
345.42 281.655 li
345.42 281.907 li
345.645 282.132 li
345.888 282.375 li
346.14 282.627 li
346.392 282.879 li
346.644 283.131 li
347.112 283.599 li
347.364 283.599 li
347.391 283.626 li
347.859 284.094 li
348.111 284.094 li
348.363 284.346 li
348.669 284.346 li
348.993 284.346 li
349.497 284.598 li
349.668 284.598 li
350.613 284.598 li
350.865 284.85 li
351.171 284.85 li
352.35 284.85 li
352.503 284.769 li
352.845 284.598 li
354.348 284.598 li
354.51 284.517 li
354.852 284.346 li
355.986 284.346 li
356.202 284.13 li
356.229 284.094 li
356.598 284.094 li
356.76 284.022 li
357.255 283.77 li
357.597 283.599 li
358.101 283.599 li
358.254 283.518 li
358.758 283.266 li
358.764 283.263 li
343.515 298.125 li
338.763 278.81 mo
338.67 278.352 li
338.67 277.344 li
338.418 276.102 li
338.175 274.851 li
338.175 272.349 li
337.923 271.35 li
337.923 268.848 li
337.671 267.597 li
337.671 262.391 li
337.923 262.098 li
339.174 260.352 li
340.668 258.849 li
342.171 257.094 li
343.674 255.348 li
345.168 253.602 li
346.671 251.847 li
348.174 250.101 li
349.668 248.346 li
351.171 246.6 li
352.674 244.845 li
354.168 243.099 li
355.923 241.344 li
357.426 239.346 li
359.172 237.6 li
360.675 235.845 li
362.169 234.099 li
363.924 232.344 li
365.418 230.598 li
367.173 228.852 li
368.919 227.097 li
370.422 225.351 li
372.168 223.596 li
373.923 221.85 li
375.426 220.095 li
377.172 218.601 li
378.918 216.846 li
380.673 215.1 li
382.176 213.345 li
383.922 211.599 li
385.668 209.844 li
387.423 208.35 li
389.169 206.595 li
390.924 204.849 li
392.418 203.346 li
394.173 201.6 li
395.919 200.097 li
397.674 198.351 li
399.42 196.848 li
400.923 195.102 li
402.669 193.599 li
404.424 192.096 li
406.17 190.602 li
407.871 189.145 li
408.168 189.594 li
408.672 190.35 li
408.924 191.097 li
409.419 191.844 li
409.923 192.852 li
410.418 193.599 li
410.67 194.346 li
411.174 195.345 li
411.669 196.101 li
411.921 197.1 li
412.293 197.838 li
408.367 202.162 li
407.772 202.815 li
407.773 202.816 li
405.403 205.425 li
403.731 207.261 li
403.734 207.264 li
401.716 209.485 li
401.715 209.484 li
400.254 211.089 li
400.131 211.149 li
399.384 211.401 li
399.339 211.428 li
398.727 211.734 li
398.646 211.815 li
398.232 212.229 li
397.881 212.4 li
397.017 212.688 li
396.891 212.814 li
396.477 213.228 li
396.135 213.399 li
395.271 213.696 li
395.145 213.822 li
394.731 214.236 li
394.299 214.452 li
394.254 214.47 li
393.543 214.947 li
393.048 215.199 li
392.193 215.766 li
392.139 215.82 li
391.77 216.189 li
391.014 216.441 li
390.888 216.567 li
390.447 217.017 li
389.799 217.449 li
389.295 217.701 li
388.44 218.268 li
388.395 218.322 li
387.945 218.763 li
387.198 219.267 li
387.144 219.321 li
386.694 219.762 li
385.947 220.266 li
385.893 220.32 li
385.443 220.761 li
384.696 221.265 li
384.642 221.319 li
384.192 221.769 li
383.445 222.264 li
383.391 222.318 li
382.941 222.768 li
382.257 223.227 li
381.447 223.767 li
381.393 223.821 li
380.889 224.316 li
380.142 225.072 li
379.692 225.513 li
378.945 226.017 li
378.891 226.071 li
378.396 226.566 li
377.64 227.322 li
377.19 227.763 li
376.38 228.303 li
376.299 228.429 li
375.885 229.059 li
375.192 229.518 li
375.138 229.572 li
374.643 230.067 li
373.896 230.814 li
373.392 231.318 li
372.645 232.065 li
372.141 232.569 li
371.394 233.316 li
370.89 233.82 li
370.143 234.567 li
369.639 235.071 li
368.892 235.818 li
368.343 236.367 li
368.298 236.43 li
367.884 237.06 li
367.128 237.555 li
367.047 237.681 li
366.633 238.311 li
365.877 238.806 li
365.796 238.932 li
365.301 239.679 li
364.842 240.372 li
364.392 240.822 li
363.645 241.569 li
363.087 242.118 li
363.051 242.181 li
362.547 242.928 li
362.088 243.621 li
361.638 244.071 li
360.837 244.872 li
360.801 244.935 li
360.342 245.619 li
359.838 246.123 li
359.802 246.186 li
359.298 246.933 li
358.839 247.617 li
358.335 248.121 li
358.299 248.184 li
357.84 248.868 li
357.336 249.372 li
357.3 249.435 li
356.796 250.182 li
356.337 250.866 li
355.77 251.442 li
355.707 251.613 li
355.518 252.189 li
355.086 252.621 li
355.05 252.684 li
354.546 253.431 li
354.024 254.223 li
353.997 254.259 li
353.772 254.718 li
353.34 255.366 li
352.764 255.942 li
352.71 256.113 li
352.512 256.689 li
352.017 257.193 li
351.963 257.364 li
351.765 257.94 li
351.27 258.444 li
351.207 258.615 li
351.018 259.191 li
350.514 259.695 li
350.46 259.857 li
350.262 260.442 li
349.803 260.901 li
349.749 261.009 li
349.479 261.558 li
349.461 261.612 li
349.227 262.314 li
349.02 262.719 li
348.525 263.475 li
348.498 263.511 li
348.255 264.015 li
348.003 264.51 li
347.724 265.059 li
347.706 265.113 li
347.481 265.806 li
347.247 266.265 li
347.004 266.76 li
346.752 267.264 li
346.473 267.813 li
346.464 267.858 li
346.176 268.722 li
346.176 268.848 li
346.176 269.172 li
346.005 269.514 li
345.672 270.171 li
345.672 270.351 li
345.672 270.675 li
345.501 271.017 li
345.168 271.674 li
345.168 271.754 li
343.854 273.203 li
339.91 277.546 li
339.201 278.325 li
339.202 278.326 li
338.763 278.81 li
399.382 251.633 mo
399.753 251.073 li
400.203 250.632 li
401.004 249.822 li
401.049 249.768 li
401.508 249.075 li
402.003 248.58 li
402.048 248.517 li
402.488 247.845 li
404.613 245.817 li
404.319 245.508 li
404.505 245.322 li
404.55 245.268 li
405.045 244.512 li
405.504 243.828 li
406.008 243.324 li
406.044 243.261 li
406.16 243.089 li
406.782 243.738 li
408.951 241.668 li
407.965 240.64 li
408.006 240.579 li
408.501 240.075 li
409.104 239.184 li
409.131 239.085 li
409.329 238.5 li
409.752 238.077 li
409.797 238.014 li
410.319 237.222 li
410.346 237.186 li
410.571 236.727 li
411.003 236.079 li
411.579 235.503 li
411.633 235.332 li
411.831 234.756 li
412.326 234.252 li
412.38 234.081 li
412.578 233.505 li
413.073 233.001 li
413.136 232.839 li
413.367 232.145 li
418.419 227.222 li
418.419 229.095 li
418.671 230.346 li
418.671 232.101 li
417.513 233.259 li
416.601 232.299 li
414.432 234.369 li
415.467 235.458 li
415.608 235.323 li
414.918 236.097 li
412.92 238.095 li
410.922 240.102 li
408.672 242.1 li
406.674 244.35 li
404.676 246.348 li
402.669 248.346 li
400.671 250.344 li
399.382 251.633 li
412.263 236.439 mo
410.085 238.518 li
411.12 239.598 li
413.298 237.528 li
412.263 236.439 li
415.75 227.725 mo
415.863 227.385 li
416.097 226.935 li
416.34 226.431 li
416.592 225.936 li
416.871 225.387 li
416.88 225.333 li
417.114 224.64 li
417.339 224.181 li
417.672 223.524 li
417.672 223.344 li
417.672 223.029 li
417.843 222.687 li
418.037 222.299 li
418.176 222.849 li
418.176 224.1 li
418.382 225.16 li
415.75 227.725 li
403.749 209.474 mo
404.845 208.267 li
404.847 208.269 li
406.863 206.046 li
406.862 206.045 li
409.474 203.17 li
410.895 201.609 li
410.893 201.607 li
412.883 199.416 li
413.172 199.845 li
413.424 200.844 li
413.676 201.852 li
414.171 202.851 li
414.423 203.85 li
414.675 204.849 li
414.918 206.1 li
415.422 207.099 li
415.674 208.098 li
415.738 208.35 li
415.737 208.35 li
415.485 208.098 li
415.17 208.098 li
414.981 208.098 li
414.729 207.846 li
414.423 207.846 li
413.73 207.846 li
413.487 207.594 li
410.112 207.594 li
409.896 207.819 li
409.86 207.846 li
408.996 207.846 li
408.834 207.927 li
408.492 208.098 li
407.745 208.098 li
407.583 208.179 li
407.241 208.35 li
406.746 208.35 li
406.584 208.431 li
406.089 208.674 li
405.747 208.845 li
405.495 208.845 li
405.333 208.926 li
404.838 209.178 li
404.496 209.349 li
403.992 209.349 li
403.839 209.43 li
403.749 209.474 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.360246 0.455594 0.615532 colr
f
0.25 lw
150.172 487.598 mo
631.922 487.598 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
1.25 lw
631.922 479.098 mo
631.922 487.598 li
615.922 483.348 mo
615.922 487.598 li
599.922 483.348 mo
599.922 487.598 li
583.922 483.348 mo
583.922 487.598 li
567.672 483.348 mo
567.672 487.598 li
551.672 479.098 mo
551.672 487.598 li
535.672 483.348 mo
535.672 487.598 li
519.422 483.348 mo
519.422 487.598 li
503.422 483.348 mo
503.422 487.598 li
487.422 483.348 mo
487.422 487.598 li
471.422 479.098 mo
471.422 487.598 li
455.172 483.348 mo
455.172 487.598 li
439.172 483.348 mo
439.172 487.598 li
423.172 483.348 mo
423.172 487.598 li
407.172 483.348 mo
407.172 487.598 li
390.922 479.098 mo
390.922 487.598 li
374.922 483.348 mo
374.922 487.598 li
358.922 483.348 mo
358.922 487.598 li
342.922 483.348 mo
342.922 487.598 li
326.672 483.348 mo
326.672 487.598 li
310.672 479.098 mo
310.672 487.598 li
294.672 483.348 mo
294.672 487.598 li
278.672 483.348 mo
278.672 487.598 li
262.422 483.348 mo
262.422 487.598 li
246.422 483.348 mo
246.422 487.598 li
230.422 479.098 mo
230.422 487.598 li
214.422 483.348 mo
214.422 487.598 li
198.172 483.348 mo
198.172 487.598 li
182.172 483.348 mo
182.172 487.598 li
166.172 483.348 mo
166.172 487.598 li
150.172 479.098 mo
150.172 487.598 li
@
0.25 lw
631.922 487.598 mo
631.922 5.84802 li
@
1.25 lw
623.422 24.348 mo
631.922 24.348 li
623.422 24.348 mo
631.922 24.348 li
627.672 42.848 mo
631.922 42.848 li
627.672 61.348 mo
631.922 61.348 li
627.672 79.848 mo
631.922 79.848 li
627.672 98.348 mo
631.922 98.348 li
623.422 117.098 mo
631.922 117.098 li
627.672 135.598 mo
631.922 135.598 li
627.672 154.098 mo
631.922 154.098 li
627.672 172.598 mo
631.922 172.598 li
627.672 191.098 mo
631.922 191.098 li
623.422 209.598 mo
631.922 209.598 li
627.672 228.098 mo
631.922 228.098 li
627.672 246.848 mo
631.922 246.848 li
627.672 265.348 mo
631.922 265.348 li
627.672 283.848 mo
631.922 283.848 li
623.422 302.348 mo
631.922 302.348 li
627.672 320.848 mo
631.922 320.848 li
627.672 339.348 mo
631.922 339.348 li
627.672 357.848 mo
631.922 357.848 li
627.672 376.598 mo
631.922 376.598 li
623.422 395.098 mo
631.922 395.098 li
627.672 413.598 mo
631.922 413.598 li
627.672 432.098 mo
631.922 432.098 li
627.672 450.598 mo
631.922 450.598 li
627.672 469.098 mo
631.922 469.098 li
623.422 487.598 mo
631.922 487.598 li
@
0.25 lw
150.172 5.84802 mo
631.922 5.84802 li
@
1.25 lw
631.922 14.348 mo
631.922 5.84802 li
615.922 10.098 mo
615.922 5.84802 li
599.922 10.098 mo
599.922 5.84802 li
583.922 10.098 mo
583.922 5.84802 li
567.672 10.098 mo
567.672 5.84802 li
551.672 14.348 mo
551.672 5.84802 li
535.672 10.098 mo
535.672 5.84802 li
519.422 10.098 mo
519.422 5.84802 li
503.422 10.098 mo
503.422 5.84802 li
487.422 10.098 mo
487.422 5.84802 li
471.422 14.348 mo
471.422 5.84802 li
455.172 10.098 mo
455.172 5.84802 li
439.172 10.098 mo
439.172 5.84802 li
423.172 10.098 mo
423.172 5.84802 li
407.172 10.098 mo
407.172 5.84802 li
390.922 14.348 mo
390.922 5.84802 li
374.922 10.098 mo
374.922 5.84802 li
358.922 10.098 mo
358.922 5.84802 li
342.922 10.098 mo
342.922 5.84802 li
326.672 10.098 mo
326.672 5.84802 li
310.672 14.348 mo
310.672 5.84802 li
294.672 10.098 mo
294.672 5.84802 li
278.672 10.098 mo
278.672 5.84802 li
262.422 10.098 mo
262.422 5.84802 li
246.422 10.098 mo
246.422 5.84802 li
230.422 14.348 mo
230.422 5.84802 li
214.422 10.098 mo
214.422 5.84802 li
198.172 10.098 mo
198.172 5.84802 li
182.172 10.098 mo
182.172 5.84802 li
166.172 10.098 mo
166.172 5.84802 li
150.172 14.348 mo
150.172 5.84802 li
@
418.419 213.102 mo
417.672 213.102 li
417.672 212.85 li
418.419 212.85 li
417.888 213.381 li
417.645 213.129 li
417.42 212.913 li
417.42 212.157 li
417.393 212.13 li
417.168 211.905 li
417.168 211.662 li
417.141 211.626 li
416.889 211.374 li
416.673 211.158 li
416.673 210.906 li
416.646 210.879 li
417.168 210.348 li
417.168 211.095 li
416.925 211.095 li
416.169 211.095 li
416.169 210.411 li
416.142 210.375 li
415.89 210.132 li
416.421 209.601 li
416.421 210.348 li
416.169 210.348 li
415.863 210.348 li
415.395 209.88 li
415.143 209.628 li
415.674 209.097 li
415.674 209.844 li
415.422 209.844 li
415.107 209.844 li
414.864 209.601 li
414.675 209.601 li
414.36 209.601 li
414.108 209.349 li
413.424 209.349 li
413.109 209.349 li
412.857 209.097 li
410.733 209.097 li
410.706 209.124 li
410.481 209.349 li
409.347 209.349 li
409.005 209.52 li
408.852 209.601 li
408.096 209.601 li
407.754 209.772 li
407.601 209.844 li
407.097 209.844 li
406.755 210.015 li
406.26 210.267 li
406.098 210.348 li
405.846 210.348 li
405.504 210.519 li
405.009 210.771 li
404.847 210.852 li
404.352 210.852 li
404.01 211.023 li
403.956 211.041 li
403.209 211.293 li
402.759 211.518 li
402.255 211.77 li
401.76 212.022 li
401.256 212.265 li
400.761 212.517 li
400.707 212.544 li
399.96 212.796 li
399.618 212.967 li
399.204 213.381 li
399.114 213.462 li
398.511 213.768 li
398.457 213.795 li
397.827 214.002 li
397.449 214.38 li
397.368 214.461 li
396.756 214.767 li
396.711 214.794 li
396.081 215.001 li
395.703 215.379 li
395.613 215.46 li
395.046 215.748 li
394.335 216.225 li
394.299 216.252 li
393.795 216.495 li
393.147 216.927 li
392.706 217.377 li
392.58 217.503 li
391.824 217.755 li
391.455 218.124 li
391.401 218.178 li
390.546 218.745 li
390.051 218.997 li
389.403 219.429 li
388.953 219.879 li
388.899 219.933 li
388.152 220.428 li
387.702 220.878 li
387.648 220.932 li
386.901 221.427 li
386.451 221.877 li
386.397 221.931 li
385.65 222.435 li
385.2 222.876 li
385.146 222.93 li
384.399 223.434 li
383.949 223.875 li
383.904 223.929 li
383.085 224.469 li
382.401 224.928 li
381.951 225.378 li
381.204 226.125 li
380.7 226.629 li
380.646 226.683 li
379.899 227.178 li
379.449 227.628 li
378.702 228.375 li
378.198 228.879 li
378.153 228.933 li
377.46 229.392 li
377.046 230.013 li
376.965 230.139 li
376.146 230.679 li
375.705 231.129 li
374.949 231.876 li
374.454 232.38 li
373.698 233.127 li
373.203 233.631 li
372.456 234.378 li
371.952 234.882 li
371.205 235.629 li
370.701 236.124 li
369.954 236.88 li
369.504 237.33 li
369.045 238.014 li
368.964 238.14 li
368.217 238.635 li
367.794 239.265 li
367.713 239.391 li
366.966 239.886 li
366.543 240.516 li
366.048 241.263 li
366.003 241.326 li
365.454 241.875 li
364.698 242.631 li
364.257 243.072 li
363.798 243.765 li
363.294 244.512 li
363.258 244.575 li
362.7 245.124 li
362.007 245.826 li
361.548 246.51 li
361.503 246.573 li
361.008 247.077 li
360.549 247.761 li
360.045 248.517 li
360.009 248.58 li
359.505 249.075 li
359.046 249.768 li
359.001 249.822 li
358.506 250.326 li
358.047 251.01 li
357.543 251.766 li
357.507 251.829 li
357.075 252.252 li
356.886 252.837 li
356.823 252.999 li
356.256 253.575 li
355.797 254.268 li
355.32 254.979 li
355.095 255.429 li
355.068 255.474 li
354.546 256.266 li
354.501 256.329 li
354.078 256.752 li
353.88 257.337 li
353.826 257.499 li
353.331 258.003 li
353.133 258.588 li
353.079 258.75 li
352.575 259.254 li
352.386 259.839 li
352.323 260.001 li
351.828 260.505 li
351.63 261.081 li
351.576 261.252 li
351.036 261.792 li
350.865 262.134 li
350.631 262.836 li
350.613 262.89 li
350.343 263.43 li
350.325 263.475 li
349.821 264.222 li
349.596 264.681 li
349.344 265.185 li
349.119 265.635 li
348.885 266.337 li
348.867 266.382 li
348.597 266.931 li
348.345 267.435 li
348.093 267.93 li
347.868 268.389 li
347.67 268.974 li
347.67 269.352 li
347.67 269.523 li
347.346 270.18 li
347.175 270.522 li
347.175 270.846 li
347.175 271.026 li
346.842 271.683 li
346.671 272.025 li
346.671 272.349 li
346.671 272.529 li
346.419 273.024 li
346.419 273.096 li
346.419 273.276 li
346.176 273.771 li
346.176 274.851 li
346.176 275.022 li
345.924 275.526 li
345.924 278.784 li
345.951 278.82 li
346.176 279.036 li
346.176 279.783 li
346.203 279.819 li
346.419 280.035 li
346.419 280.287 li
346.455 280.314 li
346.671 280.539 li
346.671 280.791 li
346.698 280.818 li
346.923 281.034 li
346.923 281.286 li
346.95 281.322 li
347.202 281.565 li
347.454 281.817 li
347.706 282.069 li
347.949 282.321 li
347.418 282.852 li
347.418 282.096 li
347.67 282.096 li
347.985 282.096 li
348.453 282.564 li
348.705 282.816 li
348.174 283.347 li
348.174 282.6 li
348.426 282.6 li
348.732 282.6 li
348.984 282.852 li
349.173 282.852 li
349.353 282.852 li
349.848 283.095 li
350.919 283.095 li
351.234 283.095 li
351.486 283.347 li
351.999 283.347 li
352.332 283.176 li
352.494 283.095 li
353.997 283.095 li
354.339 282.924 li
354.492 282.852 li
355.365 282.852 li
355.392 282.816 li
355.608 282.6 li
356.247 282.6 li
356.589 282.429 li
357.084 282.177 li
357.246 282.096 li
357.741 282.096 li
358.083 281.925 li
358.587 281.673 li
358.749 281.601 li
359.244 281.601 li
359.586 281.43 li
360.09 281.178 li
360.585 280.926 li
361.089 280.674 li
361.584 280.431 li
361.638 280.404 li
362.385 280.152 li
362.835 279.927 li
363.339 279.675 li
363.834 279.423 li
364.293 279.198 li
365.004 278.721 li
365.049 278.694 li
365.589 278.424 li
366.084 278.181 li
366.138 278.154 li
366.768 277.938 li
367.146 277.569 li
367.227 277.479 li
367.794 277.2 li
368.505 276.723 li
368.541 276.696 li
369.045 276.444 li
369.756 275.976 li
369.792 275.949 li
370.224 275.733 li
370.638 275.319 li
370.692 275.265 li
371.547 274.698 li
372.042 274.446 li
372.69 274.014 li
373.14 273.564 li
373.194 273.519 li
374.049 272.952 li
374.544 272.7 li
375.192 272.268 li
375.642 271.818 li
375.696 271.764 li
376.443 271.269 li
376.893 270.819 li
376.947 270.765 li
377.757 270.225 li
378.441 269.766 li
378.891 269.316 li
378.945 269.262 li
379.692 268.767 li
380.142 268.317 li
380.196 268.263 li
380.88 267.804 li
381.294 267.183 li
381.384 267.057 li
382.194 266.517 li
382.644 266.067 li
382.698 266.013 li
383.508 265.473 li
384.129 265.059 li
384.552 264.429 li
384.633 264.303 li
385.443 263.763 li
385.893 263.322 li
386.64 262.566 li
387.144 262.071 li
387.198 262.017 li
387.882 261.558 li
388.296 260.928 li
388.377 260.811 li
389.133 260.307 li
389.547 259.686 li
389.628 259.56 li
390.384 259.056 li
390.798 258.435 li
390.879 258.309 li
391.635 257.805 li
392.049 257.184 li
392.13 257.058 li
392.877 256.554 li
393.3 255.933 li
393.336 255.87 li
393.894 255.321 li
394.641 254.565 li
395.145 254.07 li
395.892 253.314 li
396.342 252.873 li
396.801 252.18 li
396.837 252.117 li
397.638 251.316 li
398.088 250.866 li
398.547 250.182 li
398.592 250.119 li
399.141 249.57 li
399.843 248.868 li
400.302 248.184 li
400.338 248.121 li
400.842 247.617 li
401.301 246.933 li
401.796 246.186 li
401.841 246.123 li
402.336 245.619 li
402.795 244.935 li
402.84 244.872 li
403.335 244.368 li
403.794 243.684 li
404.298 242.928 li
404.343 242.874 li
404.838 242.37 li
405.297 241.686 li
405.801 240.93 li
405.837 240.867 li
406.341 240.372 li
406.8 239.679 li
406.836 239.616 li
407.34 239.121 li
407.745 238.518 li
407.961 237.861 li
408.015 237.69 li
408.591 237.123 li
409.023 236.475 li
409.248 236.016 li
409.275 235.971 li
409.797 235.179 li
409.842 235.116 li
410.265 234.693 li
410.463 234.108 li
410.517 233.946 li
411.012 233.442 li
411.21 232.857 li
411.264 232.695 li
411.768 232.191 li
411.957 231.615 li
411.975 231.561 li
412.254 231.012 li
412.308 230.904 li
412.767 230.445 li
412.956 229.86 li
412.974 229.806 li
413.253 229.266 li
413.271 229.221 li
413.775 228.474 li
414 228.015 li
414.225 227.556 li
414.459 226.863 li
414.477 226.809 li
414.747 226.26 li
414.999 225.765 li
415.251 225.261 li
415.476 224.811 li
415.71 224.109 li
415.728 224.064 li
415.998 223.515 li
416.169 223.173 li
416.169 222.849 li
416.169 222.669 li
416.502 222.012 li
416.673 221.67 li
416.673 221.346 li
416.673 221.175 li
416.997 220.509 li
417.168 220.167 li
417.168 219.348 li
417.168 219.168 li
417.42 218.673 li
417.42 218.601 li
417.42 218.421 li
417.672 217.917 li
417.672 216.846 li
417.672 216.675 li
417.924 216.171 li
417.924 214.407 li
417.888 214.38 li
417.672 214.155 li
417.672 213.102 li
418.419 213.102 li
419.175 213.102 li
419.175 213.534 li
419.202 213.57 li
419.418 213.786 li
419.418 216.522 li
419.175 217.026 li
419.175 218.097 li
419.175 218.277 li
418.923 218.772 li
418.923 218.844 li
418.923 219.024 li
418.671 219.528 li
418.671 220.347 li
418.671 220.527 li
418.347 221.184 li
418.176 221.526 li
418.176 221.85 li
418.176 222.021 li
417.843 222.687 li
417.672 223.029 li
417.672 223.344 li
417.672 223.524 li
417.339 224.181 li
417.114 224.64 li
416.88 225.333 li
416.871 225.387 li
416.592 225.936 li
416.34 226.431 li
416.097 226.935 li
415.863 227.385 li
415.629 228.087 li
415.62 228.132 li
415.341 228.681 li
415.089 229.185 li
415.071 229.221 li
414.576 229.977 li
414.369 230.382 li
414.135 231.084 li
414.081 231.255 li
413.541 231.795 li
413.37 232.137 li
413.136 232.839 li
413.073 233.001 li
412.578 233.505 li
412.38 234.081 li
412.326 234.252 li
411.831 234.756 li
411.633 235.332 li
411.579 235.503 li
411.003 236.079 li
410.571 236.727 li
410.346 237.186 li
410.319 237.222 li
409.797 238.014 li
409.752 238.077 li
409.329 238.5 li
409.131 239.085 li
409.104 239.184 li
408.501 240.075 li
408.006 240.579 li
407.547 241.263 li
407.502 241.326 li
407.007 241.83 li
406.548 242.514 li
406.044 243.261 li
406.008 243.324 li
405.504 243.828 li
405.045 244.512 li
404.55 245.268 li
404.505 245.322 li
404.001 245.826 li
403.542 246.51 li
403.506 246.573 li
403.002 247.077 li
402.543 247.761 li
402.048 248.517 li
402.003 248.58 li
401.508 249.075 li
401.049 249.768 li
401.004 249.822 li
400.203 250.632 li
399.753 251.073 li
399.294 251.766 li
399.258 251.829 li
398.7 252.378 li
398.007 253.08 li
397.548 253.764 li
397.503 253.827 li
396.954 254.376 li
396.198 255.132 li
395.703 255.627 li
394.956 256.374 li
394.506 256.824 li
394.047 257.517 li
393.966 257.643 li
393.21 258.138 li
392.796 258.768 li
392.715 258.885 li
391.959 259.389 li
391.545 260.01 li
391.464 260.136 li
390.717 260.64 li
390.294 261.261 li
390.213 261.387 li
389.466 261.891 li
389.043 262.512 li
388.962 262.638 li
388.152 263.178 li
387.702 263.628 li
386.955 264.375 li
386.451 264.879 li
386.397 264.933 li
385.713 265.392 li
385.299 266.013 li
385.209 266.139 li
384.336 266.724 li
383.652 267.183 li
383.202 267.624 li
383.148 267.678 li
382.464 268.137 li
382.05 268.767 li
381.96 268.893 li
381.15 269.433 li
380.7 269.874 li
380.646 269.928 li
379.899 270.432 li
379.449 270.882 li
379.404 270.927 li
378.585 271.476 li
377.901 271.935 li
377.451 272.376 li
377.397 272.43 li
376.65 272.934 li
376.2 273.375 li
376.146 273.429 li
375.3 273.996 li
374.796 274.248 li
374.148 274.68 li
373.698 275.13 li
373.653 275.184 li
372.798 275.751 li
372.303 275.994 li
371.646 276.435 li
371.205 276.876 li
371.115 276.966 li
370.548 277.245 li
369.837 277.722 li
369.801 277.749 li
369.297 278.001 li
368.586 278.469 li
368.55 278.496 li
368.118 278.712 li
367.704 279.126 li
367.578 279.252 li
366.714 279.54 li
366.255 279.765 li
365.796 279.999 li
365.085 280.476 li
365.049 280.494 li
364.509 280.773 li
364.005 281.016 li
363.51 281.268 li
363.006 281.52 li
362.961 281.547 li
362.214 281.79 li
361.755 282.015 li
361.26 282.267 li
360.756 282.519 li
360.261 282.771 li
359.757 283.023 li
359.595 283.095 li
359.1 283.095 li
358.758 283.266 li
358.254 283.518 li
358.101 283.599 li
357.597 283.599 li
357.255 283.77 li
356.76 284.022 li
356.598 284.094 li
356.229 284.094 li
356.202 284.13 li
355.986 284.346 li
354.852 284.346 li
354.51 284.517 li
354.348 284.598 li
352.845 284.598 li
352.503 284.769 li
352.35 284.85 li
351.171 284.85 li
350.865 284.85 li
350.613 284.598 li
349.668 284.598 li
349.497 284.598 li
348.993 284.346 li
348.669 284.346 li
348.363 284.346 li
347.895 283.878 li
348.426 283.347 li
348.426 284.094 li
348.174 284.094 li
347.859 284.094 li
347.391 283.626 li
347.139 283.374 li
347.67 282.852 li
347.67 283.599 li
347.418 283.599 li
347.112 283.599 li
346.644 283.131 li
346.392 282.879 li
346.14 282.627 li
345.888 282.375 li
345.645 282.132 li
345.42 281.907 li
345.42 281.655 li
345.393 281.628 li
345.168 281.412 li
345.168 281.16 li
345.141 281.124 li
344.925 280.908 li
344.925 280.656 li
344.889 280.629 li
344.673 280.413 li
344.673 279.657 li
344.646 279.63 li
344.421 279.405 li
344.421 275.175 li
344.673 274.671 li
344.673 273.6 li
344.673 273.42 li
344.925 272.925 li
344.925 272.844 li
344.925 272.673 li
345.168 272.169 li
345.168 271.845 li
345.168 271.674 li
345.501 271.017 li
345.672 270.675 li
345.672 270.351 li
345.672 270.171 li
346.005 269.514 li
346.176 269.172 li
346.176 268.848 li
346.176 268.722 li
346.464 267.858 li
346.473 267.813 li
346.752 267.264 li
347.004 266.76 li
347.247 266.265 li
347.481 265.806 li
347.706 265.113 li
347.724 265.059 li
348.003 264.51 li
348.255 264.015 li
348.498 263.511 li
348.525 263.475 li
349.02 262.719 li
349.227 262.314 li
349.461 261.612 li
349.479 261.558 li
349.749 261.009 li
349.803 260.901 li
350.262 260.442 li
350.46 259.857 li
350.514 259.695 li
351.018 259.191 li
351.207 258.615 li
351.27 258.444 li
351.765 257.94 li
351.963 257.364 li
352.017 257.193 li
352.512 256.689 li
352.71 256.113 li
352.764 255.942 li
353.34 255.366 li
353.772 254.718 li
353.997 254.259 li
354.024 254.223 li
354.546 253.431 li
355.05 252.684 li
355.086 252.621 li
355.518 252.189 li
355.707 251.613 li
355.77 251.442 li
356.337 250.866 li
356.796 250.182 li
357.3 249.435 li
357.336 249.372 li
357.84 248.868 li
358.299 248.184 li
358.335 248.121 li
358.839 247.617 li
359.298 246.933 li
359.802 246.186 li
359.838 246.123 li
360.342 245.619 li
360.801 244.935 li
360.837 244.872 li
361.638 244.071 li
362.088 243.621 li
362.547 242.928 li
363.051 242.181 li
363.087 242.118 li
363.645 241.569 li
364.392 240.822 li
364.842 240.372 li
365.301 239.679 li
365.796 238.932 li
365.877 238.806 li
366.633 238.311 li
367.047 237.681 li
367.128 237.555 li
367.884 237.06 li
368.298 236.43 li
368.343 236.367 li
368.892 235.818 li
369.639 235.071 li
370.143 234.567 li
370.89 233.82 li
371.394 233.316 li
372.141 232.569 li
372.645 232.065 li
373.392 231.318 li
373.896 230.814 li
374.643 230.067 li
375.138 229.572 li
375.192 229.518 li
375.885 229.059 li
376.299 228.429 li
376.38 228.303 li
377.19 227.763 li
377.64 227.322 li
378.396 226.566 li
378.891 226.071 li
378.945 226.017 li
379.692 225.513 li
380.142 225.072 li
380.889 224.316 li
381.393 223.821 li
381.447 223.767 li
382.257 223.227 li
382.941 222.768 li
383.391 222.318 li
383.445 222.264 li
384.192 221.769 li
384.642 221.319 li
384.696 221.265 li
385.443 220.761 li
385.893 220.32 li
385.947 220.266 li
386.694 219.762 li
387.144 219.321 li
387.198 219.267 li
387.945 218.763 li
388.395 218.322 li
388.44 218.268 li
389.295 217.701 li
389.799 217.449 li
390.447 217.017 li
390.888 216.567 li
391.014 216.441 li
391.77 216.189 li
392.139 215.82 li
392.193 215.766 li
393.048 215.199 li
393.543 214.947 li
394.254 214.47 li
394.299 214.452 li
394.731 214.236 li
395.145 213.822 li
395.271 213.696 li
396.135 213.399 li
396.477 213.228 li
396.891 212.814 li
397.017 212.688 li
397.881 212.4 li
398.232 212.229 li
398.646 211.815 li
398.727 211.734 li
399.339 211.428 li
399.384 211.401 li
400.131 211.149 li
400.59 210.924 li
401.085 210.681 li
401.589 210.429 li
402.084 210.177 li
402.588 209.925 li
402.633 209.907 li
403.38 209.655 li
403.839 209.43 li
403.992 209.349 li
404.496 209.349 li
404.838 209.178 li
405.333 208.926 li
405.495 208.845 li
405.747 208.845 li
406.089 208.674 li
406.584 208.431 li
406.746 208.35 li
407.241 208.35 li
407.583 208.179 li
407.745 208.098 li
408.492 208.098 li
408.834 207.927 li
408.996 207.846 li
409.86 207.846 li
409.896 207.819 li
410.112 207.594 li
413.487 207.594 li
413.73 207.846 li
414.423 207.846 li
414.729 207.846 li
414.981 208.098 li
415.17 208.098 li
415.485 208.098 li
415.953 208.566 li
415.422 209.097 li
415.422 208.35 li
415.674 208.35 li
415.98 208.35 li
416.448 208.818 li
416.7 209.07 li
416.169 209.601 li
416.169 208.845 li
416.421 208.845 li
416.736 208.845 li
417.204 209.322 li
417.456 209.565 li
417.672 209.79 li
417.672 210.348 li
416.925 210.348 li
416.925 209.601 li
417.168 209.601 li
417.483 209.601 li
417.951 210.069 li
418.176 210.285 li
418.176 210.537 li
418.203 210.564 li
418.455 210.816 li
418.671 211.041 li
418.671 211.284 li
418.698 211.32 li
418.923 211.536 li
418.923 212.283 li
418.95 212.319 li
419.175 212.535 li
419.175 213.102 li
418.419 213.102 li
f
gsave
150.174 487.602 mo
631.917 487.602 li
631.917 5.85 li
150.174 5.85 li
150.174 487.602 li
clp
149.652 487.053 mo
151.821 484.983 li
152.856 486.072 li
150.687 488.142 li
149.652 487.053 li
153.999 482.913 mo
156.168 480.843 li
157.203 481.923 li
155.034 484.002 li
153.999 482.913 li
158.337 478.773 mo
160.506 476.703 li
161.541 477.783 li
159.372 479.853 li
158.337 478.773 li
162.675 474.624 mo
164.844 472.554 li
165.879 473.643 li
163.71 475.713 li
162.675 474.624 li
167.013 470.484 mo
169.191 468.414 li
170.226 469.503 li
168.048 471.573 li
167.013 470.484 li
171.36 466.344 mo
173.529 464.274 li
174.564 465.354 li
172.395 467.433 li
171.36 466.344 li
175.698 462.204 mo
177.867 460.134 li
178.902 461.214 li
176.733 463.284 li
175.698 462.204 li
180.036 458.055 mo
182.205 455.985 li
183.24 457.074 li
181.071 459.144 li
180.036 458.055 li
184.383 453.915 mo
186.552 451.845 li
187.587 452.934 li
185.418 455.004 li
184.383 453.915 li
188.721 449.775 mo
190.89 447.705 li
191.925 448.785 li
189.756 450.855 li
188.721 449.775 li
193.059 445.635 mo
195.228 443.565 li
196.263 444.645 li
194.094 446.715 li
193.059 445.635 li
197.397 441.486 mo
199.575 439.416 li
200.61 440.505 li
198.432 442.575 li
197.397 441.486 li
201.744 437.346 mo
203.913 435.276 li
204.948 436.365 li
202.779 438.435 li
201.744 437.346 li
206.082 433.206 mo
208.251 431.136 li
209.286 432.216 li
207.117 434.286 li
206.082 433.206 li
210.42 429.066 mo
212.589 426.987 li
213.624 428.076 li
211.455 430.146 li
210.42 429.066 li
214.767 424.917 mo
216.936 422.847 li
217.971 423.936 li
215.802 426.006 li
214.767 424.917 li
219.105 420.777 mo
221.274 418.707 li
222.309 419.787 li
220.14 421.866 li
219.105 420.777 li
223.443 416.637 mo
225.612 414.567 li
226.647 415.647 li
224.478 417.717 li
223.443 416.637 li
227.781 412.497 mo
229.959 410.418 li
230.994 411.507 li
228.816 413.577 li
227.781 412.497 li
232.128 408.348 mo
234.297 406.278 li
235.332 407.367 li
233.163 409.437 li
232.128 408.348 li
236.466 404.208 mo
238.635 402.138 li
239.67 403.218 li
237.501 405.297 li
236.466 404.208 li
240.804 400.068 mo
242.973 397.998 li
244.008 399.078 li
241.839 401.148 li
240.804 400.068 li
245.151 395.919 mo
247.32 393.849 li
248.355 394.938 li
246.186 397.008 li
245.151 395.919 li
249.489 391.779 mo
251.658 389.709 li
252.693 390.798 li
250.524 392.868 li
249.489 391.779 li
253.827 387.639 mo
255.996 385.569 li
257.031 386.649 li
254.862 388.728 li
253.827 387.639 li
258.165 383.499 mo
260.343 381.429 li
261.378 382.509 li
259.2 384.579 li
258.165 383.499 li
262.512 379.35 mo
264.681 377.28 li
265.716 378.369 li
263.547 380.439 li
262.512 379.35 li
266.85 375.21 mo
269.019 373.14 li
270.054 374.229 li
267.885 376.299 li
266.85 375.21 li
271.188 371.07 mo
273.357 369 li
274.392 370.08 li
272.223 372.15 li
271.188 371.07 li
275.535 366.93 mo
277.704 364.86 li
278.739 365.94 li
276.57 368.01 li
275.535 366.93 li
279.873 362.781 mo
282.042 360.711 li
283.077 361.8 li
280.908 363.87 li
279.873 362.781 li
284.211 358.641 mo
286.38 356.571 li
287.415 357.66 li
285.246 359.73 li
284.211 358.641 li
288.549 354.501 mo
290.727 352.431 li
291.762 353.511 li
289.584 355.581 li
288.549 354.501 li
292.896 350.361 mo
295.065 348.282 li
296.1 349.371 li
293.931 351.441 li
292.896 350.361 li
297.234 346.212 mo
299.403 344.142 li
300.438 345.231 li
298.269 347.301 li
297.234 346.212 li
301.572 342.072 mo
303.741 340.002 li
304.785 341.091 li
302.607 343.161 li
301.572 342.072 li
305.919 337.932 mo
308.088 335.862 li
309.123 336.942 li
306.954 339.012 li
305.919 337.932 li
310.257 333.792 mo
312.426 331.713 li
313.461 332.802 li
311.292 334.872 li
310.257 333.792 li
314.595 329.643 mo
316.764 327.573 li
317.799 328.662 li
315.63 330.732 li
314.595 329.643 li
318.933 325.503 mo
321.111 323.433 li
322.146 324.513 li
319.977 326.592 li
318.933 325.503 li
323.28 321.363 mo
325.449 319.293 li
326.484 320.373 li
324.315 322.443 li
323.28 321.363 li
327.618 317.214 mo
329.787 315.144 li
330.822 316.233 li
328.653 318.303 li
327.618 317.214 li
331.956 313.074 mo
334.125 311.004 li
335.169 312.093 li
332.991 314.163 li
331.956 313.074 li
336.303 308.934 mo
338.472 306.864 li
339.507 307.944 li
337.338 310.023 li
336.303 308.934 li
340.641 304.794 mo
342.81 302.724 li
343.845 303.804 li
341.676 305.874 li
340.641 304.794 li
344.979 300.645 mo
347.148 298.575 li
348.183 299.664 li
346.014 301.734 li
344.979 300.645 li
349.317 296.505 mo
351.495 294.435 li
352.53 295.524 li
350.361 297.594 li
349.317 296.505 li
353.664 292.365 mo
355.833 290.295 li
356.868 291.375 li
354.699 293.454 li
353.664 292.365 li
358.002 288.225 mo
360.171 286.155 li
361.206 287.235 li
359.037 289.305 li
358.002 288.225 li
362.34 284.076 mo
364.509 282.006 li
365.553 283.095 li
363.375 285.165 li
362.34 284.076 li
366.687 279.936 mo
368.856 277.866 li
369.891 278.955 li
367.722 281.025 li
366.687 279.936 li
371.025 275.796 mo
373.194 273.726 li
374.229 274.806 li
372.06 276.876 li
371.025 275.796 li
375.363 271.656 mo
377.532 269.577 li
378.567 270.666 li
376.398 272.736 li
375.363 271.656 li
379.701 267.507 mo
381.879 265.437 li
382.914 266.526 li
380.745 268.596 li
379.701 267.507 li
384.048 263.367 mo
386.217 261.297 li
387.252 262.386 li
385.083 264.456 li
384.048 263.367 li
388.386 259.227 mo
390.555 257.157 li
391.59 258.237 li
389.421 260.307 li
388.386 259.227 li
392.724 255.087 mo
394.893 253.008 li
395.937 254.097 li
393.759 256.167 li
392.724 255.087 li
397.071 250.938 mo
399.24 248.868 li
400.275 249.957 li
398.106 252.027 li
397.071 250.938 li
401.409 246.798 mo
403.578 244.728 li
404.613 245.817 li
402.444 247.887 li
401.409 246.798 li
405.747 242.658 mo
407.916 240.588 li
408.951 241.668 li
406.782 243.738 li
405.747 242.658 li
410.085 238.518 mo
412.263 236.439 li
413.298 237.528 li
411.12 239.598 li
410.085 238.518 li
414.432 234.369 mo
416.601 232.299 li
417.636 233.388 li
415.467 235.458 li
414.432 234.369 li
418.77 230.229 mo
420.939 228.159 li
421.974 229.239 li
419.805 231.318 li
418.77 230.229 li
423.108 226.089 mo
425.277 224.019 li
426.312 225.099 li
424.143 227.169 li
423.108 226.089 li
427.455 221.949 mo
429.624 219.87 li
430.659 220.959 li
428.49 223.029 li
427.455 221.949 li
431.793 217.8 mo
433.962 215.73 li
434.997 216.819 li
432.828 218.889 li
431.793 217.8 li
436.131 213.66 mo
438.3 211.59 li
439.335 212.67 li
437.166 214.749 li
436.131 213.66 li
440.469 209.52 mo
442.647 207.45 li
443.682 208.53 li
441.504 210.6 li
440.469 209.52 li
444.816 205.371 mo
446.985 203.301 li
448.02 204.39 li
445.851 206.46 li
444.816 205.371 li
449.154 201.231 mo
451.323 199.161 li
452.358 200.25 li
450.189 202.32 li
449.154 201.231 li
453.492 197.091 mo
455.661 195.021 li
456.696 196.101 li
454.527 198.18 li
453.492 197.091 li
457.839 192.951 mo
460.008 190.881 li
461.043 191.961 li
458.874 194.031 li
457.839 192.951 li
462.177 188.802 mo
464.346 186.732 li
465.381 187.821 li
463.212 189.891 li
462.177 188.802 li
466.515 184.662 mo
468.684 182.592 li
469.719 183.681 li
467.55 185.751 li
466.515 184.662 li
470.853 180.522 mo
473.031 178.452 li
474.066 179.532 li
471.888 181.602 li
470.853 180.522 li
475.2 176.382 mo
477.369 174.312 li
478.404 175.392 li
476.235 177.462 li
475.2 176.382 li
479.538 172.233 mo
481.707 170.163 li
482.742 171.252 li
480.573 173.322 li
479.538 172.233 li
483.876 168.093 mo
486.045 166.023 li
487.08 167.112 li
484.911 169.182 li
483.876 168.093 li
488.223 163.953 mo
490.392 161.883 li
491.427 162.963 li
489.258 165.033 li
488.223 163.953 li
492.561 159.813 mo
494.73 157.734 li
495.765 158.823 li
493.596 160.893 li
492.561 159.813 li
496.899 155.664 mo
499.068 153.594 li
500.103 154.683 li
497.934 156.753 li
496.899 155.664 li
501.237 151.524 mo
503.415 149.454 li
504.45 150.543 li
502.272 152.613 li
501.237 151.524 li
505.584 147.384 mo
507.753 145.314 li
508.788 146.394 li
506.619 148.464 li
505.584 147.384 li
509.922 143.244 mo
512.091 141.165 li
513.126 142.254 li
510.957 144.324 li
509.922 143.244 li
514.26 139.095 mo
516.429 137.025 li
517.464 138.114 li
515.295 140.184 li
514.26 139.095 li
518.607 134.955 mo
520.776 132.885 li
521.811 133.974 li
519.642 136.044 li
518.607 134.955 li
522.945 130.815 mo
525.114 128.745 li
526.149 129.825 li
523.98 131.895 li
522.945 130.815 li
527.283 126.675 mo
529.452 124.596 li
530.487 125.685 li
528.318 127.755 li
527.283 126.675 li
531.621 122.526 mo
533.79 120.456 li
534.834 121.545 li
532.656 123.615 li
531.621 122.526 li
535.968 118.386 mo
538.137 116.316 li
539.172 117.396 li
537.003 119.475 li
535.968 118.386 li
540.306 114.246 mo
542.475 112.176 li
543.51 113.256 li
541.341 115.326 li
540.306 114.246 li
544.644 110.106 mo
546.813 108.027 li
547.848 109.116 li
545.679 111.186 li
544.644 110.106 li
548.982 105.957 mo
551.16 103.887 li
552.195 104.976 li
550.026 107.046 li
548.982 105.957 li
553.329 101.817 mo
555.498 99.747 li
556.533 100.827 li
554.364 102.906 li
553.329 101.817 li
557.667 97.677 mo
559.836 95.607 li
560.871 96.687 li
558.702 98.757 li
557.667 97.677 li
562.005 93.528 mo
564.174 91.458 li
565.218 92.547 li
563.04 94.617 li
562.005 93.528 li
566.352 89.388 mo
568.521 87.318 li
569.556 88.407 li
567.387 90.477 li
566.352 89.388 li
570.69 85.248 mo
572.859 83.178 li
573.894 84.258 li
571.725 86.337 li
570.69 85.248 li
575.028 81.108 mo
577.197 79.038 li
578.232 80.118 li
576.063 82.188 li
575.028 81.108 li
579.366 76.959 mo
581.544 74.889 li
582.579 75.978 li
580.41 78.048 li
579.366 76.959 li
583.713 72.819 mo
585.882 70.749 li
586.917 71.838 li
584.748 73.908 li
583.713 72.819 li
588.051 68.679 mo
590.22 66.609 li
591.255 67.689 li
589.086 69.768 li
588.051 68.679 li
592.389 64.539 mo
594.558 62.469 li
595.602 63.549 li
593.424 65.619 li
592.389 64.539 li
596.736 60.39 mo
598.905 58.32 li
599.94 59.409 li
597.771 61.479 li
596.736 60.39 li
601.074 56.25 mo
603.243 54.18 li
604.278 55.269 li
602.109 57.339 li
601.074 56.25 li
605.412 52.11 mo
607.581 50.04 li
608.616 51.12 li
606.447 53.19 li
605.412 52.11 li
609.75 47.97 mo
611.928 45.9 li
612.963 46.98 li
610.794 49.05 li
609.75 47.97 li
614.097 43.821 mo
616.266 41.751 li
617.301 42.84 li
615.132 44.91 li
614.097 43.821 li
618.435 39.681 mo
620.604 37.611 li
621.639 38.7 li
619.47 40.77 li
618.435 39.681 li
622.773 35.541 mo
624.942 33.471 li
625.977 34.551 li
623.808 36.621 li
622.773 35.541 li
627.12 31.401 mo
629.289 29.322 li
630.324 30.411 li
628.155 32.481 li
627.12 31.401 li
149.616 487.098 mo
151.632 484.875 li
152.748 485.883 li
150.723 488.106 li
149.616 487.098 li
153.648 482.652 mo
155.664 480.429 li
156.78 481.437 li
154.764 483.66 li
153.648 482.652 li
157.68 478.206 mo
159.705 475.992 li
160.812 477 li
158.796 479.223 li
157.68 478.206 li
161.721 473.769 mo
163.737 471.546 li
164.844 472.554 li
162.828 474.777 li
161.721 473.769 li
165.753 469.323 mo
167.769 467.109 li
168.876 468.117 li
166.86 470.331 li
165.753 469.323 li
169.785 464.886 mo
171.801 462.663 li
172.908 463.671 li
170.892 465.894 li
169.785 464.886 li
173.817 460.44 mo
175.833 458.226 li
176.949 459.234 li
174.933 461.448 li
173.817 460.44 li
177.849 456.003 mo
179.865 453.78 li
180.981 454.788 li
178.965 457.011 li
177.849 456.003 li
181.89 451.557 mo
183.906 449.334 li
185.013 450.351 li
182.997 452.565 li
181.89 451.557 li
185.922 447.12 mo
187.938 444.897 li
189.045 445.905 li
187.029 448.128 li
185.922 447.12 li
189.954 442.674 mo
191.97 440.451 li
193.077 441.459 li
191.061 443.682 li
189.954 442.674 li
193.986 438.237 mo
196.002 436.014 li
197.118 437.022 li
195.093 439.245 li
193.986 438.237 li
198.018 433.791 mo
200.034 431.568 li
201.15 432.576 li
199.134 434.799 li
198.018 433.791 li
202.05 429.354 mo
204.075 427.131 li
205.182 428.139 li
203.166 430.362 li
202.05 429.354 li
206.091 424.908 mo
208.107 422.685 li
209.214 423.693 li
207.198 425.916 li
206.091 424.908 li
210.123 420.471 mo
212.139 418.248 li
213.246 419.256 li
211.23 421.479 li
210.123 420.471 li
214.155 416.025 mo
216.171 413.802 li
217.278 414.81 li
215.262 417.033 li
214.155 416.025 li
218.187 411.579 mo
220.203 409.365 li
221.319 410.373 li
219.303 412.587 li
218.187 411.579 li
222.219 407.142 mo
224.235 404.919 li
225.351 405.927 li
223.335 408.15 li
222.219 407.142 li
226.26 402.696 mo
228.276 400.482 li
229.383 401.49 li
227.367 403.704 li
226.26 402.696 li
230.292 398.259 mo
232.308 396.036 li
233.415 397.044 li
231.399 399.267 li
230.292 398.259 li
234.324 393.813 mo
236.34 391.599 li
237.447 392.607 li
235.431 394.821 li
234.324 393.813 li
238.356 389.376 mo
240.372 387.153 li
241.488 388.161 li
239.463 390.384 li
238.356 389.376 li
242.388 384.93 mo
244.404 382.707 li
245.52 383.724 li
243.504 385.938 li
242.388 384.93 li
246.42 380.493 mo
248.445 378.27 li
249.552 379.278 li
247.536 381.501 li
246.42 380.493 li
250.461 376.047 mo
252.477 373.824 li
253.584 374.832 li
251.568 377.055 li
250.461 376.047 li
254.493 371.61 mo
256.509 369.387 li
257.616 370.395 li
255.6 372.618 li
254.493 371.61 li
258.525 367.164 mo
260.541 364.941 li
261.648 365.949 li
259.632 368.172 li
258.525 367.164 li
262.557 362.727 mo
264.573 360.504 li
265.689 361.512 li
263.673 363.735 li
262.557 362.727 li
266.589 358.281 mo
268.605 356.058 li
269.721 357.066 li
267.705 359.289 li
266.589 358.281 li
270.63 353.835 mo
272.646 351.621 li
273.753 352.629 li
271.737 354.852 li
270.63 353.835 li
274.662 349.398 mo
276.678 347.175 li
277.785 348.183 li
275.769 350.406 li
274.662 349.398 li
278.694 344.952 mo
280.71 342.738 li
281.817 343.746 li
279.801 345.96 li
278.694 344.952 li
282.726 340.515 mo
284.742 338.292 li
285.858 339.3 li
283.833 341.523 li
282.726 340.515 li
286.758 336.069 mo
288.774 333.855 li
289.89 334.863 li
287.874 337.077 li
286.758 336.069 li
290.79 331.632 mo
292.815 329.409 li
293.922 330.417 li
291.906 332.64 li
290.79 331.632 li
294.831 327.186 mo
296.847 324.972 li
297.954 325.98 li
295.938 328.194 li
294.831 327.186 li
298.863 322.749 mo
300.879 320.526 li
301.986 321.534 li
299.97 323.757 li
298.863 322.749 li
302.895 318.303 mo
304.911 316.08 li
306.018 317.097 li
304.002 319.311 li
302.895 318.303 li
306.927 313.866 mo
308.943 311.643 li
310.059 312.651 li
308.043 314.874 li
306.927 313.866 li
310.959 309.42 mo
312.975 307.197 li
314.091 308.205 li
312.075 310.428 li
310.959 309.42 li
314.991 304.983 mo
317.016 302.76 li
318.123 303.768 li
316.107 305.991 li
314.991 304.983 li
319.032 300.537 mo
321.048 298.314 li
322.155 299.322 li
320.139 301.545 li
319.032 300.537 li
323.064 296.1 mo
325.08 293.877 li
326.187 294.885 li
324.171 297.108 li
323.064 296.1 li
327.096 291.654 mo
329.112 289.431 li
330.228 290.439 li
328.203 292.662 li
327.096 291.654 li
331.128 287.217 mo
333.144 284.994 li
334.26 286.002 li
332.244 288.225 li
331.128 287.217 li
335.16 282.771 mo
337.176 280.548 li
338.292 281.556 li
336.276 283.779 li
335.16 282.771 li
339.201 278.325 mo
341.217 276.111 li
342.324 277.119 li
340.308 279.333 li
339.201 278.325 li
343.233 273.888 mo
345.249 271.665 li
346.356 272.673 li
344.34 274.896 li
343.233 273.888 li
347.265 269.442 mo
349.281 267.228 li
350.388 268.236 li
348.372 270.45 li
347.265 269.442 li
351.297 265.005 mo
353.313 262.782 li
354.429 263.79 li
352.404 266.013 li
351.297 265.005 li
355.329 260.559 mo
357.345 258.345 li
358.461 259.353 li
356.445 261.567 li
355.329 260.559 li
359.361 256.122 mo
361.386 253.899 li
362.493 254.907 li
360.477 257.13 li
359.361 256.122 li
363.402 251.676 mo
365.418 249.453 li
366.525 250.47 li
364.509 252.684 li
363.402 251.676 li
367.434 247.239 mo
369.45 245.016 li
370.557 246.024 li
368.541 248.247 li
367.434 247.239 li
371.466 242.793 mo
373.482 240.57 li
374.589 241.578 li
372.573 243.801 li
371.466 242.793 li
375.498 238.356 mo
377.514 236.133 li
378.63 237.141 li
376.614 239.364 li
375.498 238.356 li
379.53 233.91 mo
381.546 231.687 li
382.662 232.695 li
380.646 234.918 li
379.53 233.91 li
383.571 229.473 mo
385.587 227.25 li
386.694 228.258 li
384.678 230.481 li
383.571 229.473 li
387.603 225.027 mo
389.619 222.804 li
390.726 223.812 li
388.71 226.035 li
387.603 225.027 li
391.635 220.59 mo
393.651 218.367 li
394.758 219.375 li
392.742 221.598 li
391.635 220.59 li
395.667 216.144 mo
397.683 213.921 li
398.799 214.929 li
396.774 217.152 li
395.667 216.144 li
399.699 211.698 mo
401.715 209.484 li
402.831 210.492 li
400.815 212.715 li
399.699 211.698 li
403.731 207.261 mo
405.756 205.038 li
406.863 206.046 li
404.847 208.269 li
403.731 207.261 li
407.772 202.815 mo
409.788 200.601 li
410.895 201.609 li
408.879 203.823 li
407.772 202.815 li
411.804 198.378 mo
413.82 196.155 li
414.927 197.163 li
412.911 199.386 li
411.804 198.378 li
415.836 193.932 mo
417.852 191.718 li
418.959 192.726 li
416.943 194.94 li
415.836 193.932 li
419.868 189.495 mo
421.884 187.272 li
423 188.28 li
420.984 190.503 li
419.868 189.495 li
423.9 185.049 mo
425.916 182.835 li
427.032 183.843 li
425.016 186.057 li
423.9 185.049 li
427.932 180.612 mo
429.957 178.389 li
431.064 179.397 li
429.048 181.62 li
427.932 180.612 li
431.973 176.166 mo
433.989 173.943 li
435.096 174.96 li
433.08 177.174 li
431.973 176.166 li
436.005 171.729 mo
438.021 169.506 li
439.128 170.514 li
437.112 172.737 li
436.005 171.729 li
440.037 167.283 mo
442.053 165.06 li
443.16 166.068 li
441.144 168.291 li
440.037 167.283 li
444.069 162.846 mo
446.085 160.623 li
447.201 161.631 li
445.185 163.854 li
444.069 162.846 li
448.101 158.4 mo
450.117 156.177 li
451.233 157.185 li
449.217 159.408 li
448.101 158.4 li
452.142 153.963 mo
454.158 151.74 li
455.265 152.748 li
453.249 154.971 li
452.142 153.963 li
456.174 149.517 mo
458.19 147.294 li
459.297 148.302 li
457.281 150.525 li
456.174 149.517 li
460.206 145.08 mo
462.222 142.857 li
463.329 143.865 li
461.313 146.088 li
460.206 145.08 li
464.238 140.634 mo
466.254 138.411 li
467.37 139.419 li
465.345 141.642 li
464.238 140.634 li
468.27 136.188 mo
470.286 133.974 li
471.402 134.982 li
469.386 137.205 li
468.27 136.188 li
472.302 131.751 mo
474.327 129.528 li
475.434 130.536 li
473.418 132.759 li
472.302 131.751 li
476.343 127.305 mo
478.359 125.091 li
479.466 126.099 li
477.45 128.313 li
476.343 127.305 li
480.375 122.868 mo
482.391 120.645 li
483.498 121.653 li
481.482 123.876 li
480.375 122.868 li
484.407 118.422 mo
486.423 116.208 li
487.53 117.216 li
485.514 119.43 li
484.407 118.422 li
488.439 113.985 mo
490.455 111.762 li
491.571 112.77 li
489.555 114.993 li
488.439 113.985 li
492.471 109.539 mo
494.487 107.325 li
495.603 108.333 li
493.587 110.547 li
492.471 109.539 li
496.503 105.102 mo
498.528 102.879 li
499.635 103.887 li
497.619 106.11 li
496.503 105.102 li
500.544 100.656 mo
502.56 98.433 li
503.667 99.45 li
501.651 101.664 li
500.544 100.656 li
504.576 96.219 mo
506.592 93.996 li
507.699 95.004 li
505.683 97.227 li
504.576 96.219 li
508.608 91.773 mo
510.624 89.55 li
511.731 90.558 li
509.715 92.781 li
508.608 91.773 li
512.64 87.336 mo
514.656 85.113 li
515.772 86.121 li
513.756 88.344 li
512.64 87.336 li
516.672 82.89 mo
518.688 80.667 li
519.804 81.675 li
517.788 83.898 li
516.672 82.89 li
520.713 78.453 mo
522.729 76.23 li
523.836 77.238 li
521.82 79.461 li
520.713 78.453 li
524.745 74.007 mo
526.761 71.784 li
527.868 72.792 li
525.852 75.015 li
524.745 74.007 li
528.777 69.57 mo
530.793 67.347 li
531.9 68.355 li
529.884 70.578 li
528.777 69.57 li
532.809 65.124 mo
534.825 62.901 li
535.941 63.909 li
533.916 66.132 li
532.809 65.124 li
536.841 60.678 mo
538.857 58.464 li
539.973 59.472 li
537.957 61.695 li
536.841 60.678 li
540.873 56.241 mo
542.898 54.018 li
544.005 55.026 li
541.989 57.249 li
540.873 56.241 li
544.914 51.795 mo
546.93 49.581 li
548.037 50.589 li
546.021 52.803 li
544.914 51.795 li
548.946 47.358 mo
550.962 45.135 li
552.069 46.143 li
550.053 48.366 li
548.946 47.358 li
552.978 42.912 mo
554.994 40.698 li
556.101 41.706 li
554.085 43.92 li
552.978 42.912 li
557.01 38.475 mo
559.026 36.252 li
560.142 37.26 li
558.126 39.483 li
557.01 38.475 li
561.042 34.029 mo
563.058 31.815 li
564.174 32.823 li
562.158 35.037 li
561.042 34.029 li
565.074 29.592 mo
567.099 27.369 li
568.206 28.377 li
566.19 30.6 li
565.074 29.592 li
569.115 25.146 mo
571.131 22.923 li
572.238 23.94 li
570.222 26.154 li
569.115 25.146 li
573.147 20.709 mo
575.163 18.486 li
576.27 19.494 li
574.254 21.717 li
573.147 20.709 li
577.179 16.263 mo
579.195 14.04 li
580.302 15.048 li
578.286 17.271 li
577.179 16.263 li
581.211 11.826 mo
583.227 9.603 li
584.343 10.611 li
582.327 12.834 li
581.211 11.826 li
585.243 7.38 mo
587.259 5.157 li
588.375 6.165 li
586.359 8.388 li
585.243 7.38 li
589.284 2.943 mo
591.3 0.72 li
592.407 1.728 li
590.391 3.951 li
589.284 2.943 li
593.316 -1.503 mo
595.332 -3.726 li
596.439 -2.718 li
594.423 -0.495 li
593.316 -1.503 li
597.348 -5.94 mo
599.364 -8.163 li
600.471 -7.155 li
598.455 -4.932 li
597.348 -5.94 li
601.38 -10.386 mo
603.396 -12.609 li
604.512 -11.601 li
602.487 -9.378 li
601.38 -10.386 li
605.412 -14.832 mo
607.428 -17.046 li
608.544 -16.038 li
606.528 -13.815 li
605.412 -14.832 li
609.444 -19.269 mo
611.469 -21.492 li
612.576 -20.484 li
610.56 -18.261 li
609.444 -19.269 li
613.485 -23.715 mo
615.501 -25.929 li
616.608 -24.921 li
614.592 -22.707 li
613.485 -23.715 li
617.517 -28.152 mo
619.533 -30.375 li
620.64 -29.367 li
618.624 -27.144 li
617.517 -28.152 li
621.549 -32.598 mo
623.565 -34.812 li
624.672 -33.804 li
622.656 -31.59 li
621.549 -32.598 li
625.581 -37.035 mo
627.597 -39.258 li
628.713 -38.25 li
626.697 -36.027 li
625.581 -37.035 li
629.613 -41.481 mo
631.368 -43.407 li
632.475 -42.399 li
630.729 -40.473 li
629.613 -41.481 li
f
149.652 487.062 mo
631.395 17.559 li
632.448 18.639 li
150.696 488.133 li
149.652 487.062 li
149.616 487.098 mo
631.368 -43.407 li
632.475 -42.399 li
150.723 488.106 li
149.616 487.098 li
f
grestore
418.419 213.102 mo
417.672 213.102 li
417.672 212.85 li
418.419 212.85 li
417.888 213.381 li
417.645 213.129 li
417.42 212.913 li
417.42 212.157 li
417.393 212.13 li
417.168 211.905 li
417.168 211.662 li
417.141 211.626 li
416.889 211.374 li
416.673 211.158 li
416.673 210.906 li
416.646 210.879 li
417.168 210.348 li
417.168 211.095 li
416.925 211.095 li
416.169 211.095 li
416.169 210.411 li
416.142 210.375 li
415.89 210.132 li
416.421 209.601 li
416.421 210.348 li
416.169 210.348 li
415.863 210.348 li
415.395 209.88 li
415.143 209.628 li
415.674 209.097 li
415.674 209.844 li
415.422 209.844 li
415.107 209.844 li
414.864 209.601 li
414.675 209.601 li
414.36 209.601 li
414.108 209.349 li
413.424 209.349 li
413.109 209.349 li
412.857 209.097 li
410.733 209.097 li
410.706 209.124 li
410.481 209.349 li
409.347 209.349 li
409.005 209.52 li
408.852 209.601 li
408.096 209.601 li
407.754 209.772 li
407.601 209.844 li
407.097 209.844 li
406.755 210.015 li
406.26 210.267 li
406.098 210.348 li
405.846 210.348 li
405.504 210.519 li
405.009 210.771 li
404.847 210.852 li
404.352 210.852 li
404.01 211.023 li
403.956 211.041 li
403.209 211.293 li
402.759 211.518 li
402.255 211.77 li
401.76 212.022 li
401.256 212.265 li
400.761 212.517 li
400.707 212.544 li
399.96 212.796 li
399.618 212.967 li
399.204 213.381 li
399.114 213.462 li
398.511 213.768 li
398.457 213.795 li
397.827 214.002 li
397.449 214.38 li
397.368 214.461 li
396.756 214.767 li
396.711 214.794 li
396.081 215.001 li
395.703 215.379 li
395.613 215.46 li
395.046 215.748 li
394.335 216.225 li
394.299 216.252 li
393.795 216.495 li
393.147 216.927 li
392.706 217.377 li
392.58 217.503 li
391.824 217.755 li
391.455 218.124 li
391.401 218.178 li
390.546 218.745 li
390.051 218.997 li
389.403 219.429 li
388.953 219.879 li
388.899 219.933 li
388.152 220.428 li
387.702 220.878 li
387.648 220.932 li
386.901 221.427 li
386.451 221.877 li
386.397 221.931 li
385.65 222.435 li
385.2 222.876 li
385.146 222.93 li
384.399 223.434 li
383.949 223.875 li
383.904 223.929 li
383.085 224.469 li
382.401 224.928 li
381.951 225.378 li
381.204 226.125 li
380.7 226.629 li
380.646 226.683 li
379.899 227.178 li
379.449 227.628 li
378.702 228.375 li
378.198 228.879 li
378.153 228.933 li
377.46 229.392 li
377.046 230.013 li
376.965 230.139 li
376.146 230.679 li
375.705 231.129 li
374.949 231.876 li
374.454 232.38 li
373.698 233.127 li
373.203 233.631 li
372.456 234.378 li
371.952 234.882 li
371.205 235.629 li
370.701 236.124 li
369.954 236.88 li
369.504 237.33 li
369.045 238.014 li
368.964 238.14 li
368.217 238.635 li
367.794 239.265 li
367.713 239.391 li
366.966 239.886 li
366.543 240.516 li
366.048 241.263 li
366.003 241.326 li
365.454 241.875 li
364.698 242.631 li
364.257 243.072 li
363.798 243.765 li
363.294 244.512 li
363.258 244.575 li
362.7 245.124 li
362.007 245.826 li
361.548 246.51 li
361.503 246.573 li
361.008 247.077 li
360.549 247.761 li
360.045 248.517 li
360.009 248.58 li
359.505 249.075 li
359.046 249.768 li
359.001 249.822 li
358.506 250.326 li
358.047 251.01 li
357.543 251.766 li
357.507 251.829 li
357.075 252.252 li
356.886 252.837 li
356.823 252.999 li
356.256 253.575 li
355.797 254.268 li
355.32 254.979 li
355.095 255.429 li
355.068 255.474 li
354.546 256.266 li
354.501 256.329 li
354.078 256.752 li
353.88 257.337 li
353.826 257.499 li
353.331 258.003 li
353.133 258.588 li
353.079 258.75 li
352.575 259.254 li
352.386 259.839 li
352.323 260.001 li
351.828 260.505 li
351.63 261.081 li
351.576 261.252 li
351.036 261.792 li
350.865 262.134 li
350.631 262.836 li
350.613 262.89 li
350.343 263.43 li
350.325 263.475 li
349.821 264.222 li
349.596 264.681 li
349.344 265.185 li
349.119 265.635 li
348.885 266.337 li
348.867 266.382 li
348.597 266.931 li
348.345 267.435 li
348.093 267.93 li
347.868 268.389 li
347.67 268.974 li
347.67 269.352 li
347.67 269.523 li
347.346 270.18 li
347.175 270.522 li
347.175 270.846 li
347.175 271.026 li
346.842 271.683 li
346.671 272.025 li
346.671 272.349 li
346.671 272.529 li
346.419 273.024 li
346.419 273.096 li
346.419 273.276 li
346.176 273.771 li
346.176 274.851 li
346.176 275.022 li
345.924 275.526 li
345.924 278.784 li
345.951 278.82 li
346.176 279.036 li
346.176 279.783 li
346.203 279.819 li
346.419 280.035 li
346.419 280.287 li
346.455 280.314 li
346.671 280.539 li
346.671 280.791 li
346.698 280.818 li
346.923 281.034 li
346.923 281.286 li
346.95 281.322 li
347.202 281.565 li
347.454 281.817 li
347.706 282.069 li
347.949 282.321 li
347.418 282.852 li
347.418 282.096 li
347.67 282.096 li
347.985 282.096 li
348.453 282.564 li
348.705 282.816 li
348.174 283.347 li
348.174 282.6 li
348.426 282.6 li
348.732 282.6 li
348.984 282.852 li
349.173 282.852 li
349.353 282.852 li
349.848 283.095 li
350.919 283.095 li
351.234 283.095 li
351.486 283.347 li
351.999 283.347 li
352.332 283.176 li
352.494 283.095 li
353.997 283.095 li
354.339 282.924 li
354.492 282.852 li
355.365 282.852 li
355.392 282.816 li
355.608 282.6 li
356.247 282.6 li
356.589 282.429 li
357.084 282.177 li
357.246 282.096 li
357.741 282.096 li
358.083 281.925 li
358.587 281.673 li
358.749 281.601 li
359.244 281.601 li
359.586 281.43 li
360.09 281.178 li
360.585 280.926 li
361.089 280.674 li
361.584 280.431 li
361.638 280.404 li
362.385 280.152 li
362.835 279.927 li
363.339 279.675 li
363.834 279.423 li
364.293 279.198 li
365.004 278.721 li
365.049 278.694 li
365.589 278.424 li
366.084 278.181 li
366.138 278.154 li
366.768 277.938 li
367.146 277.569 li
367.227 277.479 li
367.794 277.2 li
368.505 276.723 li
368.541 276.696 li
369.045 276.444 li
369.756 275.976 li
369.792 275.949 li
370.224 275.733 li
370.638 275.319 li
370.692 275.265 li
371.547 274.698 li
372.042 274.446 li
372.69 274.014 li
373.14 273.564 li
373.194 273.519 li
374.049 272.952 li
374.544 272.7 li
375.192 272.268 li
375.642 271.818 li
375.696 271.764 li
376.443 271.269 li
376.893 270.819 li
376.947 270.765 li
377.757 270.225 li
378.441 269.766 li
378.891 269.316 li
378.945 269.262 li
379.692 268.767 li
380.142 268.317 li
380.196 268.263 li
380.88 267.804 li
381.294 267.183 li
381.384 267.057 li
382.194 266.517 li
382.644 266.067 li
382.698 266.013 li
383.508 265.473 li
384.129 265.059 li
384.552 264.429 li
384.633 264.303 li
385.443 263.763 li
385.893 263.322 li
386.64 262.566 li
387.144 262.071 li
387.198 262.017 li
387.882 261.558 li
388.296 260.928 li
388.377 260.811 li
389.133 260.307 li
389.547 259.686 li
389.628 259.56 li
390.384 259.056 li
390.798 258.435 li
390.879 258.309 li
391.635 257.805 li
392.049 257.184 li
392.13 257.058 li
392.877 256.554 li
393.3 255.933 li
393.336 255.87 li
393.894 255.321 li
394.641 254.565 li
395.145 254.07 li
395.892 253.314 li
396.342 252.873 li
396.801 252.18 li
396.837 252.117 li
397.638 251.316 li
398.088 250.866 li
398.547 250.182 li
398.592 250.119 li
399.141 249.57 li
399.843 248.868 li
400.302 248.184 li
400.338 248.121 li
400.842 247.617 li
401.301 246.933 li
401.796 246.186 li
401.841 246.123 li
402.336 245.619 li
402.795 244.935 li
402.84 244.872 li
403.335 244.368 li
403.794 243.684 li
404.298 242.928 li
404.343 242.874 li
404.838 242.37 li
405.297 241.686 li
405.801 240.93 li
405.837 240.867 li
406.341 240.372 li
406.8 239.679 li
406.836 239.616 li
407.34 239.121 li
407.745 238.518 li
407.961 237.861 li
408.015 237.69 li
408.591 237.123 li
409.023 236.475 li
409.248 236.016 li
409.275 235.971 li
409.797 235.179 li
409.842 235.116 li
410.265 234.693 li
410.463 234.108 li
410.517 233.946 li
411.012 233.442 li
411.21 232.857 li
411.264 232.695 li
411.768 232.191 li
411.957 231.615 li
411.975 231.561 li
412.254 231.012 li
412.308 230.904 li
412.767 230.445 li
412.956 229.86 li
412.974 229.806 li
413.253 229.266 li
413.271 229.221 li
413.775 228.474 li
414 228.015 li
414.225 227.556 li
414.459 226.863 li
414.477 226.809 li
414.747 226.26 li
414.999 225.765 li
415.251 225.261 li
415.476 224.811 li
415.71 224.109 li
415.728 224.064 li
415.998 223.515 li
416.169 223.173 li
416.169 222.849 li
416.169 222.669 li
416.502 222.012 li
416.673 221.67 li
416.673 221.346 li
416.673 221.175 li
416.997 220.509 li
417.168 220.167 li
417.168 219.348 li
417.168 219.168 li
417.42 218.673 li
417.42 218.601 li
417.42 218.421 li
417.672 217.917 li
417.672 216.846 li
417.672 216.675 li
417.924 216.171 li
417.924 214.407 li
417.888 214.38 li
417.672 214.155 li
417.672 213.102 li
418.419 213.102 li
419.175 213.102 li
419.175 213.534 li
419.202 213.57 li
419.418 213.786 li
419.418 216.522 li
419.175 217.026 li
419.175 218.097 li
419.175 218.277 li
418.923 218.772 li
418.923 218.844 li
418.923 219.024 li
418.671 219.528 li
418.671 220.347 li
418.671 220.527 li
418.347 221.184 li
418.176 221.526 li
418.176 221.85 li
418.176 222.021 li
417.843 222.687 li
417.672 223.029 li
417.672 223.344 li
417.672 223.524 li
417.339 224.181 li
417.114 224.64 li
416.88 225.333 li
416.871 225.387 li
416.592 225.936 li
416.34 226.431 li
416.097 226.935 li
415.863 227.385 li
415.629 228.087 li
415.62 228.132 li
415.341 228.681 li
415.089 229.185 li
415.071 229.221 li
414.576 229.977 li
414.369 230.382 li
414.135 231.084 li
414.081 231.255 li
413.541 231.795 li
413.37 232.137 li
413.136 232.839 li
413.073 233.001 li
412.578 233.505 li
412.38 234.081 li
412.326 234.252 li
411.831 234.756 li
411.633 235.332 li
411.579 235.503 li
411.003 236.079 li
410.571 236.727 li
410.346 237.186 li
410.319 237.222 li
409.797 238.014 li
409.752 238.077 li
409.329 238.5 li
409.131 239.085 li
409.104 239.184 li
408.501 240.075 li
408.006 240.579 li
407.547 241.263 li
407.502 241.326 li
407.007 241.83 li
406.548 242.514 li
406.044 243.261 li
406.008 243.324 li
405.504 243.828 li
405.045 244.512 li
404.55 245.268 li
404.505 245.322 li
404.001 245.826 li
403.542 246.51 li
403.506 246.573 li
403.002 247.077 li
402.543 247.761 li
402.048 248.517 li
402.003 248.58 li
401.508 249.075 li
401.049 249.768 li
401.004 249.822 li
400.203 250.632 li
399.753 251.073 li
399.294 251.766 li
399.258 251.829 li
398.7 252.378 li
398.007 253.08 li
397.548 253.764 li
397.503 253.827 li
396.954 254.376 li
396.198 255.132 li
395.703 255.627 li
394.956 256.374 li
394.506 256.824 li
394.047 257.517 li
393.966 257.643 li
393.21 258.138 li
392.796 258.768 li
392.715 258.885 li
391.959 259.389 li
391.545 260.01 li
391.464 260.136 li
390.717 260.64 li
390.294 261.261 li
390.213 261.387 li
389.466 261.891 li
389.043 262.512 li
388.962 262.638 li
388.152 263.178 li
387.702 263.628 li
386.955 264.375 li
386.451 264.879 li
386.397 264.933 li
385.713 265.392 li
385.299 266.013 li
385.209 266.139 li
384.336 266.724 li
383.652 267.183 li
383.202 267.624 li
383.148 267.678 li
382.464 268.137 li
382.05 268.767 li
381.96 268.893 li
381.15 269.433 li
380.7 269.874 li
380.646 269.928 li
379.899 270.432 li
379.449 270.882 li
379.404 270.927 li
378.585 271.476 li
377.901 271.935 li
377.451 272.376 li
377.397 272.43 li
376.65 272.934 li
376.2 273.375 li
376.146 273.429 li
375.3 273.996 li
374.796 274.248 li
374.148 274.68 li
373.698 275.13 li
373.653 275.184 li
372.798 275.751 li
372.303 275.994 li
371.646 276.435 li
371.205 276.876 li
371.115 276.966 li
370.548 277.245 li
369.837 277.722 li
369.801 277.749 li
369.297 278.001 li
368.586 278.469 li
368.55 278.496 li
368.118 278.712 li
367.704 279.126 li
367.578 279.252 li
366.714 279.54 li
366.255 279.765 li
365.796 279.999 li
365.085 280.476 li
365.049 280.494 li
364.509 280.773 li
364.005 281.016 li
363.51 281.268 li
363.006 281.52 li
362.961 281.547 li
362.214 281.79 li
361.755 282.015 li
361.26 282.267 li
360.756 282.519 li
360.261 282.771 li
359.757 283.023 li
359.595 283.095 li
359.1 283.095 li
358.758 283.266 li
358.254 283.518 li
358.101 283.599 li
357.597 283.599 li
357.255 283.77 li
356.76 284.022 li
356.598 284.094 li
356.229 284.094 li
356.202 284.13 li
355.986 284.346 li
354.852 284.346 li
354.51 284.517 li
354.348 284.598 li
352.845 284.598 li
352.503 284.769 li
352.35 284.85 li
351.171 284.85 li
350.865 284.85 li
350.613 284.598 li
349.668 284.598 li
349.497 284.598 li
348.993 284.346 li
348.669 284.346 li
348.363 284.346 li
347.895 283.878 li
348.426 283.347 li
348.426 284.094 li
348.174 284.094 li
347.859 284.094 li
347.391 283.626 li
347.139 283.374 li
347.67 282.852 li
347.67 283.599 li
347.418 283.599 li
347.112 283.599 li
346.644 283.131 li
346.392 282.879 li
346.14 282.627 li
345.888 282.375 li
345.645 282.132 li
345.42 281.907 li
345.42 281.655 li
345.393 281.628 li
345.168 281.412 li
345.168 281.16 li
345.141 281.124 li
344.925 280.908 li
344.925 280.656 li
344.889 280.629 li
344.673 280.413 li
344.673 279.657 li
344.646 279.63 li
344.421 279.405 li
344.421 275.175 li
344.673 274.671 li
344.673 273.6 li
344.673 273.42 li
344.925 272.925 li
344.925 272.844 li
344.925 272.673 li
345.168 272.169 li
345.168 271.845 li
345.168 271.674 li
345.501 271.017 li
345.672 270.675 li
345.672 270.351 li
345.672 270.171 li
346.005 269.514 li
346.176 269.172 li
346.176 268.848 li
346.176 268.722 li
346.464 267.858 li
346.473 267.813 li
346.752 267.264 li
347.004 266.76 li
347.247 266.265 li
347.481 265.806 li
347.706 265.113 li
347.724 265.059 li
348.003 264.51 li
348.255 264.015 li
348.498 263.511 li
348.525 263.475 li
349.02 262.719 li
349.227 262.314 li
349.461 261.612 li
349.479 261.558 li
349.749 261.009 li
349.803 260.901 li
350.262 260.442 li
350.46 259.857 li
350.514 259.695 li
351.018 259.191 li
351.207 258.615 li
351.27 258.444 li
351.765 257.94 li
351.963 257.364 li
352.017 257.193 li
352.512 256.689 li
352.71 256.113 li
352.764 255.942 li
353.34 255.366 li
353.772 254.718 li
353.997 254.259 li
354.024 254.223 li
354.546 253.431 li
355.05 252.684 li
355.086 252.621 li
355.518 252.189 li
355.707 251.613 li
355.77 251.442 li
356.337 250.866 li
356.796 250.182 li
357.3 249.435 li
357.336 249.372 li
357.84 248.868 li
358.299 248.184 li
358.335 248.121 li
358.839 247.617 li
359.298 246.933 li
359.802 246.186 li
359.838 246.123 li
360.342 245.619 li
360.801 244.935 li
360.837 244.872 li
361.638 244.071 li
362.088 243.621 li
362.547 242.928 li
363.051 242.181 li
363.087 242.118 li
363.645 241.569 li
364.392 240.822 li
364.842 240.372 li
365.301 239.679 li
365.796 238.932 li
365.877 238.806 li
366.633 238.311 li
367.047 237.681 li
367.128 237.555 li
367.884 237.06 li
368.298 236.43 li
368.343 236.367 li
368.892 235.818 li
369.639 235.071 li
370.143 234.567 li
370.89 233.82 li
371.394 233.316 li
372.141 232.569 li
372.645 232.065 li
373.392 231.318 li
373.896 230.814 li
374.643 230.067 li
375.138 229.572 li
375.192 229.518 li
375.885 229.059 li
376.299 228.429 li
376.38 228.303 li
377.19 227.763 li
377.64 227.322 li
378.396 226.566 li
378.891 226.071 li
378.945 226.017 li
379.692 225.513 li
380.142 225.072 li
380.889 224.316 li
381.393 223.821 li
381.447 223.767 li
382.257 223.227 li
382.941 222.768 li
383.391 222.318 li
383.445 222.264 li
384.192 221.769 li
384.642 221.319 li
384.696 221.265 li
385.443 220.761 li
385.893 220.32 li
385.947 220.266 li
386.694 219.762 li
387.144 219.321 li
387.198 219.267 li
387.945 218.763 li
388.395 218.322 li
388.44 218.268 li
389.295 217.701 li
389.799 217.449 li
390.447 217.017 li
390.888 216.567 li
391.014 216.441 li
391.77 216.189 li
392.139 215.82 li
392.193 215.766 li
393.048 215.199 li
393.543 214.947 li
394.254 214.47 li
394.299 214.452 li
394.731 214.236 li
395.145 213.822 li
395.271 213.696 li
396.135 213.399 li
396.477 213.228 li
396.891 212.814 li
397.017 212.688 li
397.881 212.4 li
398.232 212.229 li
398.646 211.815 li
398.727 211.734 li
399.339 211.428 li
399.384 211.401 li
400.131 211.149 li
400.59 210.924 li
401.085 210.681 li
401.589 210.429 li
402.084 210.177 li
402.588 209.925 li
402.633 209.907 li
403.38 209.655 li
403.839 209.43 li
403.992 209.349 li
404.496 209.349 li
404.838 209.178 li
405.333 208.926 li
405.495 208.845 li
405.747 208.845 li
406.089 208.674 li
406.584 208.431 li
406.746 208.35 li
407.241 208.35 li
407.583 208.179 li
407.745 208.098 li
408.492 208.098 li
408.834 207.927 li
408.996 207.846 li
409.86 207.846 li
409.896 207.819 li
410.112 207.594 li
413.487 207.594 li
413.73 207.846 li
414.423 207.846 li
414.729 207.846 li
414.981 208.098 li
415.17 208.098 li
415.485 208.098 li
415.953 208.566 li
415.422 209.097 li
415.422 208.35 li
415.674 208.35 li
415.98 208.35 li
416.448 208.818 li
416.7 209.07 li
416.169 209.601 li
416.169 208.845 li
416.421 208.845 li
416.736 208.845 li
417.204 209.322 li
417.456 209.565 li
417.672 209.79 li
417.672 210.348 li
416.925 210.348 li
416.925 209.601 li
417.168 209.601 li
417.483 209.601 li
417.951 210.069 li
418.176 210.285 li
418.176 210.537 li
418.203 210.564 li
418.455 210.816 li
418.671 211.041 li
418.671 211.284 li
418.698 211.32 li
418.923 211.536 li
418.923 212.283 li
418.95 212.319 li
419.175 212.535 li
419.175 213.102 li
418.419 213.102 li
f
1 lw
509.172 150.348 mo
530.672 174.348 li
523.672 126.348 mo
542.922 150.348 li
415.172 270.848 mo
434.422 270.848 li
443.922 222.598 mo
458.422 222.598 li
275.422 294.848 mo
294.672 304.598 li
@
150.172 390.098 mo
145.172 400.098 li
155.172 400.098 li
cp
f
230.422 482.598 mo
225.422 482.598 li
225.422 492.598 li
235.422 492.598 li
235.422 482.598 li
cp
f
310.672 343.598 mo
305.672 343.598 li
305.672 353.598 li
315.672 353.598 li
315.672 343.598 li
cp
f
471.422 135.098 mo
466.422 135.098 li
466.422 145.098 li
476.422 145.098 li
476.422 135.098 li
cp
f
551.672 37.848 mo
546.672 37.848 li
546.672 47.848 li
556.672 47.848 li
556.672 37.848 li
cp
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: NZPPMX+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /NZPPMX+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966419e4da200005b680000217468656164888895f500000eb80000
0036686865610a220f8100000ef000000024686d74785bcd114b00000f14
000021a46c6f636101124aa4000030b8000021a86d61787010d30b0a0000
5260000000206e616d6562c29c08000052800000051870726570bc836e31
00005798000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d00000000010000000000006679ca74
5f0f3cf500110800000000005f4d8f0000000000c621bcd6f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000086905120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c014f004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090000000000000068
000000680000006800000068000000680000006800000068000000680000
00680000006800000068000000f80000017c0000017c0000017c0000017c
000001b8000001f8000001f8000002d40000032000000438000005900000
062c00000754000008800000088000000880000008800000088000000880
000008800000088000000880000008800000088000000998000009980000
0ab800000b7c00000c0400000c6800000c6800000cd800000d0800000d08
00000d0800000d5800000d5800000d5800000e5400000f00000010740000
10740000120c0000120c0000129c0000129c0000129c0000129c0000129c
0000129c0000129c0000129c0000129c0000129c0000129c0000129c0000
14300000150400001504000015dc00001770000017700000177000001810
0000186c000018e0000018e00000192400001a1c00001ad400001bc40000
1ca800001ca800001d3400001ef400001f94000020480000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740000
217400002174000021740000217400002174000021740000217400002174
000021740000217400002174000021740000217400002174000021740001
00000869006f0009006b0007000200100010005d000007e80a1d00040001
0000002501c2000100000000000000500008000100000000000100090058
0001000000000002000700610001000000000003001f0068000100000000
000400090087000100000000000500080000000100000000000600090090
0001000000000007003200990001000000000012000900cb000100000000
0100000900d40001000000000101001000dd0001000000000102000e00ed
0001000000000103001400fb00010000000001040012010f000100000001
0007002f01210001000000020007003c015000010000000300070030018c
0001000000040007003a01bc0001000000050007003601f6000100000006
00070030022c0001000000070007003c025c000300010404000200060298
0003000104060002000e029e0003000104070002000c02ac000300010409
0002000e02b800030001040b0002001002c600030001040c0002000c02d6
0003000104100002001002e20003000104110002000a02f2000300010412
0002000602fc0003000104130002001003020003000104140002000c0312
0003000104160002000c031e0003000104190002000e032a00030001041d
0002000c0338000300010804000200060344000300010c0a0002000c034a
362e316431386531a920313939302d32303036204170706c6520436f6d70
7574657220496e632e20a92031393831204c696e6f7479706520414720a9
20313939302d3931205479706520536f6c7574696f6e7320496e632e4865
6c766574696361526567756c617248656c7665746963613b20362e316431
3865313b20323030392d30362d323948656c76657469636148656c766574
69636148656c766574696361206973206120726567697374657265642074
726164656d61726b206f66204c696e6f7479706520414748656c76657469
63614c6967617475726573436f6d6d6f6e204c69676174757265734e756d
6265722053706163696e6750726f706f7274696f6e616c204e756d626572
734d6f6e6f737061636564204e756d6265727348656c7665746963612065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414748656c766574696361206973742065696e2065696e676574
726167656e657320576172656e7a65696368656e20646572204c696e6f74
79706520414748656c766574696361208f20756e206d61726368696f2072
65676973747261746f206469204c696e6f7479706520414748656c766574
6963612069732065656e20676572656769737472656572642068616e6465
6c736d65726b2076616e204c696e6f7479706520414748656c7665746963
61208a722065747420726567697374726572617420766172756d8a726b65
20669a72204c696e6f7479706520414748656c7665746963612065732075
6e61206d617263612072656769737472616461206465204c696e6f747970
6520414748656c7665746963612065722065742072656769737472657265
7420766172656dbe726b652074696c68bf72656e6465204c696e6f747970
652041476a196e969ad4004f007200640069006e00e60072004e006f0072
006d0061006c0052006500670075006c00610072004e006f0072006d0061
0061006c0069004e006f0072006d0061006c005200650067006f006c0061
0072006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c
006900650072004e006f0072006d0061006c004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d0061006c5e3889c4
4f53004e006f0072006d0061006cb800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[8565 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 104 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>NZPPMX+Helvetica AddT42Char 
1 248 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>NZPPMX+Helvetica AddT42Char 
1 800 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>NZPPMX+Helvetica AddT42Char 
1 1424 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>NZPPMX+Helvetica AddT42Char 
1 1580 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>NZPPMX+Helvetica AddT42Char 
1 4212 54 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>NZPPMX+Helvetica AddT42Char 
1 4620 56 <000200aaffd9052f05bd00150016003c4023170527053810030a0002053a
1009160316161409250c1a18012514191718a0219570182b2b4ef44ded4e
10f64ded12392f003f3fed3f3c5d31300111141716333237363511331110
07022120032619012101743c59d3fd5b31ca4986fe8cfe8c8549024305bd
fc74a06aa0ad5e9f038cfcc7fef192fef6010a92010f0339>NZPPMX+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>NZPPMX+Helvetica AddT42Char 
NZPPMX+Helvetica /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/two 21 def
/four 23 def
/five 24 def
/S 54 def
/U 56 def
end
NZPPMX+Helvetica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 83 /S put
dup 85 /U put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAF+Helvetica /NZPPMX+Helvetica findfont ct_VMDictPut/MOQTAF+Helvetica*1 [40{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /.notdef /four /five 29{/.notdef}rp /S /.notdef /U 170{/.notdef}rp]MOQTAF+Helvetica nfMOQTAF+Helvetica*1 [16 0 0 -16 0 0 ]msf326.664 353.59 mo(SU\(2\))[10.6721 11.552 5.32788 8.896 0 ]xsh416.728 145.094 mo(SU\(4\))[10.6721 11.552 5.32788 8.896 0 ]xsh500.216 47.8463 mo(SU\(5\))[10.6721 11.552 5.32788 8.896 0 ]xsh201.172 41.098 mo
222.422 41.098 li
222.422 66.848 li
201.172 66.848 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 0 colr
f
0.25 lw
201.172 41.098 mo
222.422 41.098 li
222.422 66.848 li
201.172 66.848 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
true set_gvm
%ADOBeginSubsetFont: NZPPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NZPPMX+Helvetica gcheck setglobal} if

1 0 3 <> NZPPMX+Helvetica AddT42Char 
1 2456 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>NZPPMX+Helvetica AddT42Char 
1 5168 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>NZPPMX+Helvetica AddT42Char 
1 5380 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>NZPPMX+Helvetica AddT42Char 
1 5596 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>NZPPMX+Helvetica AddT42Char 
1 6160 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>NZPPMX+Helvetica AddT42Char 
1 6368 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>NZPPMX+Helvetica AddT42Char 
1 6436 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>NZPPMX+Helvetica AddT42Char 
1 6684 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>NZPPMX+Helvetica AddT42Char 
1 6868 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>NZPPMX+Helvetica AddT42Char 
1 7336 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>NZPPMX+Helvetica AddT42Char 
1 7476 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>NZPPMX+Helvetica AddT42Char 
1 7924 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>NZPPMX+Helvetica AddT42Char 
1 8084 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>NZPPMX+Helvetica AddT42Char 
NZPPMX+Helvetica /CharStrings get begin
/space 3 def
/C 38 def
/b 69 def
/d 71 def
/e 72 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
end
NZPPMX+Helvetica /Encoding get
dup 32 /space put
dup 67 /C put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAF+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 8{/.notdef}rp /two /.notdef /four /five 13{/.notdef}rp /C 15{/.notdef}rp /S /.notdef /U 12{/.notdef}rp /b /.notdef /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]MOQTAF+Helvetica nfMOQTAF+Helvetica*1 [31.25 0 0 -31.25 0 0 ]msf250.672 64.6136 mo(Combined result)[22.5625 17.375 26.031 17.375 6.9375 17.375 17.375 17.375 8.6875 10.406 17.375 15.625 17.375 6.9375 0 ]xsh215.297 99.723 mo
229.547 99.723 li
218.019 108.099 li
222.422 94.546 li
226.825 108.099 li
cp
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
true set_gvm
%ADOBeginSubsetFont: NZPPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NZPPMX+Helvetica gcheck setglobal} if
1 380 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>NZPPMX+Helvetica AddT42Char 
1 1080 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>NZPPMX+Helvetica AddT42Char 
1 2176 36 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>NZPPMX+Helvetica AddT42Char 
1 2744 39 <000200a50000056305bd000d00180067401f871196120232080b1e0f0200
1e17080831131a1a0d250e19191ad6217689182b2b4ef44dfd4e10f64ded
003ffd3ffd3130437940260116112515260607050704070307020705060a
10083201011608320109120b320107140032002b2b012b2b2a2b2b815d25
32373637363736351002232111032120171611140702290102d06541744a
3b1a0fd9f1fe9fc80253012fa795589bfe86fdafaa15276f598b53470111
012efb980513d7c2fed1eabdfeb20000>NZPPMX+Helvetica AddT42Char 
1 2940 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>NZPPMX+Helvetica AddT42Char 
1 3076 41 <000100af000004aa05bd000900394018071e040409031e0100020908066b
011a0b03082500190a0bb80157b32195dc182b2b4ef44dfd3c4e10f64de4
003f3f3ced12392ffd313013211521112115211123af03fbfccc02d1fd2f
c705bdb4fe42affd6400>NZPPMX+Helvetica AddT42Char 
1 3176 43 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>NZPPMX+Helvetica AddT42Char 
1 3288 44 <000100c90000019205bd00030017b8002b2bba00010000002e2b00b80000
2fb800022f303113331123c9c9c905bdfa43>NZPPMX+Helvetica AddT42Char 
1 3336 47 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>NZPPMX+Helvetica AddT42Char 
1 3416 50 <00030050ffd505e805e5000f001b001c008a402c8705c700c701c302c808
c90a064308153a0f031b3a07091c021c1c0b1231031a1e18310b191d1ed8
216a66182b2b4ef44ded4e10f64ded12392f003f3fed3fed313043794032
001a0d26012509250526160e18320014001232011a081832001006123201
170c1532011302153201190a1b320011041b32002b2b2b2b012b2b2b2b2b
2b2b2b81005d001716111007022120272611103712210012351000232200
1114122103049bbb92a7c4fe95feadc2ad94be0174011bebfef1ebe4fee0
f701150e05e5fac3fed0feb7daff00e0d8014a012ad40110faa20179f501
03013cfec7fecff4feb1055e>NZPPMX+Helvetica AddT42Char 
1 3668 51 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>NZPPMX+Helvetica AddT42Char 
1 3840 52 <00020050ff8b05e805e50015002700e4406b69036a1579038513961bc71b
064a1c591b5a1c64157515781cb719c81a083808181b021b191901151a1b
1a1a1a0001190100191e121a1a00191a191a1b18150206240001111e1500
02050d191a1b18042127213a0d03273a0105091e31111a29243109192829
d8216a66182b2b4ef44ded4e10f64ded003f33ed3fed1112173911123939
39011112393912173908872e2b087d10c50187102b3c2b3c87102bc42b3c
313018437940281f2606100b260f250725220c243200200e1e3201260624
3200230a2132011f102132012508273200002b2b2b012b2b2b2b2b2b8181
015d005d2507270e01232027261110371221201716111407060704363727
371736123510002322001110002105dc64e352bf71feaac2ab94be017401
85bb9223357efe576c28a164c05b41fef1ebeefeea010b01020479ad2d36
e0da0148012ad40110fac3fed08e83c87e1a11197e7b9568010276010301
3cfed1fec5fef7fec6000000>NZPPMX+Helvetica AddT42Char 
1 4764 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>NZPPMX+Helvetica AddT42Char 
1 6000 75 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>NZPPMX+Helvetica AddT42Char 
1 6252 77 <0002ffdafe50013805bd00030011002fb800532bba0000000100562bb800
0110b80007d0b8000010b80009d000b8000e2fb800112fba000300000056
2b303101233533013e0135113311140706232226270138b4b4fea27931b4
263fb00d1d1f04edd0f93404235c04b6fb37753a620203000000>NZPPMX+Helvetica AddT42Char 
1 7108 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>NZPPMX+Helvetica AddT42Char 
1 8264 89 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>NZPPMX+Helvetica AddT42Char 
NZPPMX+Helvetica /CharStrings get begin
/hyphen 16 def
/three 22 def
/A 36 def
/D 39 def
/E 40 def
/F 41 def
/H 43 def
/I 44 def
/L 47 def
/O 50 def
/P 51 def
/Q 52 def
/a 68 def
/h 75 def
/j 77 def
/p 83 def
/v 89 def
end
NZPPMX+Helvetica /Encoding get
dup 45 /hyphen put
dup 51 /three put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 97 /a put
dup 104 /h put
dup 106 /j put
dup 112 /p put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAF+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 4{/.notdef}rp /two /three /four /five 11{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H /I 2{/.notdef}rp /L 2{/.notdef}rp /O /P /Q /.notdef /S /.notdef /U 11{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i /j /.notdef /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]MOQTAF+Helvetica nfMOQTAF+Helvetica*1 [31.25 0 0 -31.25 0 0 ]msf250.672 112.856 mo(SU\(3\) QCD)[20.844 22.5625 10.406 17.375 10.406 8.6875 24.3125 22.5625 0 ]xshMOQTAF+Helvetica*1 [16 0 0 -16 0 0 ]msf463.414 227.582 mo(OPAL 4-jet)[12.448 10.6721 10.6721 8.896 4.448 8.89597 5.32788 3.552 8.896 0 ]xsh439.158 275.838 mo(Event Shape)[10.6721 8 8.896 8.896 4.448 4.448 10.6721 8.896 8.896 8.896 0 ]xsh535.654 179.342 mo(DELPHI FF)[11.552 10.6721 8.896 10.6721 11.552 4.448 4.448 9.77588 0 ]xsh417.642 217.977 mo
417.42 217.098 li
417.168 215.847 li
416.925 214.848 li
416.925 213.597 li
416.673 212.598 li
416.421 211.347 li
416.357 211.095 li
416.673 211.095 li
416.673 211.158 li
416.889 211.374 li
417.141 211.626 li
417.168 211.662 li
417.168 211.905 li
417.393 212.13 li
417.42 212.157 li
417.42 212.913 li
417.645 213.129 li
417.672 213.157 li
417.672 214.155 li
417.888 214.38 li
417.924 214.407 li
417.924 216.171 li
417.672 216.675 li
417.672 216.846 li
417.672 217.917 li
417.642 217.977 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.877816 0.930181 0.109804 colr
f
351.999 283.347 mo
351.486 283.347 li
351.234 283.095 li
350.919 283.095 li
349.848 283.095 li
349.353 282.852 li
349.173 282.852 li
348.984 282.852 li
348.732 282.6 li
348.489 282.6 li
348.453 282.564 li
347.985 282.096 li
347.732 282.096 li
347.706 282.069 li
347.454 281.817 li
347.202 281.565 li
346.95 281.322 li
346.923 281.286 li
346.923 281.034 li
346.698 280.818 li
346.671 280.791 li
346.671 280.539 li
346.455 280.314 li
346.419 280.287 li
346.419 280.035 li
346.203 279.819 li
346.176 279.783 li
346.176 279.036 li
345.951 278.82 li
345.924 278.784 li
345.924 275.526 li
346.176 275.022 li
346.176 274.851 li
346.176 273.771 li
346.419 273.276 li
346.419 273.096 li
346.419 273.024 li
346.671 272.529 li
346.671 272.349 li
346.671 272.328 li
350.062 268.594 li
350.388 268.236 li
350.388 268.236 li
352.991 265.368 li
354.429 263.79 li
354.427 263.788 li
356.444 261.566 li
356.445 261.567 li
358.461 259.353 li
358.457 259.349 li
360.475 257.128 li
360.477 257.13 li
362.493 254.907 li
362.492 254.906 li
364.841 252.319 li
366.525 250.47 li
366.523 250.468 li
368.54 248.246 li
368.541 248.247 li
369.923 246.723 li
376.609 239.36 li
376.614 239.364 li
378.63 237.141 li
378.627 237.138 li
380.644 234.917 li
380.646 234.918 li
382.662 232.695 li
382.662 232.695 li
384.675 230.478 li
384.678 230.481 li
386.694 228.258 li
386.692 228.257 li
388.71 226.035 li
388.71 226.035 li
388.801 225.934 li
392.74 221.597 li
392.742 221.598 li
394.758 219.375 li
394.758 219.375 li
397.59 216.256 li
398.799 214.929 li
398.797 214.927 li
400.81 212.71 li
400.815 212.715 li
401.195 212.296 li
401.256 212.265 li
401.76 212.022 li
402.255 211.77 li
402.759 211.518 li
403.209 211.293 li
403.956 211.041 li
404.01 211.023 li
404.352 210.852 li
404.847 210.852 li
405.009 210.771 li
405.504 210.519 li
405.846 210.348 li
406.098 210.348 li
406.26 210.267 li
406.755 210.015 li
407.097 209.844 li
407.601 209.844 li
407.754 209.772 li
408.096 209.601 li
408.852 209.601 li
409.005 209.52 li
409.347 209.349 li
410.481 209.349 li
410.706 209.124 li
410.733 209.097 li
412.857 209.097 li
413.109 209.349 li
413.424 209.349 li
414.108 209.349 li
414.36 209.601 li
414.675 209.601 li
414.864 209.601 li
415.107 209.844 li
415.359 209.844 li
415.395 209.88 li
415.863 210.348 li
416.114 210.348 li
416.142 210.375 li
416.169 210.411 li
416.169 211.095 li
416.357 211.095 li
416.421 211.347 li
416.673 212.598 li
416.925 213.597 li
416.925 214.848 li
417.168 215.847 li
417.42 217.098 li
417.642 217.977 li
417.42 218.421 li
417.42 218.601 li
417.42 218.673 li
417.168 219.168 li
417.168 219.348 li
417.168 220.167 li
416.997 220.509 li
416.673 221.175 li
416.673 221.346 li
416.673 221.67 li
416.502 222.012 li
416.169 222.669 li
416.169 222.849 li
416.169 223.173 li
415.998 223.515 li
415.728 224.064 li
415.71 224.109 li
415.476 224.811 li
415.251 225.261 li
414.999 225.765 li
414.747 226.26 li
414.477 226.809 li
414.459 226.863 li
414.225 227.556 li
414 228.015 li
413.775 228.474 li
413.271 229.221 li
413.253 229.266 li
412.974 229.806 li
412.956 229.86 li
412.767 230.445 li
412.308 230.904 li
412.254 231.012 li
412.133 231.25 li
361.729 280.373 li
361.638 280.404 li
361.584 280.431 li
361.089 280.674 li
360.585 280.926 li
360.09 281.178 li
359.586 281.43 li
359.244 281.601 li
358.749 281.601 li
358.587 281.673 li
358.083 281.925 li
357.741 282.096 li
357.246 282.096 li
357.084 282.177 li
356.589 282.429 li
356.247 282.6 li
355.608 282.6 li
355.392 282.816 li
355.365 282.852 li
354.492 282.852 li
354.339 282.924 li
353.997 283.095 li
352.494 283.095 li
352.332 283.176 li
351.999 283.347 li
366.168 278.144 mo
409.113 236.291 li
409.023 236.475 li
408.591 237.123 li
408.015 237.69 li
407.961 237.861 li
407.745 238.518 li
407.34 239.121 li
406.836 239.616 li
406.8 239.679 li
406.341 240.372 li
405.837 240.867 li
405.801 240.93 li
405.297 241.686 li
404.838 242.37 li
404.343 242.874 li
404.298 242.928 li
403.794 243.684 li
403.335 244.368 li
402.84 244.872 li
402.795 244.935 li
402.336 245.619 li
401.841 246.123 li
401.796 246.186 li
401.301 246.933 li
400.842 247.617 li
400.338 248.121 li
400.302 248.184 li
399.843 248.868 li
399.534 249.177 li
399.24 248.868 li
397.071 250.938 li
397.531 251.423 li
396.837 252.117 li
396.801 252.18 li
396.342 252.873 li
395.892 253.314 li
395.534 253.676 li
394.893 253.008 li
392.724 255.087 li
393.407 255.8 li
393.336 255.87 li
393.3 255.933 li
392.877 256.554 li
392.13 257.058 li
392.049 257.184 li
391.635 257.805 li
391.355 257.992 li
390.555 257.157 li
388.386 259.227 li
389.251 260.13 li
389.133 260.307 li
388.377 260.811 li
388.296 260.928 li
387.882 261.558 li
387.198 262.017 li
387.144 262.071 li
387.045 262.168 li
386.217 261.297 li
384.048 263.367 li
384.819 264.179 li
384.633 264.303 li
384.552 264.429 li
384.129 265.059 li
383.508 265.473 li
382.698 266.013 li
382.644 266.067 li
382.559 266.152 li
381.879 265.437 li
379.701 267.507 li
380.336 268.169 li
380.196 268.263 li
380.142 268.317 li
379.692 268.767 li
378.945 269.262 li
378.891 269.316 li
378.441 269.766 li
377.996 270.065 li
377.532 269.577 li
375.363 271.656 li
375.579 271.881 li
375.192 272.268 li
374.544 272.7 li
374.049 272.952 li
373.194 273.519 li
373.14 273.564 li
372.69 274.014 li
372.042 274.446 li
371.547 274.698 li
370.692 275.265 li
370.638 275.319 li
370.224 275.733 li
369.792 275.949 li
369.756 275.976 li
369.045 276.444 li
368.541 276.696 li
368.505 276.723 li
367.794 277.2 li
367.227 277.479 li
367.146 277.569 li
366.768 277.938 li
366.168 278.144 li
347.67 268.997 mo
347.67 268.974 li
347.868 268.389 li
348.093 267.93 li
348.345 267.435 li
348.597 266.931 li
348.867 266.382 li
348.885 266.337 li
349.119 265.635 li
349.344 265.185 li
349.596 264.681 li
349.821 264.222 li
350.325 263.475 li
350.343 263.43 li
350.613 262.89 li
350.631 262.836 li
350.865 262.134 li
351.036 261.792 li
351.576 261.252 li
351.63 261.081 li
351.828 260.505 li
352.323 260.001 li
352.386 259.839 li
352.575 259.254 li
353.079 258.75 li
353.133 258.588 li
353.331 258.003 li
353.826 257.499 li
353.88 257.337 li
354.078 256.752 li
354.501 256.329 li
354.546 256.266 li
355.068 255.474 li
355.095 255.429 li
355.32 254.979 li
355.797 254.268 li
356.256 253.575 li
356.823 252.999 li
356.886 252.837 li
357.075 252.252 li
357.507 251.829 li
357.543 251.766 li
358.047 251.01 li
358.506 250.326 li
359.001 249.822 li
359.046 249.768 li
359.505 249.075 li
360.009 248.58 li
360.045 248.517 li
360.549 247.761 li
361.008 247.077 li
361.503 246.573 li
361.548 246.51 li
362.007 245.826 li
362.7 245.124 li
363.258 244.575 li
363.294 244.512 li
363.798 243.765 li
364.257 243.072 li
364.698 242.631 li
365.454 241.875 li
366.003 241.326 li
366.048 241.263 li
366.543 240.516 li
366.966 239.886 li
367.713 239.391 li
367.794 239.265 li
368.217 238.635 li
368.964 238.14 li
369.045 238.014 li
369.504 237.33 li
369.954 236.88 li
370.701 236.124 li
371.205 235.629 li
371.952 234.882 li
372.456 234.378 li
373.203 233.631 li
373.698 233.127 li
374.454 232.38 li
374.949 231.876 li
375.705 231.129 li
376.146 230.679 li
376.965 230.139 li
377.046 230.013 li
377.46 229.392 li
378.153 228.933 li
378.198 228.879 li
378.702 228.375 li
379.449 227.628 li
379.899 227.178 li
380.646 226.683 li
380.7 226.629 li
381.204 226.125 li
381.951 225.378 li
382.401 224.928 li
383.085 224.469 li
383.904 223.929 li
383.949 223.875 li
384.399 223.434 li
385.146 222.93 li
385.2 222.876 li
385.65 222.435 li
386.397 221.931 li
386.451 221.877 li
386.901 221.427 li
387.648 220.932 li
387.702 220.878 li
388.152 220.428 li
388.899 219.933 li
388.953 219.879 li
389.403 219.429 li
390.051 218.997 li
390.546 218.745 li
391.401 218.178 li
391.455 218.124 li
391.824 217.755 li
392.58 217.503 li
392.706 217.377 li
393.147 216.927 li
393.795 216.495 li
394.299 216.252 li
394.335 216.225 li
395.046 215.748 li
395.613 215.46 li
395.703 215.379 li
396.081 215.001 li
396.711 214.794 li
396.756 214.767 li
397.048 214.621 li
395.667 216.144 li
395.668 216.145 li
389.62 222.805 li
389.619 222.804 li
387.694 224.926 li
381.551 231.691 li
381.546 231.687 li
379.53 233.91 li
379.533 233.913 li
377.516 236.135 li
377.514 236.133 li
375.498 238.356 li
375.498 238.356 li
373.485 240.573 li
373.482 240.57 li
371.466 242.793 li
371.468 242.795 li
369.45 245.016 li
369.45 245.016 li
368.816 245.715 li
365.42 249.455 li
365.418 249.453 li
363.402 251.676 li
363.402 251.676 li
360.804 254.538 li
359.361 256.122 li
359.363 256.124 li
357.346 258.346 li
357.345 258.345 li
355.329 260.559 li
355.333 260.563 li
353.315 262.784 li
353.313 262.782 li
351.297 265.005 li
351.298 265.006 li
348.955 267.586 li
347.67 268.997 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.809673 0.838954 0.187451 colr
f
351.999 283.347 mo
351.486 283.347 li
351.234 283.095 li
350.919 283.095 li
349.848 283.095 li
349.353 282.852 li
349.173 282.852 li
348.984 282.852 li
348.732 282.6 li
348.489 282.6 li
348.453 282.564 li
347.985 282.096 li
347.732 282.096 li
347.706 282.069 li
347.454 281.817 li
347.202 281.565 li
346.95 281.322 li
346.923 281.286 li
346.95 281.322 li
347.202 281.565 li
347.454 281.817 li
347.706 282.069 li
347.732 282.096 li
347.985 282.096 li
348.453 282.564 li
348.489 282.6 li
348.732 282.6 li
348.984 282.852 li
349.173 282.852 li
349.353 282.852 li
349.848 283.095 li
350.919 283.095 li
351.234 283.095 li
351.486 283.347 li
351.999 283.347 li
352.332 283.176 li
352.494 283.095 li
353.997 283.095 li
354.339 282.924 li
354.492 282.852 li
355.365 282.852 li
355.392 282.816 li
355.608 282.6 li
356.247 282.6 li
356.589 282.429 li
357.084 282.177 li
357.246 282.096 li
357.741 282.096 li
358.083 281.925 li
358.587 281.673 li
358.749 281.601 li
359.244 281.601 li
359.586 281.43 li
360.09 281.178 li
360.585 280.926 li
361.089 280.674 li
361.584 280.431 li
361.638 280.404 li
361.729 280.373 li
361.638 280.404 li
361.584 280.431 li
361.089 280.674 li
360.585 280.926 li
360.09 281.178 li
359.586 281.43 li
359.244 281.601 li
358.749 281.601 li
358.587 281.673 li
358.083 281.925 li
357.741 282.096 li
357.246 282.096 li
357.084 282.177 li
356.589 282.429 li
356.247 282.6 li
355.608 282.6 li
355.392 282.816 li
355.365 282.852 li
354.492 282.852 li
354.339 282.924 li
353.997 283.095 li
352.494 283.095 li
352.332 283.176 li
351.999 283.347 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.698039 0.698039 0 colr
f
375.579 271.881 mo
375.579 271.881 li
375.363 271.656 li
377.532 269.577 li
377.996 270.065 li
377.757 270.225 li
376.947 270.765 li
376.893 270.819 li
376.443 271.269 li
375.696 271.764 li
375.642 271.818 li
375.579 271.881 li
347.67 269.001 mo
347.67 268.997 li
348.955 267.586 li
347.67 269.001 li
350.062 268.594 mo
350.388 268.236 li
350.388 268.236 li
350.062 268.594 li
380.336 268.169 mo
380.336 268.169 li
379.701 267.507 li
381.879 265.437 li
382.559 266.152 li
382.194 266.517 li
381.384 267.057 li
381.294 267.183 li
380.88 267.804 li
380.336 268.169 li
352.991 265.368 mo
354.427 263.788 li
354.429 263.79 li
352.991 265.368 li
351.298 265.006 mo
351.297 265.005 li
353.313 262.782 li
353.315 262.784 li
351.298 265.006 li
384.819 264.179 mo
384.819 264.179 li
384.048 263.367 li
386.217 261.297 li
387.045 262.168 li
386.64 262.566 li
385.893 263.322 li
385.443 263.763 li
384.819 264.179 li
356.445 261.567 mo
356.444 261.566 li
358.457 259.349 li
358.461 259.353 li
356.445 261.567 li
355.333 260.563 mo
355.329 260.559 li
357.345 258.345 li
357.346 258.346 li
355.333 260.563 li
389.251 260.13 mo
389.251 260.13 li
388.386 259.227 li
390.555 257.157 li
391.355 257.992 li
390.879 258.309 li
390.798 258.435 li
390.384 259.056 li
389.628 259.56 li
389.547 259.686 li
389.251 260.13 li
360.477 257.13 mo
360.475 257.128 li
362.492 254.906 li
362.493 254.907 li
360.477 257.13 li
359.363 256.124 mo
359.361 256.122 li
360.804 254.538 li
359.363 256.124 li
393.407 255.8 mo
393.407 255.8 li
392.724 255.087 li
394.893 253.008 li
395.534 253.676 li
395.145 254.07 li
394.641 254.565 li
393.894 255.321 li
393.407 255.8 li
364.841 252.319 mo
366.523 250.468 li
366.525 250.47 li
364.841 252.319 li
363.402 251.676 mo
363.402 251.676 li
365.418 249.453 li
365.42 249.455 li
363.402 251.676 li
397.531 251.423 mo
397.531 251.423 li
397.071 250.938 li
399.24 248.868 li
399.534 249.177 li
399.141 249.57 li
398.592 250.119 li
398.547 250.182 li
398.088 250.866 li
397.638 251.316 li
397.531 251.423 li
368.541 248.247 mo
368.54 248.246 li
369.923 246.723 li
368.541 248.247 li
368.816 245.715 mo
369.45 245.016 li
369.45 245.016 li
368.816 245.715 li
371.468 242.795 mo
371.466 242.793 li
373.482 240.57 li
373.485 240.573 li
371.468 242.795 li
376.614 239.364 mo
376.609 239.36 li
378.627 237.138 li
378.63 237.141 li
376.614 239.364 li
375.498 238.356 mo
375.498 238.356 li
377.514 236.133 li
377.516 236.135 li
375.498 238.356 li
380.646 234.918 mo
380.644 234.917 li
382.662 232.695 li
382.662 232.695 li
380.646 234.918 li
379.533 233.913 mo
379.53 233.91 li
381.546 231.687 li
381.551 231.691 li
379.533 233.913 li
384.678 230.481 mo
384.675 230.478 li
386.692 228.257 li
386.694 228.258 li
384.678 230.481 li
388.71 226.035 mo
388.71 226.035 li
388.801 225.934 li
388.71 226.035 li
387.694 224.926 mo
389.619 222.804 li
389.62 222.805 li
387.694 224.926 li
392.742 221.598 mo
392.74 221.597 li
394.758 219.375 li
394.758 219.375 li
392.742 221.598 li
397.59 216.256 mo
398.797 214.927 li
398.799 214.929 li
397.59 216.256 li
395.668 216.145 mo
395.667 216.144 li
397.048 214.621 li
397.056 214.617 li
395.668 216.145 li
400.815 212.715 mo
400.81 212.71 li
401.179 212.304 li
401.195 212.296 li
400.815 212.715 li
f
361.729 280.373 mo
361.729 280.373 li
412.133 231.25 li
411.975 231.561 li
411.957 231.615 li
411.768 232.191 li
411.264 232.695 li
411.21 232.857 li
411.012 233.442 li
410.517 233.946 li
410.463 234.108 li
410.265 234.693 li
409.842 235.116 li
409.797 235.179 li
409.275 235.971 li
409.248 236.016 li
409.113 236.291 li
366.168 278.144 li
366.138 278.154 li
366.084 278.181 li
365.589 278.424 li
365.049 278.694 li
365.004 278.721 li
364.293 279.198 li
363.834 279.423 li
363.339 279.675 li
362.835 279.927 li
362.385 280.152 li
361.729 280.373 li
346.671 272.328 mo
346.671 272.025 li
346.842 271.683 li
347.175 271.026 li
347.175 270.846 li
347.175 270.522 li
347.346 270.18 li
347.67 269.523 li
347.67 269.352 li
347.67 269.001 li
348.955 267.586 li
351.298 265.006 li
353.315 262.784 li
355.333 260.563 li
357.346 258.346 li
359.363 256.124 li
360.804 254.538 li
363.402 251.676 li
365.42 249.455 li
368.816 245.715 li
369.45 245.016 li
371.468 242.795 li
373.485 240.573 li
375.498 238.356 li
377.516 236.135 li
379.533 233.913 li
381.551 231.691 li
387.694 224.926 li
389.62 222.805 li
395.668 216.145 li
397.056 214.617 li
397.368 214.461 li
397.449 214.38 li
397.827 214.002 li
398.457 213.795 li
398.511 213.768 li
399.114 213.462 li
399.204 213.381 li
399.618 212.967 li
399.96 212.796 li
400.707 212.544 li
400.761 212.517 li
401.179 212.304 li
400.81 212.71 li
398.797 214.927 li
397.59 216.256 li
394.758 219.375 li
392.74 221.597 li
388.801 225.934 li
388.71 226.035 li
386.692 228.257 li
384.675 230.478 li
382.662 232.695 li
380.644 234.917 li
378.627 237.138 li
376.609 239.36 li
369.923 246.723 li
368.54 248.246 li
366.523 250.468 li
364.841 252.319 li
362.492 254.906 li
360.475 257.128 li
358.457 259.349 li
356.444 261.566 li
354.427 263.788 li
352.991 265.368 li
350.388 268.236 li
350.062 268.594 li
346.671 272.328 li
f
352.17 284.094 mo
351.171 284.094 li
350.919 283.851 li
349.668 283.851 li
349.173 283.599 li
348.669 283.599 li
348.426 283.347 li
348.174 283.347 li
347.922 283.095 li
347.67 282.852 li
347.418 282.852 li
347.175 282.6 li
346.923 282.348 li
346.671 282.096 li
346.419 281.844 li
346.176 281.601 li
346.176 281.349 li
345.924 281.097 li
345.924 280.845 li
345.672 280.602 li
345.672 280.35 li
345.42 280.098 li
345.42 279.351 li
345.168 279.099 li
345.168 275.346 li
345.42 274.851 li
345.42 273.6 li
345.672 273.096 li
345.672 272.844 li
345.924 272.349 li
345.924 271.845 li
346.176 271.35 li
346.419 270.846 li
346.419 270.351 li
346.671 269.847 li
346.923 269.352 li
346.923 268.848 li
347.175 268.101 li
347.418 267.597 li
347.67 267.102 li
347.922 266.598 li
348.174 266.094 li
348.426 265.347 li
348.669 264.852 li
348.921 264.348 li
349.173 263.844 li
349.668 263.097 li
349.92 262.602 li
350.172 261.846 li
350.424 261.351 li
350.919 260.847 li
351.171 260.1 li
351.675 259.596 li
351.918 258.849 li
352.422 258.345 li
352.674 257.598 li
353.169 257.094 li
353.421 256.347 li
353.925 255.852 li
354.42 255.096 li
354.672 254.601 li
355.176 253.845 li
355.671 253.098 li
356.175 252.594 li
356.418 251.847 li
356.922 251.352 li
357.426 250.596 li
357.921 249.849 li
358.425 249.345 li
358.92 248.598 li
359.424 248.094 li
359.919 247.347 li
360.423 246.6 li
360.918 246.096 li
361.422 245.349 li
362.169 244.602 li
362.673 244.098 li
363.168 243.351 li
363.672 242.595 li
364.176 242.1 li
364.923 241.344 li
365.418 240.849 li
365.922 240.102 li
366.426 239.346 li
367.173 238.851 li
367.668 238.095 li
368.424 237.6 li
368.919 236.844 li
369.423 236.349 li
370.17 235.602 li
370.674 235.098 li
371.421 234.351 li
371.925 233.847 li
372.672 233.1 li
373.176 232.596 li
373.923 231.849 li
374.418 231.345 li
375.174 230.598 li
375.669 230.094 li
376.425 229.599 li
376.92 228.852 li
377.676 228.348 li
378.171 227.844 li
378.918 227.097 li
379.422 226.602 li
380.169 226.098 li
380.673 225.594 li
381.42 224.847 li
381.924 224.352 li
382.671 223.848 li
383.418 223.344 li
383.922 222.849 li
384.669 222.345 li
385.173 221.85 li
385.92 221.346 li
386.424 220.851 li
387.171 220.347 li
387.675 219.852 li
388.422 219.348 li
388.926 218.844 li
389.673 218.349 li
390.168 218.097 li
390.924 217.602 li
391.419 217.098 li
392.175 216.846 li
392.67 216.351 li
393.426 215.847 li
393.921 215.595 li
394.668 215.1 li
395.172 214.848 li
395.676 214.344 li
396.423 214.101 li
396.918 213.849 li
397.422 213.345 li
398.169 213.102 li
398.673 212.85 li
399.168 212.346 li
399.672 212.094 li
400.419 211.851 li
400.923 211.599 li
401.418 211.347 li
401.922 211.095 li
402.426 210.852 li
402.921 210.6 li
403.668 210.348 li
404.172 210.096 li
404.676 210.096 li
405.171 209.844 li
405.675 209.601 li
405.918 209.601 li
406.422 209.349 li
406.926 209.097 li
407.421 209.097 li
407.925 208.845 li
408.672 208.845 li
409.176 208.602 li
410.175 208.602 li
410.418 208.35 li
413.172 208.35 li
413.424 208.602 li
414.423 208.602 li
414.675 208.845 li
415.17 208.845 li
415.422 209.097 li
415.674 209.097 li
415.926 209.349 li
416.169 209.601 li
416.421 209.601 li
416.673 209.844 li
416.925 210.096 li
416.925 210.348 li
417.168 210.348 li
417.42 210.6 li
417.42 210.852 li
417.672 211.095 li
417.924 211.347 li
417.924 211.599 li
418.176 211.851 li
418.176 212.598 li
418.419 212.85 li
418.419 213.102 li
418.167 213.102 li
418.419 213.102 li
418.419 213.849 li
418.671 214.101 li
418.671 216.351 li
418.419 216.846 li
418.419 218.097 li
418.176 218.601 li
418.176 218.844 li
417.924 219.348 li
417.924 220.347 li
417.672 220.851 li
417.42 221.346 li
417.42 221.85 li
417.168 222.345 li
416.925 222.849 li
416.925 223.344 li
416.673 223.848 li
416.421 224.352 li
416.169 225.099 li
415.926 225.594 li
415.674 226.098 li
415.422 226.602 li
415.17 227.097 li
414.918 227.844 li
414.675 228.348 li
414.423 228.852 li
413.919 229.599 li
413.676 230.094 li
413.424 230.85 li
412.92 231.345 li
412.668 231.849 li
412.425 232.596 li
411.921 233.1 li
411.669 233.847 li
411.174 234.351 li
410.922 235.098 li
410.418 235.602 li
409.923 236.349 li
409.671 236.844 li
409.176 237.6 li
408.672 238.095 li
408.42 238.851 li
407.925 239.598 li
407.421 240.102 li
406.926 240.849 li
406.422 241.344 li
405.918 242.1 li
405.423 242.847 li
404.919 243.351 li
404.424 244.098 li
403.92 244.845 li
403.425 245.349 li
402.921 246.096 li
402.426 246.6 li
401.922 247.347 li
401.418 248.094 li
400.923 248.598 li
400.419 249.345 li
399.672 250.101 li
399.168 250.596 li
398.673 251.352 li
398.169 251.847 li
397.422 252.594 li
396.918 253.35 li
396.423 253.845 li
395.676 254.601 li
395.172 255.096 li
394.425 255.852 li
393.921 256.347 li
393.426 257.094 li
392.67 257.598 li
392.175 258.345 li
391.419 258.849 li
390.924 259.596 li
390.168 260.1 li
389.673 260.847 li
388.926 261.351 li
388.422 262.098 li
387.675 262.602 li
387.171 263.097 li
386.424 263.844 li
385.92 264.348 li
385.173 264.852 li
384.669 265.599 li
383.922 266.094 li
383.175 266.598 li
382.671 267.102 li
381.924 267.597 li
381.42 268.344 li
380.673 268.848 li
380.169 269.352 li
379.422 269.847 li
378.918 270.351 li
378.171 270.846 li
377.424 271.35 li
376.92 271.845 li
376.173 272.349 li
375.669 272.844 li
374.922 273.348 li
374.418 273.6 li
373.671 274.095 li
373.176 274.599 li
372.42 275.094 li
371.925 275.346 li
371.169 275.85 li
370.674 276.345 li
370.17 276.597 li
369.423 277.101 li
368.919 277.344 li
368.172 277.848 li
367.668 278.1 li
367.173 278.595 li
366.426 278.847 li
365.922 279.099 li
365.418 279.351 li
364.671 279.846 li
364.176 280.098 li
363.672 280.35 li
363.168 280.602 li
362.673 280.845 li
361.926 281.097 li
361.422 281.349 li
360.918 281.601 li
360.423 281.844 li
359.919 282.096 li
359.424 282.348 li
358.92 282.348 li
358.425 282.6 li
357.921 282.852 li
357.426 282.852 li
356.922 283.095 li
356.418 283.347 li
355.923 283.347 li
355.671 283.599 li
354.672 283.599 li
354.168 283.851 li
352.674 283.851 li
352.17 284.094 li
348.489 282.6 mo
348.732 282.6 li
348.984 282.852 li
349.173 282.852 li
349.353 282.852 li
349.848 283.095 li
350.919 283.095 li
351.234 283.095 li
351.486 283.347 li
351.999 283.347 li
352.332 283.176 li
352.494 283.095 li
353.997 283.095 li
354.339 282.924 li
354.492 282.852 li
355.365 282.852 li
355.392 282.816 li
355.608 282.6 li
356.247 282.6 li
356.589 282.429 li
357.084 282.177 li
357.246 282.096 li
357.741 282.096 li
358.083 281.925 li
358.587 281.673 li
358.749 281.601 li
359.244 281.601 li
359.586 281.43 li
360.09 281.178 li
360.585 280.926 li
361.089 280.674 li
361.584 280.431 li
361.638 280.404 li
361.729 280.373 li
362.385 280.152 li
362.835 279.927 li
363.339 279.675 li
363.834 279.423 li
364.293 279.198 li
365.004 278.721 li
365.049 278.694 li
365.589 278.424 li
366.084 278.181 li
366.138 278.154 li
366.168 278.144 li
366.768 277.938 li
367.146 277.569 li
367.227 277.479 li
367.794 277.2 li
368.505 276.723 li
368.541 276.696 li
369.045 276.444 li
369.756 275.976 li
369.792 275.949 li
370.224 275.733 li
370.638 275.319 li
370.692 275.265 li
371.547 274.698 li
372.042 274.446 li
372.69 274.014 li
373.14 273.564 li
373.194 273.519 li
374.049 272.952 li
374.544 272.7 li
375.192 272.268 li
375.579 271.881 li
375.642 271.818 li
375.696 271.764 li
376.443 271.269 li
376.893 270.819 li
376.947 270.765 li
377.757 270.225 li
377.996 270.065 li
378.441 269.766 li
378.891 269.316 li
378.945 269.262 li
379.692 268.767 li
380.142 268.317 li
380.196 268.263 li
380.336 268.169 li
380.88 267.804 li
381.294 267.183 li
381.384 267.057 li
382.194 266.517 li
382.559 266.152 li
382.644 266.067 li
382.698 266.013 li
383.508 265.473 li
384.129 265.059 li
384.552 264.429 li
384.633 264.303 li
384.819 264.179 li
385.443 263.763 li
385.893 263.322 li
386.64 262.566 li
387.045 262.168 li
387.144 262.071 li
387.198 262.017 li
387.882 261.558 li
388.296 260.928 li
388.377 260.811 li
389.133 260.307 li
389.251 260.13 li
389.547 259.686 li
389.628 259.56 li
390.384 259.056 li
390.798 258.435 li
390.879 258.309 li
391.355 257.992 li
391.635 257.805 li
392.049 257.184 li
392.13 257.058 li
392.877 256.554 li
393.3 255.933 li
393.336 255.87 li
393.407 255.8 li
393.894 255.321 li
394.641 254.565 li
395.145 254.07 li
395.534 253.676 li
395.892 253.314 li
396.342 252.873 li
396.801 252.18 li
396.837 252.117 li
397.531 251.423 li
397.638 251.316 li
398.088 250.866 li
398.547 250.182 li
398.592 250.119 li
399.141 249.57 li
399.534 249.177 li
399.843 248.868 li
400.302 248.184 li
400.338 248.121 li
400.842 247.617 li
401.301 246.933 li
401.796 246.186 li
401.841 246.123 li
402.336 245.619 li
402.795 244.935 li
402.84 244.872 li
403.335 244.368 li
403.794 243.684 li
404.298 242.928 li
404.343 242.874 li
404.838 242.37 li
405.297 241.686 li
405.801 240.93 li
405.837 240.867 li
406.341 240.372 li
406.8 239.679 li
406.836 239.616 li
407.34 239.121 li
407.745 238.518 li
407.961 237.861 li
408.015 237.69 li
408.591 237.123 li
409.023 236.475 li
409.113 236.291 li
409.248 236.016 li
409.275 235.971 li
409.797 235.179 li
409.842 235.116 li
410.265 234.693 li
410.463 234.108 li
410.517 233.946 li
411.012 233.442 li
411.21 232.857 li
411.264 232.695 li
411.768 232.191 li
411.957 231.615 li
411.975 231.561 li
412.133 231.25 li
412.254 231.012 li
412.308 230.904 li
412.767 230.445 li
412.956 229.86 li
412.974 229.806 li
413.253 229.266 li
413.271 229.221 li
413.775 228.474 li
414 228.015 li
414.225 227.556 li
414.459 226.863 li
414.477 226.809 li
414.747 226.26 li
414.999 225.765 li
415.251 225.261 li
415.476 224.811 li
415.71 224.109 li
415.728 224.064 li
415.998 223.515 li
416.169 223.173 li
416.169 222.849 li
416.169 222.669 li
416.502 222.012 li
416.673 221.67 li
416.673 221.346 li
416.673 221.175 li
416.997 220.509 li
417.168 220.167 li
417.168 219.348 li
417.168 219.168 li
417.42 218.673 li
417.42 218.601 li
417.42 218.421 li
417.672 217.917 li
417.672 216.846 li
417.672 216.675 li
417.924 216.171 li
417.924 214.407 li
417.888 214.38 li
417.672 214.155 li
417.672 213.157 li
417.645 213.129 li
417.42 212.913 li
417.42 212.157 li
417.393 212.13 li
417.168 211.905 li
417.168 211.662 li
417.141 211.626 li
416.889 211.374 li
416.673 211.158 li
416.673 211.095 li
416.357 211.095 li
416.169 211.095 li
416.169 210.411 li
416.142 210.375 li
416.114 210.348 li
415.863 210.348 li
415.395 209.88 li
415.359 209.844 li
415.107 209.844 li
414.864 209.601 li
414.675 209.601 li
414.36 209.601 li
414.108 209.349 li
413.424 209.349 li
413.109 209.349 li
412.857 209.097 li
410.733 209.097 li
410.706 209.124 li
410.481 209.349 li
409.347 209.349 li
409.005 209.52 li
408.852 209.601 li
408.096 209.601 li
407.754 209.772 li
407.601 209.844 li
407.097 209.844 li
406.755 210.015 li
406.26 210.267 li
406.098 210.348 li
405.846 210.348 li
405.504 210.519 li
405.009 210.771 li
404.847 210.852 li
404.352 210.852 li
404.01 211.023 li
403.956 211.041 li
403.209 211.293 li
402.759 211.518 li
402.255 211.77 li
401.76 212.022 li
401.256 212.265 li
401.195 212.296 li
401.179 212.304 li
400.761 212.517 li
400.707 212.544 li
399.96 212.796 li
399.618 212.967 li
399.204 213.381 li
399.114 213.462 li
398.511 213.768 li
398.457 213.795 li
397.827 214.002 li
397.449 214.38 li
397.368 214.461 li
397.056 214.617 li
397.048 214.621 li
396.756 214.767 li
396.711 214.794 li
396.081 215.001 li
395.703 215.379 li
395.613 215.46 li
395.046 215.748 li
394.335 216.225 li
394.299 216.252 li
393.795 216.495 li
393.147 216.927 li
392.706 217.377 li
392.58 217.503 li
391.824 217.755 li
391.455 218.124 li
391.401 218.178 li
390.546 218.745 li
390.051 218.997 li
389.403 219.429 li
388.953 219.879 li
388.899 219.933 li
388.152 220.428 li
387.702 220.878 li
387.648 220.932 li
386.901 221.427 li
386.451 221.877 li
386.397 221.931 li
385.65 222.435 li
385.2 222.876 li
385.146 222.93 li
384.399 223.434 li
383.949 223.875 li
383.904 223.929 li
383.085 224.469 li
382.401 224.928 li
381.951 225.378 li
381.204 226.125 li
380.7 226.629 li
380.646 226.683 li
379.899 227.178 li
379.449 227.628 li
378.702 228.375 li
378.198 228.879 li
378.153 228.933 li
377.46 229.392 li
377.046 230.013 li
376.965 230.139 li
376.146 230.679 li
375.705 231.129 li
374.949 231.876 li
374.454 232.38 li
373.698 233.127 li
373.203 233.631 li
372.456 234.378 li
371.952 234.882 li
371.205 235.629 li
370.701 236.124 li
369.954 236.88 li
369.504 237.33 li
369.045 238.014 li
368.964 238.14 li
368.217 238.635 li
367.794 239.265 li
367.713 239.391 li
366.966 239.886 li
366.543 240.516 li
366.048 241.263 li
366.003 241.326 li
365.454 241.875 li
364.698 242.631 li
364.257 243.072 li
363.798 243.765 li
363.294 244.512 li
363.258 244.575 li
362.7 245.124 li
362.007 245.826 li
361.548 246.51 li
361.503 246.573 li
361.008 247.077 li
360.549 247.761 li
360.045 248.517 li
360.009 248.58 li
359.505 249.075 li
359.046 249.768 li
359.001 249.822 li
358.506 250.326 li
358.047 251.01 li
357.543 251.766 li
357.507 251.829 li
357.075 252.252 li
356.886 252.837 li
356.823 252.999 li
356.256 253.575 li
355.797 254.268 li
355.32 254.979 li
355.095 255.429 li
355.068 255.474 li
354.546 256.266 li
354.501 256.329 li
354.078 256.752 li
353.88 257.337 li
353.826 257.499 li
353.331 258.003 li
353.133 258.588 li
353.079 258.75 li
352.575 259.254 li
352.386 259.839 li
352.323 260.001 li
351.828 260.505 li
351.63 261.081 li
351.576 261.252 li
351.036 261.792 li
350.865 262.134 li
350.631 262.836 li
350.613 262.89 li
350.343 263.43 li
350.325 263.475 li
349.821 264.222 li
349.596 264.681 li
349.344 265.185 li
349.119 265.635 li
348.885 266.337 li
348.867 266.382 li
348.597 266.931 li
348.345 267.435 li
348.093 267.93 li
347.868 268.389 li
347.67 268.974 li
347.67 268.997 li
347.67 269.001 li
347.67 269.352 li
347.67 269.523 li
347.346 270.18 li
347.175 270.522 li
347.175 270.846 li
347.175 271.026 li
346.842 271.683 li
346.671 272.025 li
346.671 272.328 li
346.671 272.349 li
346.671 272.529 li
346.419 273.024 li
346.419 273.096 li
346.419 273.276 li
346.176 273.771 li
346.176 274.851 li
346.176 275.022 li
345.924 275.526 li
345.924 278.784 li
345.951 278.82 li
346.176 279.036 li
346.176 279.783 li
346.203 279.819 li
346.419 280.035 li
346.419 280.287 li
346.455 280.314 li
346.671 280.539 li
346.671 280.791 li
346.698 280.818 li
346.923 281.034 li
346.923 281.286 li
346.95 281.322 li
347.202 281.565 li
347.454 281.817 li
347.706 282.069 li
347.732 282.096 li
347.985 282.096 li
348.453 282.564 li
348.489 282.6 li
f
382.422 237.765 mo
399.422 237.765 li
385.669 247.758 li
390.922 231.59 li
396.175 247.758 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
true set_gvm
%ADOBeginSubsetFont: NZPPMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NZPPMX+Helvetica gcheck setglobal} if
1 440 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>NZPPMX+Helvetica AddT42Char 
1 504 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>NZPPMX+Helvetica AddT42Char 
1 724 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>NZPPMX+Helvetica AddT42Char 
1 1876 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>NZPPMX+Helvetica AddT42Char 
NZPPMX+Helvetica /CharStrings get begin
/period 17 def
/zero 19 def
/one 20 def
/six 25 def
end
NZPPMX+Helvetica /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAF+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six 10{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H /I 2{/.notdef}rp /L 2{/.notdef}rp /O /P /Q /.notdef /S /.notdef /U 11{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i /j /.notdef /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]MOQTAF+Helvetica nfMOQTAF+Helvetica*1 [16 0 0 -16 0 0 ]msf545.664 155.673 mo(OPAL )[12.448 10.6721 10.6721 8.896 0 ]xshtrue set_gvm
%ADOBeginSubsetFont: ITAQMX+Helvetica-Oblique Initial
ct_T42Dict begin
-0.93 -0.48 1.57 1.137
 256 array 0 1 255 {1 index exch /.notdef put} for  /ITAQMX+Helvetica-Oblique
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481cff000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966b958ce7f000059c4000002a86865616489b0960600000eb80000
0036686865610cfb16c800000ef000000024686d74785dd5659400000f14
000021a46c6f63610015e3bc000030b8000021a86d61787010d30b090000
5260000000206e616d6595609cce000052800000037170726570bc836e31
000055f4000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300010009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d000000000100000000000007c7f85d
5f0f3cf500110800000000005f4d8f0000000000c621bcc5f88afc270c92
091b000200090001000100000000000100000629fe2900000c01f88afc35
0c92080001b3000000000000000000000000086905120042000000000239
000002390000023900ed02d7012c0473005e04730078071d010005560086
0187017802aa00d702aaffef031d014f04ac00b90239006902aa00ba0239
00af023900000473008f0473019b04730040047300640473007e04730074
04730085047301170473006904730080023900e3023900a204ac007904ac
008b04ac001704730172081f013b0556001e0556009705c7009e05c700a5
055600af04e300af063900ab05c700a1023900c9040000400556009c0473
009c06aa009705c7009c063900a4055600af063900a405c700b405560092
04e3013405c700f90556016c078d015d0556002a0556016204e3002f0239
002a023900f30239ffda03c100f80473ffca02aa01b50473007004730076
040000750473006f0473007d023900b10473002c0473008401c7008401c7
ff800400008001c7008906aa008404730084047300720473001b0473006d
02aa00890400006e023900bf047300ab040000ee05c700f50400000b0400
001b0400003402ac003b0214009002acffd204ac00560556001e0556001e
05c7009e055600af05c7009c063900a405c700f904730070047300700473
00700473007004730070047300700400006f0473007d0473007d0473007d
0473007d023900bd023900bd023900bd023900bd04730084047300720473
0072047300720473007204730072047300ab047300ab047300ab047300ab
0473010b03330145047300b10473005b0473008502cd00ea044c00a304e3
00c705e5007005e5006d0800020b02aa019b02aa01580464008b08000010
0639004705b400a10464005c0464005a0464005c047300c7049cff5b03f4
009705b4ffe90696008d046400c30231002802f6010302ec010f0625005e
071d006504e3005c04e3008e02aa009304ac00e7046400a50473ffd40464
007e04e5007104730124047300ef080000ed023900000556001e0556001e
063900a408000096078d007a047300630800015902aa011a02aa011701c7
015001c70173046400b903f400420400001b055601620156fea205f400cf
02aa011602aa00d7040000b1040000b1047300620239012001c7006902aa
000d0800009e0556001e055600af0556001e055600af055600af023900c9
023900c9023900c9023900b8063900a4063900a406520066063900a405c7
00f905c700f905c700f9023900bd02aa015102aa010202aa012502aa012a
02aa01fd02aa019b02aa003002aa00fe02aa004c02aa01140473004f01c7
0042055600920400006e04e3002f040000340214009005c700a504730078
055601620400001b055600800473002304ac00b904ac009202aa014c02aa
008402aa009906ac010706ac017706ac00e704730030063900ab0473002c
023900c9055600920400006e05c7009e0400007505c7009e040000750473
006f0556001e047300700556001e047300700556001e0473007005c7009e
0400007505c7009e0400007505c700a50548006f055600af0473007d0556
00af0473007d055600af0473007d055600af0473007d055600af0473007d
063900ab0473002c063900ab0473002c063900ab0473002c0473002c05c7
00a10473008405c700a104730084038f015a0371013503330139031f013a
0239ffd601c7ff67063900c9038e00840400004001c7ff800556ffb70400
ff7d0473009c021f00890473009c01c7ff890473009c023f004e0473009c
027b008905c7009c0473008405c7ffab0473ff8c05c7009c047300840473
00e8063900a404730072063900a404730072063900a40473007205c700b4
02aa008905c7ffc102aaff8505c700b402aa0089055600920400006e0556
00920400006e04e3011a0239003904e3013402e100bf04e30134028f0067
05c700f9047300ab05c700f9047300ab05c700f9047300ab05c700f90473
00ab05c700f9047300ab05c700f9047300ab078d015d05c700f505560162
0400001b04e3002f0400003404e3002f04000034055600920400006e04e3
0134023900690473008d0000fe3c0000fdfe0000fd9e0000fd6e0000fd97
0000fdbe0000fe700000fdcb0000fe110000fd720000fddc0000fcd10000
fc920000fccc0000fc9105c700a5063900ab0473002c0473009c01c70007
0556009c0400008005c7009c0473008405c700b402aa000901aaff890237
009f02aa00ba01c7ff8004000080023900b1047300980473009b0400006f
047300de0000fe830000fd770000fd9a023900c9023900bd05c7009c0473
00840000fda00556ffba0556001005c7004c047300100556ff3704e30039
0748ffc504e3ffe905c7001005c70010055600560583ff81071d004c05c7
00390639007b05c700210556004c05c7007b047300a4055600660639003f
04e3000005c700210537008f078d0021078d002106aa009c071d00100556
002105c70025078dfffe05cb001d047300250473002504730004031d0012
04beff960473003306aaffaa0400fff80473fffe0473fffe0400000404c5
ffd10558000404730004047300250473000404e3ffbe0473002503d90081
0400ffe706aa00330400ffc5047300040446006006ac000406ac000404e3
006d05c700040400000404730033063900040477ffec04e3003904730033
04730010031d00120239003901c7fffe0400fff605c70064047300330239
003901c7fffe0831ffd306e1ffd1078d00100639000401c7ff370556005e
061b00790473004c055600560400000404000004060a00b20473004c0556
00660400ffe705c700210473000404730010031d00120000fe280000fe25
0000fe250000fe4e0000fd910000fe870000fe1e0000fdbe0000fce80000
fcaa0000fc430000fd1c0000fc770000fcbd0000fd330000fc880000fc4a
0000fc640000fc480000fc1a0000fc430000fc230000fcd10000fced0000
fccd0000fbf20000fe250000fd460000fe250000fd8e0000fd9e0000fcca
000000000239ffc1047300ad06aa00b502aa008806aa00b502aa004702aa
0088042b0071042b00780202009c033affa9023900520239006504000009
05c7001004000014047301720473016d047300d30400009704b2007604b2
00a505c700ae05c700a5048900ac055600ae055600830400006504980039
06e600f9059500ab060a00a4021400b6037300b6023900ed048c00800400
00750134ffd402aa018302aa02010b0600a2055600ed029600ed02aa0142
01c7019c02aa00ba044c0024042f0183042f0201056501830565020102aa
00ba0296017102aa00ba0800015902d50111011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aaff830370
00b60473017202aa00ba02aa0133044c00b0044c00f00556001e04e300ad
0473009b071c00a4056800720000fe5f0000fe790000fd250000fd0b0000
fdae0000fdc20000fe6d0000fdbe0000fdda0000fdd30000fdca0000fdc1
0000fd330000fe190000fe730000fe160000fda60000fc100000fcdc0000
fc710000fc9f0000fc420000fc710000fc430000fdb40155011d027b011d
0155011d0155fff40464ff470464008b03f4ff0903f4009705b4fffa05b4
ffe90231fd2f023100280464fda0046400a50464ff3a0464007e08fa0145
081601450556009c023900c9047200c906ab00c9078f00c90556016c078f
016c09c8016c0c01016c078f00c90556002a078f002a09c8002a0473009c
05c7009e05c700a506aa009701c70084038e00840555008405c700840400
00ee05c700ee078e00ee095500ee05c700840400000b05c7000b078e000b
01c70089040000750473006f06aa008409e2007408c1004f07db006f07da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730070
023900c9023900bd063900a40473007205c700f9047300ab05c700f90473
00ab05c700f9047300ab05c700f9047300ab05c700f9047300ab0556001e
047300700556001e0473007008000010071d0065063900ab0473002c0556
009c04000080063900a404730072063900a40473007201c7ff8009cd0054
08fc006f07fb006f063900ab05c7009c047300840556001e047300700800
0010071d00650639004704e3005c0556001e047300700556001e04730070
055600af0473007d055600af0473007d023900c701c70052023900c901c7
008d063900a404730072063900a40473007205c700b402aa008905c700b4
02aa008905c700f9047300ab05c700f9047300ab05c700a1047300840556
001e04730070055600af0473007d063900a404730072063900a404730072
063900a404730072063900a404730072055601620400001b02aa01170239
00c90556001e047300700556009704730076055600970473007605560097
0473007605c7009e0400006f05c700a50473006f05c700a50473006f05c7
00a50473006f05c700a50473006f05c700a50473006f055600af0473007d
055600af0473007d055600af0473007d055600af0473007d055600af0473
007d04e300af023900b1063900ab0473002c05c700a10473008405c700a1
0473008405c700a10473008405c7ffbe0473ff8d05c700a1047300840239
ffac01c7ff5e023900c9023900bd0556009c040000800556009c04000080
0556009c040000800473009c01c700560473009c01c700480473009c01c7
ff880473009c01c7ff6006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900a404730072063900a404730072063900a404730072
063900a404730072055600af0473001b055600af0473001b05c700b402aa
008905c700b402aa004b05c700b402aa004505c700b402aaffec05560092
0400006e055600920400006e055600920400006e055600920400006e0556
00920400006e04e30134023900bf04e301340239008904e3011902390004
04e301050239ffa005c700f9047300ab05c700f90473007705c700f90473
00ab05c700f9047300ab05c700f9047300ab0556016c040000ee0556016c
040000ee078d015d05c700f5078d015d05c700f5078d015d05c700f5078d
015d05c700f5078d015d05c700f50556002a0400000b0556002a0400000b
055601620400001b04e3002f0400003404e3002f0400003404e3002f0400
003404730084023900bf05c700f50400001b023900b10556001e04730070
0556001e047300700556001e047300700556001e047300700556001e0473
00700556001e047300700556001e047300700556001e047300700556001e
047300700556001e047300700556001e047300700556001e047300700556
00af0473007d055600af0473007d055600af0473007d055600af0473007d
055600af0473007d055600af0473007d055600af0473007d055600af0473
007d023900c9023900bd023900a001c70048063900a404730072063900a4
04730072063900a404730072063900a404730072063900a4047300720639
00a404730072063900a404730072071c00a405680072071c00a405680072
071c00a405680072071c00a405680072071c00a40568007205c700f90473
00ab05c700f9047300ab06e600f9059500ab06e600f9059500ab06e600f9
059500ab06e600f9059500ab06e600f9059500ab055601620400001b0556
01620400001b055601620400001b055601620400001b055600af0473007d
055600af0473007d056d001605df000e048600350486fffe0723ffc50589
ffaa056dffba04860012056dffba04860012056d00160486003508d9ffcb
06ddffa5054fffe7040afff505df000e0486fffe05df000e0486fffe0655
007b0486002f05df00210412003b056d00470412ffe9056d00470412ffe9
056d00470412ffe905ac008d047a006d074800100600000a08000010071d
006506aa009706aa008405c700b402aa0089022200f50556001b05c700c5
04e300d505c70029055600c504e3004805c700b0063900c2023900ba0556
00b00556002f071d00be05c700b004e30062063900c205c700b0055600c5
04e3005804e1013d0556015c05c700b40558003d06a800f2063900640239
00ba0556015c04e3009a04e3005e047300d504e300a3047300a3038d0074
04e300b804e500f5023900d1047300b00473002504e30062047301240400
00a004e300b004e300540473008d04e300b0040000fb04e300b505c700b8
0473ffbe05c700bd061000a6023900d104e300b5023901160222010e0000
fcc50239005b016c015c016c015c0000fe3c0000fdfe016c017c02ca011f
02b5011f0305015c0312017c0222015a02220106031e015c036201850333
017c036201850735007f062500c30639003201c7015001c70173047200ed
06ac017206ac00ed0473007d0473007d0556001e04730070047300700556
00af0473007d055600af0473007d055600af0473007d023900c9023900bd
01c70084063900a404730072063900a404730072063900a4047300720556
00920400006e05c700f9047300ab0400000b06e600f9059500ab060200d4
0473ff7c05c7ff980473008406aa008403f0009c046000c203a6009c03e9
009702cf00630448008c060200d404730033065500a70486008a063900a4
02aaffcc07c6002b07c6010c08e600840000fa2a0000faf40000fb3c0000
fb170000f9c3060200d404730033065500a70486008a0222010602b5011f
0473002504e3002f040000340473007204d2008404dc006f0473007604bd
006f04d7002c0473008404d700840222004b078d007a0387008802aa004b
04d2006d04b80107052b01070772006f056000bf043a007705ce00b104c2
008904b8008901a9018a01a901a401c7019c0187016b02aa011802aa01c2
02aa01790187001702aaffc502aa006e02aa002501a900e001a900fa02aa
000902aa00d6023a00dd023a00dd00e4005a015500e0015500df01c400df
02e40116020000a8023a0154023a0152025600d7025600a7025600b80256
013402aa00b20256005c0256002d0256008b020000d2020000a100e300df
025600e4023a0105025600350256ffba0256ffd90256ffa802aa003e023a
01520000fc790000fc6d0000fc3c0000fd070000fd170000fc060000fd5a
0000fb380000fd3c0000fc060000fdcd0000fdc80000fdda000000000239
0000000000000000000000000000031d0090031d009006da018307c6ffe3
023900cf08e6017207c6002b071d019a0703005f0239002a0239002f0000
00000000000000000000000000000000000000000000067b007c023a00f1
023900e9023900e4023a00ed02390135023a00de023900ea025601060155
0107025600ef01550115015500a0023a00ec023affb3023a00380239ff8c
0239ff9d0239ffab0239ffa6023affaf0239fff7023affa00239ffac0256
ffc80155ffca0256ffb10155ffd70155ff62063c0011063900cd047301af
0473009c0556002a06abffe9060000f307560144047300a907c8010206ac
010705c700b50556018404e501a90696ffdd06abff1b06abffe9055600af
04730076055600dd047300b604e3ffa8063900a404c400a1024100220369
00ed05c7009102bb00ab033affa9047301430473015801c7002a01c700e3
0473002c04e3009a04e3009a04e3009a04e3009a04e3009a04e3009a04e3
009a04e3009a05c1005b05b3005b076c015c0776017c0776015c078d017c
07ca018507a00185047300a3047300a3047300a3047300a3047300a30473
00a306c2015c06c2017c0874015c0889017c085b015c0868017c04e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80733
015c0733017c08e5015c08fa017c08cc015c08d9017c0929018509290185
023900d1023900d1023900d1023900d1023900d1023900d1023900d10239
00d103a5015c03a5017c0557015c056c017c053e015c054b017c059b0185
059b018504e300b004e300b004e300b004e300b004e300b004e300b007a5
015c07a5017c0957015c096c017c093e015c094b017c04e300b504e300b5
04e300b504e300b504e300b504e300b504e300b504e300b506c2017c0889
017c0868017c08b80185061000a6061000a6061000a6061000a6061000a6
061000a6061000a6061000a60791015c0791017c0943015c0958017c092a
015c0937017c098701850987018504e3009a04e3009a047300a3047300a3
04e300b804e300b8023900d1023900d104e300b004e300b004e300b504e3
00b5061000a6061000a604e3009a04e3009a04e3009a04e3009a04e3009a
04e3009a04e3009a04e3009a0811005b080c005b0991015c09d8017c097f
015c099b017c09d3018509ce018504e3004404e3004404e3004404e30044
04e3004404e3004404e3004404e30044096c015c096c017c0b1e015c0b33
017c0b05015c0b12017c0b6201850b620185061000a6061000a6061000a6
061000a6061000a6061000a6061000a6061000a609ca015c09ca017c0b7c
015c0b91017c0b63015c0b70017c0bc001850bc0018504e3009a04e3009a
04e3009a04e3009a04e3009a04e3009a04e3009a0556001b0556001b0666
01110661010607a9001b04e3004404e3004404e3004404e300b804e30044
06ac015a06a7010606d2015a06ba0106083100b0023900d1023900d10239
00d1023900c8023900d1023900d1023900ba023900ba0343015a03480106
04e300b504e300b504e300b504e300b504e3005404e3005404e300b504e3
00b50556015c0556015c06b1015a0713010606c2017c061000a6061000a6
061000a6061000a6061000a6075a015a078901060792015a07a901060878
005e04e3009a047300a304e300b8023900d104e300b004e300b5061000a6
0661010606a7010606ba010603480106078901060713010607a901060239
00c904e300b504ac008304ea00d204f7016002f300ae02bb00cd04730025
04e3009a04e3009a04e3009a04e3009a04e3009a04e3009a04e3009a04e3
009a04e3009a04e3009a04e3009a04e3009a04e3009a04e3009a04e3009a
04e3009a023900cb023900cf023900c6023900d1023900cb023900bc0239
00c5023900c1023900cf023900d1023900d1023900d1023900d1023900d1
023900d1023900d1023900d1023900d104e300b504e300b504e300b504e3
00b504e300b504e300b504e300b504e300b504e300b504e300b504e300b5
04e300b504e300b504e300b504e300b504e300b504e300b504e300b50666
01110661010605c1005b076c015c0776015c05b3005b0776017c078d017c
066601110661010605c1005b076c015c0776015c05b3005b0776017c078d
017c0343015a034801060348010603a5015c0557015c053e015c03a5017c
056c017c054b017c0343015a034801060348010603a5015c0557015c053e
015c03a5017c056c017c054b017c06b1015a071301060713010606c2015c
0889015c0868015c06c2017c0889017c0868017c06b1015a071301060713
010606c2015c0889015c0868015c06c2017c0889017c0868017c05c700b4
05c7009e063900a401c700ca051d0029055600af05c700a10000fd1c0552
00680473006f0639007b04730025077200920738007605e5006e06ac00f4
06ac00f406ac00fe06ac00fe0556fffc04e3006d082200d005e1008a06a8
00f205c700bd0556001e0400000b079900d005cf008a04da00bd02ca00a9
05d90099058800e105c7007904730070031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f00b4040a0072056d00a50412007a05df00ac0486009105df00c00412
008104f8014604120100056d002e0412002405ac0161047a00f705ac00ac
047a0077055601620556010e04d900bc037c009105ac0161047a00f70632
00a504df007a075f00ac059b009105560148055600fe06fe0146054e00fb
074800da059400a0074800da059400a00772016305b300fe05df00ac0486
009104730070054f00c2054f006806a8007f04dc005d0855004405e00026
0556009a0400006d0556016c04b600ee0400007c054f00a2040a006105f1
0028049c0023023900bd056d002e04120024055600340556001e05c7009e
040000750473007c04e300cd01c7005802bb00cd04e3010b055600af0473
017204730120055600af0473007d0456004001c7ff8005c700aa01a9009f
01a9001d02aa00b002aa00ee02aa00f502aaffe90239013a02aa003802aa
0038057f00be04ac008304ac00a0023900e304ac00a9057c00ac04ac00f9
023900e3023900e3063900c20412008104120067055600ae0473002305c7
009e06aa009705dd0041059b000f05c700b505c7009e05c700b50400007c
040000750400007c047300bd05ca007b06c600ce063f00b4031f0065062e
00f904e9009b0488004502aa017e02aa01e602aa00be02aa00be0277003b
0277003b034b0118034b0000034b00d2034b008c034b00460487004203f7
0101045e0054043600830436008302fd00f3034f0084069900b706550063
052900b40000f88a06e1007d04e9005f01e0010b01e9010b015d00e5015d
012c019900ea019800f402fb013f0304013f026700c6025700c50257013e
02c8010b01d8013201d800d407e9003a097c00140931ffdb0931ffcc013c
004b0457007f058900940589013604be00100442001c01d8007101d80013
03fe007c03fe005c04040032036f0092046700770000fb560000fc4c0000
fbcd0000fd6e0000fd4e0000fa2a0000fc8e0000ff9c0000fc510000fc18
0000f9e80000fdd30465005b0465006704010003040100130776004e044c
006003ea000c051a00340653007a04c8002206c2015c0889015c0868015c
0556001b0556001b023900ba023900ba0556015c0556015c0404002205e5
006f05e5006f05e5006f0800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404002200e400ec023affa4023affab023affa50200ff72023affba
05c7009e063900ab05c7009e047100c1055200de04e300cb0556001e04d0
009c05c2004e04d9004e05c7003906aa008405d000c1066400a1082d00b4
0552011705520097039c003f03800025039c011e038000de039c010d0381
00bb039c00540381000202eb005302e3005302e3005302e3005302eb0053
02eb011a02e300d102e3009102e3005002eb001703630053036300530363
00530363005303630053027f00d2033000cf03b200d303c300d4050b00b3
069c00c50390007e0000fd420000fd970000fd2c0000fd700000fd6b0000
fd380000fd2f0000fcf70000fcc504650067040100130a3900a408730072
0436008304360083043600c2032900e603290136035500ea0543003e0329
00ea032900e6032900ef0329010502f600e602f6010c032900b6014300f4
02d700f104bb00f4032900f4032900e802d700e60329010b032900e80329
00aa0194011e03290110037300db04bb011802d70140037800da0329012e
0378010a04dc00600632008a04be000e047300a60473007204e6007904e1
008304fa007d076e0092032900670143ffca01e4ffcd0329ffe602d70014
0378ffaf032900020378ffa80329ff3c042b00a50699001001c70084045e
0054070a002e06cb006004d6010c04fa005102d8006a04e9ffd80330006d
02d9006a02db006c01c7006902aa000d01c7005c02aa002001c7006902aa
000d01c7006f02aa0030053d00e60708003b031000e405d5009708c0008e
0473008f02e000eb04730040047300640473007e04730074047300850433
00d7045300490473008003cc011e03cc000903cc00090000000000000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
0000006800000068000000680000006800000068000000bc000000bc0000
014800000148000001480000019400000194000001940000019400000194
000001940000019400000194000001f4000001f4000001f4000001f40000
01f4000001f4000001f4000001f4000001f4000001f4000001f4000001f4
000001f4000001f4000001f4000001f4000001f4000001f4000001f40000
01f4000001f4000001f4000001f4000001f4000001f4000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80000
02a8000002a8000002a8000002a8000002a8000002a8000002a8000002a8
000002a8000002a8000002a8000002a8000002a8000002a8000002a80001
00000869006f0009006a0007000200100010005d000007e80a1d00040001
0000001e016e000100000000000000500008000100000000000100090058
000100000000000200070061000100000000000300270068000100000000
00040011008f0001000000000005000800000001000000000006001100a0
0001000000000007003200b10001000000000012001100e3000100000000
0100000900f40001000000000101001000fd0001000000000102000e010d
00010000000001030014011b00010000000001040012012f000300010404
0002000401410003000104060002000c01450003000104070002000c0151
0003000104090002000e015d00030001040b00020010016b00030001040c
00020010017b0003000104100002000e018b0003000104110002000a0199
0003000104120002000801a30003000104130002000e01ab000300010414
0002000c01b90003000104160002000e01c50003000104190002001201d3
00030001041d0002000c01e50003000108040002000401f1000300010c0a
0002000e01f5362e316431386531a920313939302d32303036204170706c
6520436f6d707574657220496e632e20a92031393831204c696e6f747970
6520414720a920313939302d3931205479706520536f6c7574696f6e7320
496e632e48656c7665746963614f626c6971756548656c76657469636120
4f626c697175653b20362e3164313865313b20323030392d30362d323948
656c766574696361204f626c6971756548656c7665746963612d4f626c69
71756548656c766574696361206973206120726567697374657265642074
726164656d61726b206f66204c696e6f7479706520414748656c76657469
6361204f626c697175654c6967617475726573436f6d6d6f6e204c696761
74757265734e756d6265722053706163696e6750726f706f7274696f6e61
6c204e756d626572734d6f6e6f737061636564204e756d62657273659c9a
d4004b00750072007300690076004b00750072007300690076004f006200
6c0069007100750065004b00750072007300690069007600690049007400
61006c00690071007500650043006f0072007300690076006f30a430bf30
ea30c330afc774d0e4b9adccb40043007500720073006900650066004b00
7500720073006900760049007400e1006c00690063006f041a0443044004
4104380432043d044b0439004b00750072007300690076659c4f53004300
7500720073006900760061000000b800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[681 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 104 36 <0002001e0000053d05bd0002000a001bb800532b00b800032fb800052fb8
00092fba0000000700562b30310103090133132303210323040d55fe8901
3ee1ddda38fdbbfccc025a0289fd770363fa4301b8fe4800>ITAQMX+Helvetica-Oblique AddT42Char 
1 188 38 <0001009effda065405e5001d001fb800532b00ba000a001300562bba001b
000400562bb8001b10b80001dc303101232e012322000302123332373637
330607062120272613123736212012063dc203a2b2d9feb54337adefdc97
4f3dc24bb3d8fed7ff008db95b45d8ea01470117f604048ea6fecffec5fe
fefebfa95991e89dbd9bcd01ac0145d0e2feda00>ITAQMX+Helvetica-Oblique AddT42Char 
1 328 41 <000100af000005e205bd0009001bb800532b00b800082fba000100020056
2bba0005000600562b30310121072103210721032301e703fb27fccc5e02
d126fd2f8dc705bdb4fe42affd640000>ITAQMX+Helvetica-Oblique AddT42Char 
1 404 49 <0001009c0000066205bd0009002bb800532b00b800002fb800032fb80005
2fb800082fba000200050000111239ba0007000500001112393031013301
1333012301032301d4eb01e9fdbdfec8dffe0bfcbe05bdfb5a04a6fa4304
a5fb5b000000>ITAQMX+Helvetica-Oblique AddT42Char 
1 500 74 <0002002cfe3b04c90442001f002d001fb800532b00ba0011000900562bba
001e002000562bba0027001800562b303101161737330306070621222637
3306171633323736370e0123222613120033320722070607061633323736
37362603b42c261da6cf2b559ffec9adcb15b7021f3083cf5f382c47a97d
aed13d390147ba7e7fbe6b3a20276b7cc274411c2b7c0404234387fc32cc
76da9ba548273c9256dd5250f7011d010d012e9fb25f9ab5bdaf6384c7c0
>ITAQMX+Helvetica-Oblique AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>ITAQMX+Helvetica-Oblique AddT42Char 
ITAQMX+Helvetica-Oblique /CharStrings get begin
/A 36 def
/C 38 def
/F 41 def
/N 49 def
/g 74 def
end
ITAQMX+Helvetica-Oblique /Encoding get
dup 65 /A put
dup 67 /C put
dup 70 /F put
dup 78 /N put
dup 103 /g put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAG+Helvetica-Oblique /ITAQMX+Helvetica-Oblique findfont ct_VMDictPut/MOQTAG+Helvetica-Oblique*1 [65{/.notdef}rp /A /.notdef /C 2{/.notdef}rp /F 7{/.notdef}rp /N 24{/.notdef}rp /g 152{/.notdef}rp]MOQTAG+Helvetica-Oblique nfMOQTAG+Helvetica-Oblique*1 [16 0 0 -16 0 0 ]msf592.8 155.673 mo(N)shMOQTAG+Helvetica-Oblique*1 [14 0 0 -14 0 0 ]msf604.352 157.673 mo(gg)[7.784 0 ]xshMOQTAF+Helvetica*1 [14 0 0 -14 0 0 ]msf619.92 157.673 mo( )shMOQTAF+Helvetica*1 [20.75 0 0 -20.75 0 0 ]msf145.984 515.106 mo(0123)[81.423 81.423 81.423 0 ]xsh467.236 515.106 mo(456)[81.423 81.423 0 ]xshMOQTAG+Helvetica-Oblique*1 [31.25 0 0 -31.25 0 0 ]msf372.789 545.614 mo(C)shMOQTAG+Helvetica-Oblique*1 [21.75 0 0 -21.75 0 0 ]msf395.352 556.09 mo(A)shMOQTAF+Helvetica*1 [16 0 0 -16 0 0 ]msf218.696 475.681 mo(U\(1\))[11.552 5.32788 8.896 0 ]xsh161.576 402.417 mo(U\(1\))[11.552 5.32788 8.896 0 ]xshMOQTAF+Helvetica*1 [14 0 0 -14 0 0 ]msf191.956 396.181 mo(3)shMOQTAF+Helvetica*1 [16 0 0 -16 0 0 ]msf184.339 298.174 mo(ALEPH 4-jet)[10.6721 8.896 10.6721 10.6721 11.552 4.448 8.896 5.32788 3.552 8.896 0 ]xshMOQTAF+Helvetica*1 [20.75 0 0 -20.75 0 0 ]msf127.547 492.848 mo(0)sh111.984 400.116 mo(0.5)[11.537 5.76849 0 ]xsh127.547 307.364 mo(1)sh111.984 214.86 mo(1.5)[11.537 5.76849 0 ]xsh127.547 122.129 mo(2)sh111.984 29.376 mo(2.5)[11.537 5.76849 0 ]xshMOQTAG+Helvetica-Oblique*1 [31.25 0 0 -31.25 0 0 ]msf86 255.356 mo(C)shMOQTAG+Helvetica-Oblique*1 [21.75 0 0 -21.75 0 0 ]msf108.555 265.84 mo(F)shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/MOQTAF+Helvetica*1 uf/MOQTAF+Helvetica uf/NZPPMX+Helvetica uf/MOQTAG+Helvetica-Oblique*1 uf/MOQTAG+Helvetica-Oblique uf/ITAQMX+Helvetica-Oblique ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
