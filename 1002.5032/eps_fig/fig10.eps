%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: qcd_ms_high-rev.pdf
%%Creator: Adobe Acrobat 8.0
%%For: chrisquigg
%%CreationDate: 5/17/10, 11:55:55
%%BoundingBox: 0 0 584 525
%%HiResBoundingBox: 0 0 583.3200 524.6837
%%CropBox: 0 0 583.3200 524.6837
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2010-02-23T16:33:59-06:00"
   xap:ModifyDate="2010-02-23T16:35:48-06:00"
   xap:MetadataDate="2010-02-23T16:35:48-06:00"
   xapMM:DocumentID="uuid:9A759C1A2522DF11B01EB8802D6513C8"
   xapMM:InstanceID="uuid:6a35852d-4f92-0840-be08-10186a50317a"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">qcd_ms_high</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="256"
      xapGImg:height="232"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7B+c83mrQfKWreaNF8z3&#xA;9hNai2EGnJDpstqPUnihY/vrSWc1Dlt5evttirNdD0fUNNWYXmuXutGUqUa+SyQx8a1CfU7a0HxV&#xA;35V6bUxVNMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirDPzi8vax5i/LjV9H0e3+tajdfV/Qg5pHy9O6ikb4pGRBREJ3OKszxVinkTz1aearrzND&#xA;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"/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom
    stRef:instanceID="uuid:99759C1A2522DF11B01EB8802D6513C8"
    stRef:documentID="uuid:93759C1A2522DF11B01EB8802D6513C8"/>
   <xapTPg:MaxPageSize
    stDim:w="792.000000"
    stDim:h="612.000000"
    stDim:unit="Points"/>
   <xapTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Symbol"
      stFnt:fontFamily="Symbol"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d7e3"
      stFnt:composite="False"
      stFnt:fontFileName="Symbol.ttf"/>
     <rdf:li
      stFnt:fontName="Helvetica"
      stFnt:fontFamily="Helvetica"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.1d18e1"
      stFnt:composite="False"
      stFnt:fontFileName="Helvetica.dfont"/>
    </rdf:Bag>
   </xapTPg:Fonts>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xapG:groupName="Default Swatch Group"
      xapG:groupType="0"/>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -524.684 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52587e-05 0 mo
1.52587e-05 524.684 li
583.32 524.684 li
583.32 0 li
cp
clp
[1 0 0 1 -104.167 0 ]ct
397.5 456.818 mo
685.5 456.818 li
685.5 285.818 li
582 303.818 li
510 312.818 li
451.5 330.818 li
424.5 339.818 li
379.5 366.818 li
388.5 384.818 li
397.5 425.318 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 0.922 0.502 rgb
f
2.7 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
240 222.819 mo
335.207 261.421 397.5 353.897 397.5 456.632 cv
397.5 456.819 li
1 0 0 rgb
@
244.54 222.838 mo
244.54 225.322 242.524 227.338 240.04 227.338 cv
237.556 227.338 235.54 225.322 235.54 222.838 cv
235.54 220.354 237.556 218.338 240.04 218.338 cv
242.524 218.338 244.54 220.354 244.54 222.838 cv
ef
0.9 lw
244.54 222.838 mo
244.54 225.322 242.524 227.338 240.04 227.338 cv
237.556 227.338 235.54 225.322 235.54 222.838 cv
235.54 220.354 237.556 218.338 240.04 218.338 cv
242.524 218.338 244.54 220.354 244.54 222.838 cv
cp
@
293.98 389.279 mo
293.98 391.762 291.964 393.779 289.48 393.779 cv
286.996 393.779 284.98 391.762 284.98 389.279 cv
284.98 386.794 286.996 384.779 289.48 384.779 cv
291.964 384.779 293.98 386.794 293.98 389.279 cv
/1 
[/DeviceGray] /CSA add_res
0 gry
ef
293.98 389.279 mo
293.98 391.762 291.964 393.779 289.48 393.779 cv
286.996 393.779 284.98 391.762 284.98 389.279 cv
284.98 386.794 286.996 384.779 289.48 384.779 cv
291.964 384.779 293.98 386.794 293.98 389.279 cv
cp
0 0 0 rgb
@
2.7 lw
2 lj
307.5 438.818 mo
397.5 438.818 li
503.22 456.818 mo
503.22 456.699 li
503.22 456.338 li
503.28 455.798 li
503.28 454.959 li
503.34 453.879 li
503.4 452.558 li
503.52 451.119 li
503.64 449.558 li
503.76 447.939 li
503.88 446.379 li
504.06 444.818 li
504.24 443.259 li
504.42 441.818 li
504.66 440.318 li
504.9 438.879 li
505.14 437.439 li
505.5 435.939 li
505.8 434.439 li
506.22 432.818 li
506.52 431.619 li
506.88 430.359 li
507.24 429.099 li
507.6 427.718 li
508.02 426.279 li
508.44 424.838 li
508.98 423.279 li
509.46 421.658 li
510.06 420.039 li
510.66 418.298 li
511.32 416.558 li
511.98 414.699 li
512.7 412.898 li
513.48 410.978 li
514.26 409.058 li
515.1 407.138 li
515.94 405.218 li
516.84 403.298 li
517.8 401.379 li
518.76 399.459 li
519.72 397.539 li
520.68 395.679 li
521.7 393.818 li
522.78 391.959 li
523.86 390.158 li
524.94 388.359 li
526.08 386.558 li
527.22 384.818 li
528.18 383.379 li
529.2 381.879 li
530.28 380.439 li
531.36 378.939 li
532.5 377.439 li
533.7 375.939 li
534.96 374.379 li
536.22 372.818 li
537.6 371.259 li
538.98 369.638 li
540.48 368.078 li
541.98 366.459 li
543.54 364.779 li
545.16 363.158 li
546.84 361.539 li
548.52 359.859 li
550.32 358.238 li
552.12 356.619 li
553.92 354.998 li
555.84 353.379 li
557.7 351.818 li
559.62 350.259 li
561.6 348.699 li
563.58 347.199 li
565.56 345.699 li
567.6 344.259 li
569.58 342.879 li
571.62 341.498 li
573.66 340.119 li
575.76 338.859 li
577.8 337.539 li
579.9 336.279 li
582.06 335.019 li
584.22 333.818 li
586.02 332.859 li
587.82 331.898 li
589.68 330.879 li
591.6 329.918 li
593.52 328.959 li
595.56 327.998 li
597.6 327.039 li
599.76 326.078 li
602.04 325.058 li
604.38 324.039 li
606.84 323.019 li
609.36 321.939 li
612.06 320.859 li
614.82 319.718 li
617.76 318.578 li
620.82 317.379 li
623.939 316.179 li
627.24 314.918 li
630.6 313.658 li
634.14 312.338 li
637.68 311.019 li
641.34 309.699 li
645.06 308.318 li
648.72 306.998 li
652.439 305.679 li
656.04 304.359 li
659.58 303.099 li
663 301.898 li
666.18 300.759 li
669.18 299.738 li
671.939 298.779 li
674.34 297.879 li
676.5 297.158 li
678.3 296.498 li
679.8 296.019 li
681 295.599 li
681.9 295.298 li
682.5 295.058 li
682.92 294.939 li
683.1 294.879 li
683.22 294.818 li
379.5 366.818 mo
379.62 366.759 li
379.86 366.638 li
380.34 366.398 li
381.06 365.978 li
382.08 365.439 li
383.4 364.718 li
385.08 363.759 li
387.12 362.679 li
389.4 361.418 li
392.04 360.039 li
394.86 358.539 li
397.86 356.918 li
401.04 355.179 li
404.28 353.439 li
407.58 351.699 li
410.88 349.959 li
414.18 348.218 li
417.36 346.539 li
420.48 344.918 li
423.48 343.359 li
426.42 341.859 li
429.18 340.478 li
431.82 339.099 li
434.4 337.838 li
436.8 336.638 li
439.14 335.558 li
441.36 334.478 li
443.46 333.459 li
445.56 332.558 li
447.54 331.658 li
449.46 330.818 li
451.32 330.039 li
453.18 329.259 li
454.98 328.539 li
456.78 327.818 li
458.52 327.158 li
460.26 326.498 li
462.06 325.838 li
463.8 325.238 li
465.6 324.638 li
467.4 324.039 li
469.26 323.439 li
471.12 322.898 li
472.98 322.359 li
474.9 321.818 li
476.88 321.279 li
478.92 320.738 li
480.96 320.199 li
483 319.718 li
485.16 319.179 li
487.32 318.699 li
489.48 318.218 li
491.7 317.738 li
493.98 317.259 li
496.32 316.779 li
498.6 316.359 li
501 315.879 li
503.4 315.459 li
505.8 314.978 li
508.26 314.558 li
510.72 314.138 li
513.18 313.718 li
515.7 313.298 li
518.22 312.879 li
520.8 312.398 li
523.38 311.978 li
526.02 311.558 li
528.72 311.138 li
531.42 310.718 li
534.18 310.298 li
537 309.818 li
539.1 309.459 li
541.2 309.158 li
543.36 308.798 li
545.64 308.439 li
547.92 308.078 li
550.26 307.718 li
552.72 307.298 li
555.24 306.879 li
557.82 306.459 li
560.52 306.039 li
563.34 305.558 li
566.28 305.138 li
569.28 304.599 li
572.46 304.119 li
575.76 303.578 li
579.18 303.039 li
582.72 302.439 li
586.439 301.838 li
590.28 301.238 li
594.24 300.578 li
598.38 299.918 li
602.64 299.259 li
607.02 298.539 li
611.46 297.818 li
616.02 297.099 li
620.7 296.318 li
625.38 295.539 li
630.12 294.759 li
634.86 294.039 li
639.54 293.259 li
644.22 292.539 li
648.72 291.759 li
653.1 291.039 li
657.3 290.379 li
661.32 289.718 li
665.04 289.119 li
668.52 288.578 li
671.64 288.039 li
674.46 287.619 li
676.92 287.199 li
679.08 286.838 li
680.88 286.599 li
682.32 286.359 li
683.46 286.179 li
684.3 285.998 li
684.84 285.939 li
685.2 285.879 li
685.439 285.818 li
685.5 285.818 li
1 0 0 rgb
@
0 0 0 rgb
true set_gvm
%ADOBeginSubsetFont: CGFRMX+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /CGFRMX+Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c796666a282c300005b680000147068656164888895f500000eb80000
0036686865610a220f8100000ef000000024686d74785bcd114b00000f14
000021a46c6f636100a5c29c000030b8000021a86d61787010d30b0a0000
5260000000206e616d6562c29c08000052800000051870726570bc836e31
00005798000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d00000000010000000000001d4ae566
5f0f3cf500110800000000005f4d8f0000000000c621bcd6f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000086905120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c014f004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090000000000000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000a4000000a4000000a4000000a4000000a4000000a4000000a40000
00a4000000a4000000a4000000a4000000a4000000a4000000a4000000a4
000000a4000000a4000000a4000000a4000000a4000000a4000000a40000
00a4000000a4000000a4000000a4000000a4000000a4000000a4000000a4
000000a4000000a4000000a4000000a4000000a4000000a4000000a40000
00a4000000a4000001000000010000000100000001000000010000000100
000001000000010000000100000001000000010000000100000001000000
0294000002940000039800000470000006040000069c000007ec0000088c
000008e8000008e8000009c800000a0c00000b0400000bbc00000cac0000
0d9000000e7800000f04000010c400001164000012180000134400001344
000013440000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700000
147000001470000014700000147000001470000014700000147000001470
000014700000147000001470000014700000147000001470000014700001
00000869006f0009006b0007000200100010005d000007e80a1d00040001
0000002501c2000100000000000000500008000100000000000100090058
0001000000000002000700610001000000000003001f0068000100000000
000400090087000100000000000500080000000100000000000600090090
0001000000000007003200990001000000000012000900cb000100000000
0100000900d40001000000000101001000dd0001000000000102000e00ed
0001000000000103001400fb00010000000001040012010f000100000001
0007002f01210001000000020007003c015000010000000300070030018c
0001000000040007003a01bc0001000000050007003601f6000100000006
00070030022c0001000000070007003c025c000300010404000200060298
0003000104060002000e029e0003000104070002000c02ac000300010409
0002000e02b800030001040b0002001002c600030001040c0002000c02d6
0003000104100002001002e20003000104110002000a02f2000300010412
0002000602fc0003000104130002001003020003000104140002000c0312
0003000104160002000c031e0003000104190002000e032a00030001041d
0002000c0338000300010804000200060344000300010c0a0002000c034a
362e316431386531a920313939302d32303036204170706c6520436f6d70
7574657220496e632e20a92031393831204c696e6f7479706520414720a9
20313939302d3931205479706520536f6c7574696f6e7320496e632e4865
6c766574696361526567756c617248656c7665746963613b20362e316431
3865313b20323030392d30362d323948656c76657469636148656c766574
69636148656c766574696361206973206120726567697374657265642074
726164656d61726b206f66204c696e6f7479706520414748656c76657469
63614c6967617475726573436f6d6d6f6e204c69676174757265734e756d
6265722053706163696e6750726f706f7274696f6e616c204e756d626572
734d6f6e6f737061636564204e756d6265727348656c7665746963612065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414748656c766574696361206973742065696e2065696e676574
726167656e657320576172656e7a65696368656e20646572204c696e6f74
79706520414748656c766574696361208f20756e206d61726368696f2072
65676973747261746f206469204c696e6f7479706520414748656c766574
6963612069732065656e20676572656769737472656572642068616e6465
6c736d65726b2076616e204c696e6f7479706520414748656c7665746963
61208a722065747420726567697374726572617420766172756d8a726b65
20669a72204c696e6f7479706520414748656c7665746963612065732075
6e61206d617263612072656769737472616461206465204c696e6f747970
6520414748656c7665746963612065722065742072656769737472657265
7420766172656dbe726b652074696c68bf72656e6465204c696e6f747970
652041476a196e969ad4004f007200640069006e00e60072004e006f0072
006d0061006c0052006500670075006c00610072004e006f0072006d0061
0061006c0069004e006f0072006d0061006c005200650067006f006c0061
0072006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c
006900650072004e006f0072006d0061006c004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d0061006c5e3889c4
4f53004e006f0072006d0061006cb800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[5233 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> CGFRMX+Helvetica AddT42Char 
1 104 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>CGFRMX+Helvetica AddT42Char 
1 164 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>CGFRMX+Helvetica AddT42Char 
1 256 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>CGFRMX+Helvetica AddT42Char 
1 660 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>CGFRMX+Helvetica AddT42Char 
1 920 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>CGFRMX+Helvetica AddT42Char 
1 1136 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>CGFRMX+Helvetica AddT42Char 
1 1540 73 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>CGFRMX+Helvetica AddT42Char 
1 1692 74 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>CGFRMX+Helvetica AddT42Char 
1 2188 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>CGFRMX+Helvetica AddT42Char 
1 2280 78 <00010080000003f805bd000b00a740645902013a08011902010706170657
056705790678078705b903c903da030a05050608080709030284029402a4
020302391209090405060504066d12070708080705040305060908050204
030a00000403060a07060a061a0d09020a29000b190c0db22162b9011600
182b2b4ef43c4dfd3c3c194e10e618003f3c3c3f3c3f1112173901121739
874d2e2b087d10c104872e182b5d057d10c010083c083c3130015d00715d
7213331101330901230107112380ad01cee6fe6601b1e6feb297ad05bdfc
ab01c7fe6ffd62021c8afe6e0000>CGFRMX+Helvetica AddT42Char 
1 2504 79 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>CGFRMX+Helvetica AddT42Char 
1 2572 80 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>CGFRMX+Helvetica AddT42Char 
1 2820 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>CGFRMX+Helvetica AddT42Char 
1 3004 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>CGFRMX+Helvetica AddT42Char 
1 3244 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>CGFRMX+Helvetica AddT42Char 
1 3472 84 <0002003cfe5503ed0447000e0020007a4033381848185818a801a705a81c
0628081217030b1d20071306031d1a0b160e072e132e162915141a220e27
1d19212287217242182b2b4ef44ded4e10f63c4dfde4e4003f3fed3f3fed
11393931304379401c1b1f0c0d00020126021b0e26000c1f0e2600001c03
26000d1e0b26012b2b012b2b2b818181005d121716333237363534272623
2206150017161735331123110e0123220011101233f82745b2bc47272b49
b875a7018f5b322eabb52d9f77abfef2fdc9017e5ea7b061978b5d9fcbd4
023e43244695fa2602264855010c01120101014a0000>CGFRMX+Helvetica AddT42Char 
1 3704 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>CGFRMX+Helvetica AddT42Char 
1 3844 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>CGFRMX+Helvetica AddT42Char 
1 4452 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>CGFRMX+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>CGFRMX+Helvetica AddT42Char 
CGFRMX+Helvetica /CharStrings get begin
/space 3 def
/hyphen 16 def
/T 55 def
/a 68 def
/c 70 def
/d 71 def
/e 72 def
/f 73 def
/g 74 def
/i 76 def
/k 78 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/q 84 def
/r 85 def
/s 86 def
/u 88 def
end
CGFRMX+Helvetica /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 84 /T put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAP+Helvetica /CGFRMX+Helvetica findfont ct_VMDictPut/MOQTAP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 38{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /.notdef /i /.notdef /k /l /m /n /o /p /q /r /s /.notdef /u 138{/.notdef}rp]MOQTAP+Helvetica nfMOQTAP+Helvetica*1 [13.5239 29.002 29.002 -13.5239 0 0 ]msf311.992 361.317 mo(liquid)[3.00232 6.43845 3.00229 6.43845 7.51929 16.1251 7.51929 16.1251 3.00232 6.43845 0 0 ]xyshMOQTAP+Helvetica*1 [37.9998 0 0 -37.9998 0 0 ]msf107.5 32.716 mo(T)shMOQTAP+Helvetica*1 [32.0002 0 0 -32.0002 0 0 ]msf211.492 415.318 mo(gas)[17.7921 17.7921 0 ]xshMOQTAP+Helvetica*1 [31.9998 0 0 -31.9998 0 0 ]msf332.03 239.038 mo(quark-gluon plasma)[17.7919 17.7919 17.7919 10.6557 15.9999 10.6557 17.7919 7.10394 17.7919 17.7919 17.7919 8.89594 17.7919 7.104 17.7919 15.9999 26.6556 0 ]xshMOQTAP+Helvetica*1 [32.0002 0 0 -32.0002 0 0 ]msf148.992 487.818 mo(nuclear)[17.7921 17.7921 16.0001 7.10405 17.7921 17.7921 0 ]xsh144.48 515.306 mo(superfluid)[16.0001 17.7921 17.7921 17.7921 10.6558 8.89604 7.10405 17.7921 7.10403 0 ]xsh0 lj
307.5 470.318 mo
379.5 470.318 li
0 0 1 rgb
@
gsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
520.2 470.318 mo
511.2 467.618 li
524.4 467.618 li
524.4 473.018 li
511.2 473.018 li
cp
clp
[9 9 ] 0 dsh
379.5 470.318 mo
523.5 470.318 li
@
grestore
511.2 473.019 mo
520.2 470.318 li
511.2 467.619 li
cp
ef
1.8 lw
511.2 473.019 mo
520.2 470.318 li
511.2 467.619 li
511.2 473.019 li
cp
@
2.7 lw
2 lj
307.5 456.818 mo
307.5 456.638 li
307.5 456.218 li
307.5 455.498 li
307.44 454.599 li
307.44 453.519 li
307.38 452.379 li
307.32 451.238 li
307.26 450.158 li
307.2 449.078 li
307.08 448.058 li
307.02 447.039 li
306.9 445.959 li
306.78 444.818 li
306.66 443.978 li
306.54 443.078 li
306.36 442.119 li
306.24 441.099 li
306.06 440.019 li
305.88 438.879 li
305.7 437.679 li
305.46 436.418 li
305.22 435.158 li
304.92 433.779 li
304.68 432.398 li
304.38 431.019 li
304.02 429.638 li
303.72 428.259 li
303.36 426.818 li
303 425.439 li
302.64 424.119 li
302.28 422.738 li
301.92 421.418 li
301.5 420.099 li
301.14 418.838 li
300.72 417.578 li
300.3 416.318 li
299.82 414.998 li
299.28 413.558 li
298.74 412.058 li
298.14 410.498 li
297.48 408.759 li
296.76 406.898 li
295.98 404.978 li
295.14 402.939 li
294.24 400.779 li
293.4 398.679 li
292.56 396.638 li
291.78 394.718 li
291.06 393.039 li
290.46 391.658 li
290.04 390.578 li
289.74 389.918 li
289.56 389.498 li
289.5 389.318 li
0 0 0 rgb
@
gsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
158.04 259.358 mo
159.72 232.898 li
163.741 254.858 li
170.46 233.618 li
168.78 260.018 li
cp
clp
172.5 119.318 mo
163.5 258.818 li
0 0.69 0 rgb
@
grestore
1.8 lw
0 lj
159.72 232.898 mo
163.74 254.858 li
170.46 233.618 li
0 0.69 0 rgb
@
gsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
207.84 247.657 mo
207.72 269.978 li
218.34 250.358 li
211.68 276.038 li
201.24 273.337 li
cp
clp
2.7 lw
2 lj
240 154.118 mo
239.94 154.238 li
239.88 154.478 li
239.76 155.018 li
239.52 155.738 li
239.16 156.818 li
238.8 158.198 li
238.26 159.878 li
237.66 161.798 li
237.06 163.958 li
236.34 166.358 li
235.56 168.818 li
234.78 171.398 li
234 174.038 li
233.28 176.618 li
232.5 179.198 li
231.78 181.658 li
231.06 184.058 li
230.34 186.398 li
229.68 188.618 li
229.08 190.778 li
228.48 192.818 li
227.88 194.798 li
227.34 196.718 li
226.8 198.578 li
226.26 200.438 li
225.78 202.238 li
225.24 204.038 li
224.76 205.838 li
224.28 207.698 li
223.8 209.378 li
223.26 211.118 li
222.78 212.918 li
222.3 214.778 li
221.76 216.638 li
221.28 218.618 li
220.68 220.658 li
220.14 222.758 li
219.54 225.038 li
218.88 227.378 li
218.22 229.838 li
217.56 232.478 li
216.84 235.238 li
216.06 238.118 li
215.28 241.058 li
214.44 244.178 li
213.66 247.298 li
212.82 250.478 li
211.98 253.658 li
211.14 256.778 li
210.36 259.718 li
209.64 262.538 li
208.98 265.058 li
208.38 267.338 li
207.9 269.199 li
207.48 270.759 li
207.18 271.958 li
206.7 273.818 li
@
grestore
207.84 247.658 mo
207.72 269.978 li
218.34 250.358 li
@
true set_gvm
%ADOBeginSubsetFont: CGFRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CGFRMX+Helvetica gcheck setglobal} if
1 2028 75 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>CGFRMX+Helvetica AddT42Char 
1 4632 89 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>CGFRMX+Helvetica AddT42Char 
1 4932 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>CGFRMX+Helvetica AddT42Char 
CGFRMX+Helvetica /CharStrings get begin
/h 75 def
/v 89 def
/y 92 def
end
CGFRMX+Helvetica /Encoding get
dup 104 /h put
dup 118 /v put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 38{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /.notdef /u /v 2{/.notdef}rp /y 134{/.notdef}rp]MOQTAP+Helvetica nfMOQTAP+Helvetica*1 [25.9998 0 0 -25.9998 0 0 ]msf172.5 110.318 mo(heavy-ion)[14.4559 14.4559 14.4559 12.9999 12.9999 8.65773 5.77197 14.4559 0 ]xsh185.994 133.405 mo(collider)[12.9999 14.4559 5.77196 5.77196 5.77197 14.4559 14.4559 0 ]xsh0 0 1 rgb
true set_gvm
%ADOBeginSubsetFont: CGFRMX+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CGFRMX+Helvetica gcheck setglobal} if
1 4292 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>CGFRMX+Helvetica AddT42Char 
CGFRMX+Helvetica /CharStrings get begin
/t 87 def
end
CGFRMX+Helvetica /Encoding get
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAP+Helvetica*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 38{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]MOQTAP+Helvetica nfMOQTAP+Helvetica*1 [25.9998 0 0 -25.9998 0 0 ]msf335.987 497.299 mo(neutron star)[14.4559 14.4559 14.4559 7.22794 8.65775 14.4559 14.4559 7.22794 12.9999 7.22794 14.4559 0 ]xsh0 0 0 rgb
MOQTAP+Helvetica*1 [31.9998 0 0 -31.9998 0 0 ]msf187.5 317.521 mo(hadronic)[17.7919 17.7919 17.7919 10.6557 17.7919 17.7919 7.10394 0 ]xshgsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
341.58 447.878 mo
327.06 444.698 li
344.28 444.157 li
344.46 451.359 li
327.24 451.897 li
cp
clp
2 lj
262.5 474.818 mo
262.62 474.699 li
262.86 474.338 li
263.28 473.738 li
264 472.898 li
264.9 471.757 li
265.98 470.379 li
267.24 468.818 li
268.68 467.199 li
270.12 465.519 li
271.62 463.838 li
273.12 462.218 li
274.62 460.718 li
276.12 459.338 li
277.56 458.138 li
279 456.998 li
280.38 455.978 li
281.82 455.078 li
283.26 454.298 li
284.76 453.578 li
286.38 452.918 li
288 452.318 li
289.26 451.898 li
290.58 451.539 li
291.96 451.179 li
293.4 450.879 li
294.96 450.578 li
296.58 450.338 li
298.38 450.039 li
300.24 449.798 li
302.22 449.619 li
304.38 449.379 li
306.72 449.199 li
309.18 449.019 li
311.76 448.898 li
314.52 448.718 li
317.34 448.599 li
320.28 448.478 li
323.22 448.359 li
326.16 448.238 li
329.1 448.179 li
331.8 448.058 li
334.38 447.998 li
336.66 447.939 li
338.64 447.939 li
340.26 447.879 li
341.52 447.879 li
343.5 447.818 li
@
grestore
327.24 451.898 mo
341.58 447.878 li
327.06 444.699 li
cp
0 gry
ef
0.9 lw
327.24 451.898 mo
341.58 447.878 li
327.06 444.699 li
327.24 451.898 li
cp
0 0 0 rgb
@
gsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
675.18 456.818 mo
646.38 449.618 li
681.9 449.618 li
681.9 464.018 li
646.38 464.018 li
cp
clp
3.6 lw
145.5 456.818 mo
681 456.818 li
@
grestore
646.38 464.019 mo
675.18 456.818 li
646.38 449.619 li
cp
0 gry
ef
2.7 lw
646.38 464.019 mo
675.18 456.818 li
646.38 449.619 li
646.38 464.019 li
cp
0 0 0 rgb
@
gsave
103 535.317 mo
689.001 535.317 li
689.001 2.31799 li
103 2.31799 li
cp
103 2.31799 mo
138.299 23.918 mo
152.7 23.918 li
152.7 59.438 li
145.5 30.638 li
138.299 59.438 li
cp
clp
3.6 lw
145.5 456.818 mo
145.5 24.8176 li
@
grestore
152.7 59.4382 mo
145.5 30.6382 li
138.3 59.4382 li
cp
0 gry
ef
152.7 59.4382 mo
145.5 30.6382 li
138.3 59.4382 li
152.7 59.4382 li
cp
0 0 0 rgb
@
true set_gvm
%ADOBeginSubsetFont: TKWPMX+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /TKWPMX+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74206e7d83040000012c000002166670676dc62bd4b60000034400000200
676c79666a6ab56f000019ac0000013068656164cf8bbaf2000005440000
0036686865610cca02960000057c00000024686d74788f92d202000005a0
0000031c6c6f6361311a313c000008bc000001906d61787008d608cd0000
0a4c000000206e616d6518d6208c00000a6c0000072e7072657016a939d3
0000119c0000081067646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
00ee00cd003b00870289003f005600c1005e01ec00b20193008b012d0089
00ee003b00ae00b200c700b20037002d006003a600c100fc00d300b800d3
025c00cb00c100660031021900c1004e005400b2009c0202021d007500c1
019600c1020e023f01ac009e029c017f00a0005a001f042700c100f40058
03b4006d003302a8005e046a02850700007302a2007501100073005e0242
024e0902009804f600370546005c00bc00b000a6036d02e7075e004401f8
0075006800dd00e1003502370062008d0262008900be01d301b601d701e3
025200cf01c301fc01cd05480548054805660000001700ee05c100b6021b
007100b60000001b003f030405480548054805480000001f0029004e0029
004e0066019305cb019e008b015000ee00ee0031009a0091004e009a0548
00b000310398002d036d003300e9004a004a00290398039800330583004a
00c3008f005205d3005a019c0075067d00600398039803b601b200330398
058301c70398039803980000001201e5061d003904210227065e008700e9
05b0023d02d70077008302f6058301b400df058d02a600750112059c0283
0162005e0242024e004e0552008b058d001404f60021058d005c002d001f
05f4005201ba022d001003a601aa0075006800dd00e105c902e7020c0646
006405ec01ee01f8062f062501b205f80200008301c10635003d01fc0633
01be0639060e00680083006200be7b857fff00820030002a000040070605
04030201002c2010b002254964b040515820c859212d2cb002254964b040
515820c859212d2c20100720b00050b00d7920b8ffff5058041b0559b005
1cb0032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051c
b0032508e12d2c4b505820b80107454459212d2cb002254560442d2c4b53
58b00225b0022545445921212d2c45442db800072c4bb800065058b10101
8e59b801ff85b800441db9000600035f5e2db800082c2020456944b00160
2db800092cb800082a212db8000a2c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db8000b2c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b8000c2c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db8000d2c2020456944b001602020457d691844b00160
2db8000e2cb8000d2a2db8000f2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800102c4b535845441b2121592d0001
00000001000035635fed5f0f3cf50111080000000000a1cd888000000000
c62fe93dfeaafd9c08c0069e00000006000100000000000000010000059c
fd9c00000856feaafbdc08810001000000000000000000000000000000c7
04cd00660000000000fa00000200000002aa00dd0400fffa06aa00810639
006002aa005e02aa00600464005a02000058020000890239fff20400003b
040000a00400003d0400003b040000330400002b04000054040000390400
00520400004c023900a002390079046400600464005804640060038d007d
02aa005402aa00540400ffee03d7009e019a00a003d7009e0333007903ae
00ae0464005c05b4006d0464005a0464005804640058049c009603f4007f
05b4004a0696003d046400230231ff480625006605b400d50464ffe30400
ffec0464001f04e5002b080000d90464005803f400060156feaa06520071
046400580464006d0464005804d3011d07e5007307e5007304d3011d0856
00ac05b400370625009806250098057d0252057d008f05c7fff605560031
04d3003504e3002904e3002905c7002b05ee005802aa003905c7003f057d
001d071d003f05c700270529007105c700560625002f0473002f04bc0012
04e300210585001b061b004605c70019065c0002050c004604640089034a
000203f4004803f4002704d30012042b005e02a2009c0464000e04640023
042b000003f20021046400420464007d04d30048038300540383ffcf049c
fff8042b003304640014057dfff8057d00460200008901fa0083034a0093
0606007306060021060600cd0606008105b400c90400049c038300140625
0025062500250464005805b4003705b4003705b4003705b4003705b40037
04d300b207e5004407e5004404d300b20856007d0544004a05b4003704d3
00a604d300a40625008d06e7014c06960050057d025206960127031200be
031200be031200810312008105b400480464004a0400009102a2003502a2
0035050c001205b4fff604d3003d0383006d05b400310312008d0312008d
031200250312002507e5013f03f401b603f4005a03f401b603f401b603f4
006603f401b603f4006604f6ffec04d3022d0800ff7f0312008d031200be
031201fc031201cd0652006206520062071f01350652004806520048064a
00c1057d005e065c003d0464001f0544007d05f4ffb20200fff202007fff
02007fff02007fff02007fff02007fff0000002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800980098
009800980098009800980098009800980098009800980098009800010000
00c7007a0004000000000002001000400011000007e80810000100010000
003f02fa00010000000000000036000900010000000000010006003f0001
000000000002000700450001000000000003001b004c0001000000000004
0006006700010000000000050007006d0001000000000006000600740001
0000000001000018007a0001000000000101000c00920001000000000102
000c009e0001000000000103000900aa0001000000000104001000b30001
000000000105000c00c30001000000000106000e00cf0001000000000107
000900000001000000000108001500dd0001000000000109001500f20001
0000000101080015010700010000000101090015011c0001000000020108
0013013100010000000201090016014400010000000301080015015a0001
0000000301090015016f0001000000040108001101840001000000040109
001201950001000000050108001201a70001000000050109001101b90001
000000060108001901ca0001000000060109001401e30001000000070108
001001f700010000000701090014020700010000000801080017021b0001
000000080109001302320001000000090108001302450001000000090109
0013025800010000000d01080015026b00010000000d0109001502800001
0001000b01080012029500010001000b0109000802a70001000200130108
000a02af0001000200130109000802b90001000300170108000c02c10001
000300170109000902cd00010004000c0000004602d600010004001f0000
0046031c0001001900210108000c036200010019002101090008036e0003
000104040002000603760003000104060002000e037c0003000104070002
000c038a0003000104090002000e039600030001040b0002001003a40003
0001040c0002000c03b40003000104100002001003c00003000104110002
000a03d00003000104120002000603da0003000104130002001003e00003
000104140002000c03f00003000104160002000c03fc0003000104190002
000e040800030001041d0002000c04160003000108040002000604220003
00010c0a0002000c0428494e56495349424c45a920313939302d39392041
70706c6520436f6d707574657220496e632e20a920313939302d39312042
697473747265616d20496e632e53796d626f6c526567756c617253796d62
6f6c3b20362e31643765333b20323030392d30352d313253796d626f6c36
2e316437653353796d626f6c416c6c205479706f67726170686963204665
617475726573416c6c204665617475726573416c6c204665617475726573
494e56495349424c45496e697469616c204361706974616c73416c6c2043
61706974616c73416c6c204c6f7765722043617365556e69636f64652064
65636f6d706f736974696f6e43616e6f6e6963616c20636f6d706f736974
696f6e448e636f6d706f736974696f6e20556e69636f6465436f6d706f73
6974696f6e2063616e6f6e69717565496e20556e69636f6465207a65726c
6567656e616e65726b616e6e7465204b6f6d706f736974696f6e53636f6d
706f73697a696f6e6520756e69636f6465436f6d706f73697a696f6e6520
63616e6f6e696361556e69636f64652d73706c697473696e674b6c617373
69656b65207765657267617665556e69636f64652d7570706c9a736e696e
674b616e736c696b6f6d706f736974696f6e446573636f6d706f73696369
976e20646520556e69636f6465436f6d706f73696369976e2063616e976e
696361556e69636f64656f706cbf736e696e674b616e6f6e69736b206b6f
6d706f736974696f6e4465636f6d706f73698d8b6f20646520556e69636f
6465436f6d706f73698d8b6f204f72746f646f7861556e69636f64652d61
74736b696c6c656c73654b616e6f6e69736b206f707062796767696e6755
6e69636f6465206465636f6d706f736974696f6e4b616e6f6f6e696e656e
206b6f6b6f6f6e70616e6f95aa89f082b382ea82bd20556e69636f646590
b38b4b8d8790acb2cea440bd58a4c0b8d1bcd0b7c7b2d5a658556e69636f
646520bad0bcaeb1e2babb20b1b8bcba436f707972696768742031393930
2d3938204170706c6520436f6d707574657220496e632e20436f70797269
67687420313939302d39312042697473747265616d20496e632e436f7079
726967687420313939302d3938204170706c6520436f6d70757465722049
6e632e20436f7079726967687420313939302d3931204269747374726561
6d20496e632e556e69636f646520b7d6bde2b9e6b7b6c5c5d7d66a196e96
9ad4004f007200640069006e00e60072004e006f0072006d0061006c0052
006500670075006c00610072004e006f0072006d00610061006c0069004e
006f0072006d0061006c005200650067006f006c00610072006530ec30ae
30e530e930fcc77cbc18ccb40052006500670075006c006900650072004e
006f0072006d0061006c004e006f0072006d0061006c041e0431044b0447
043d044b0439004e006f0072006d0061006c5e3889c44f53004e006f0072
006d0061006c0000b800072b41ff0280010500fe0003010400fe00030103
007d0003010200fe0003010100fe0003010000fe000300ff00fe000300fe
00fe000300fd00fe000300fc00fe000300fb00fe000300fa00fe000300f8
00fe000300f700fe000300f600fe000300f500fe000300f400fe000300f3
00fe000300f200fe000300f100fe000300f000fe000300ef00fe000300ee
00fe000300ed00fe000300ec00fe000300eb0000000300ea00fe000300e9
00e80064000500e900fe000300e80064000300e700fe000300e600fe0003
00e500fe000300e400fe000300e300fe000300e200fe000300e100fe0003
00df00fe000300de00fe000300dc00fe000300db00fe000300da00fe0003
00d900fe000300d800fe000300d700fe000300d60084001d000500d60023
000300d200fe000300d20023000400d100fe000300d000fe000300d00023
000400cf00fe000300ce00fe000300cc00fe000300cb00c8000300ca00fe
000300c900fe000300c800fe000300c700fe000300c60064000300c500fe
000300c400fe000300c300fe000300c100fe000300bf00fe000300be00fe
000300bd00fe000300bc00fe000300bb00fe000300ba00b9004f000500ba
00fe000300baffd0000400b9004f000300b800b7000e000500b800160003
00b80080000400b700b60006000500b7000e000300b70040000400b60006
000300b50032000300b40082000341ff00b300a00033000500b3005c0003
00b30040000400b200fe000300b10064000300b000af00ba000500b000fe
000300af00ae0076000500af00ba000300af0080000400ae00a000330005
00ae0076000300ae0040000400ab004b000300aa00fe000300a900fe0003
00a800fe000300a70064000300a6003a000300a50064000300a400fe0003
00a3005c000300a20064000300a100a00033000500a1003f000300a10040
000400a000330003009f003a0003009e00410003009d00d20003009c00fe
0003009b004b0003009a00fe0003009900fe00030098007d000300970038
0003009600fe0003009500fe00030094003a00030093007d00030092007d
0003009100640003009000fe0003008f00fa0003008e003a0003008d007d
0003008c007d0003008b00c80003008a00fe0003008900fe000300880028
00030088fff00004008700fe0003008600fe000300850084001d00050085
003e00030084001d00030083008200330005008300fe00030083ffd00004
0082003300030081008000dc0005008100fe0003008100c000040080007f
008c0005008000dc0003008000800004007f007e003c0005007f008c0003
007f00400004007e003c0003007d00fe0003007c00fe0003007b007a003c
0005007b00fe0003007bffd00004007a003c0003007900fe0003007800fe
0003007700fe0003007600640003007541ff00fe00030073007200450005
007300fe00030073ffd000040072004500030071007000ba0005007100fe
00030070006f00760005007000ba0003007000800004006f006e00260005
006f00760003006f00400004006e00260003006b00fe0003006800fe0003
006700fe0003006500fe0003006300fe0003005f00fe0003005e00fe0003
005d00fe0003005c00fe0003005b005a00640005005b00fe0003005a0064
0003005900fe0003005800fe0003005700fe0003005600fe0003005500fe
0003005400fe00030053007d0003005200fe0003005000fe0003004f00fe
0003004e00fe0003004d00fe0003004c00fe0003004b00fe00030048ffe0
0004004700640003004600fe0003004400230004004300fe0003004200fe
0003004100fe0003004000260003003f00fe0003003e00fe0003003d00fe
0003003c00fe0003003b00fe0003003a00fe0003003900430003003800fe
0003003700fe0003003400fe0003003300fe0003003200fe000300310034
0003003000fe0003002f00fe0003002e00fe0003002d00fe0003002c0048
0003002b00fe0003002a00fe0003002900fe000300280027003a00050028
00fe00030027003a0003002600fe0003002500fe00030024000f00030023
001b0003002200960003002100fe0003002000550003001f003a0003001e
00fe0003001d003a0003001c003a0003001b417600640003001a00640003
001900480003001800fe0003001700fe0003001600fe0003001500fe0003
0015001000040014001100250005001400fe000300130012004b00050013
0096000300120011002500050012004b0003001100250003001000fe0003
001000100004000f00fa0003000e00fe0003000d00fe0003000c00fe0003
000b00fe0003000a00fe0003000900fe0003000800fe0003000700350003
000600ce0003000500fe0003000400fe0003000300fe00030002001d0003
0002001000040001006400030060001b0060001d0080000d0090000d00a0
000d00b0000d00c0000d00070001014c858d01732b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b1d00>
[305 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 43 <00010096fe540477039800330057402e0031061a04070f092003100c03a7
101d177332079828342e22312520221a11140f1a08060f14062c08002c25
313410d4c4ecd4ecd4c411123911123911123911123939310010c4e432f4
3cc4ec32111739121739300114163332123511331114163332363d01331e
01151406232226270e012322262706151412151406232226353436353402
3511330154394a769abd26282b2d2b010161586768012f9d785a76170283
2e282f290806bc013990630149fe010bfd605c5655531c081312727dafb1
b6aa6b68132781fec11d282e434c12c9524a010c3c01f6000000>TKWPMX+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>TKWPMX+Symbol AddT42Char 
TKWPMX+Symbol /CharStrings get begin
/mugreek 43 def
end
TKWPMX+Symbol /Encoding get
dup 109 /mugreek put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAQ+Symbol /TKWPMX+Symbol findfont ct_VMDictPut/MOQTAQ+Symbol*1 [109{/.notdef}rp /mugreek 146{/.notdef}rp]MOQTAQ+Symbol nfMOQTAQ+Symbol*1 [38.0002 0 0 -38.0002 0 0 ]msf663 491.716 mo(m)shMOQTAP+Helvetica*1 [27.7126 -15.9999 -15.9999 -27.7126 0 0 ]msf385.833 399.188 mo(    color)[7.7041 -4.44797 7.7041 -4.44797 7.7041 -4.44797 7.7041 -4.44797 13.8563 -7.99994 15.4082 -8.89597 6.15219 -3.55197 15.4082 -8.89594 0 0 ]xysh405.033 432.443 mo(superconductor)[13.8563 -7.99994 15.4082 -8.89594 15.4082 -8.89594 15.4082 -8.89597 9.22809 -5.32782 13.8563 -7.99997 15.4082 -8.89594 15.4082 -8.89594 15.4082 -8.89594 15.4082 -8.89594 13.8563 -7.99997 7.7041 -4.44797 15.4082 -8.89594 0 0 ]xyshMOQTAP+Helvetica*1 [30.07 -10.9446 -10.9446 -30.07 0 0 ]msf534.5 409.521 mo(color-flavor)[15.035 -5.47229 16.7189 -6.08521 6.67554 -2.42969 16.7189 -6.08521 10.0131 -3.64447 10.0131 -3.64447 8.35944 -3.0426 6.67554 -2.42969 16.7189 -6.08521 15.035 -5.47229 16.7189 -6.08521 0 0 ]xysh547.634 445.605 mo(    locking)[8.35944 -3.0426 8.3595 -3.0426 8.35944 -3.0426 8.35944 -3.0426 6.67554 -2.42969 16.7189 -6.08521 15.035 -5.47229 15.035 -5.47229 6.67554 -2.42972 16.7189 -6.08521 0 0 ]xyshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/MOQTAP+Helvetica*1 uf/MOQTAP+Helvetica uf/CGFRMX+Helvetica uf/MOQTAQ+Symbol*1 uf/MOQTAQ+Symbol uf/TKWPMX+Symbol ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
