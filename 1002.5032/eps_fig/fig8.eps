%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: D0jets.pdf
%%Creator: Adobe Acrobat 8.0
%%For: chrisquigg
%%CreationDate: 5/17/10, 11:50:6
%%BoundingBox: 0 0 567 544
%%HiResBoundingBox: 0 0 567 544
%%CropBox: 0 0 567 544
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3670 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 8.57"
   xap:ModifyDate="2010-01-29T19:12:08Z"
   xap:CreateDate="2010-01-29T19:12:08Z"
   xap:CreatorTool="ROOT Version 5.10/00"
   xapMM:DocumentID="be56b1f3-4526-11ea-0000-9db0ce94e0f7"
   xapMM:InstanceID="be56b1f3-4526-11ea-0000-9db0ce94e0f7"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">plots_round10/final_xsec.eps: final_xsec</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -544 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544 li
567 544 li
567 0 li
cp
clp
[1 0 0 1 0 0 ]ct
73.75 484.25 mo
555.5 484.25 li
555.5 10.75 li
73.75 10.75 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0.998047 0.998047 0.998047 rgb
ef
0.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
73.75 484.25 mo
555.5 484.25 li
555.5 10.7499 li
73.75 10.7499 li
cp
/1 
[/DeviceGray] /CSA add_res
0 gry
@
73.75 484.25 mo
555.5 484.25 li
555.5 10.75 li
73.75 10.75 li
cp
0.998047 0.998047 0.998047 rgb
ef
73.75 484.25 mo
555.5 484.25 li
555.5 10.7499 li
73.75 10.7499 li
cp
0 gry
@
73.75 484.25 mo
555.5 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966b937646800005b680003ac6068656164888895f500000eb80000
0036686865610a220f8100000ef000000024686d74785bcd114b00000f14
000021a46c6f63610e9bef90000030b8000021a86d61787010d30b0a0000
5260000000206e616d6562c29c08000052800000051870726570bc836e31
00005798000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d0000000001000000000000642c0b93
5f0f3cf500110800000000005f4d8f0000000000c621bcd6f865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000086905120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c014f004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090000000000000068
000000680000006800000068000000c8000001180000027c0000042c0000
05bc0000074c0000079000000820000008a400000994000009fc00000a60
00000a9c00000adc00000b2400000c0000000c4c00000d6400000ebc0000
0f5800001080000011ac00001240000013a4000014d000001528000015a4
00001638000016880000172000001824000019d400001aec00001bf40000
1d1400001dd800001e6000001ec40000201400002084000020b400002138
0000222c0000227c00002394000024400000253c000025e80000275c0000
287000002a0800002a6400002af400002bb000002d4800002e4000002f04
00002f9c00002ff400003054000030b80000315000003178000031a40000
33380000340c00003510000035e80000377c000038140000396400003a04
00003a6000003ad400003bb400003bf800003cf000003da800003e980000
3f7c00004064000040f0000042b00000435000004404000045300000468c
000047000000482c000048cc000049ac000049f000004aec00004ba80000
4bc000004bd800004da000004db800004dd000004de800004e0000004e18
00004e3000004e4800004e6000004e7800004e900000503c000050540000
506c000050840000509c000050b4000050cc000050e4000050fc00005114
0000512c000051440000515c000051740000518c000051a4000051bc0000
51d4000051ec00005248000052c00000548400005610000057dc00005868
000058dc000059f400005b9400005cf800005ddc00005e0c00005e700000
5f50000060340000621000006364000063ec0000648c0000653c0000665c
0000675c0000689400006960000069c000006a7000006af800006c540000
6d2800006e4800007070000072180000731000007374000073b800007468
000075a40000769c00007728000077d80000788c000078f8000078f80000
7910000079280000794000007a6c00007c4c00007c8400007cc000007d60
00007df000007e5000007eb000007f200000800800008020000080380000
80980000820400008274000082e4000083a800008458000084dc00008534
000085980000862c000088540000886c000088840000889c000088b40000
88cc000089180000898800008a0800008a5400008a6c00008a8400008b2c
00008b4400008b5c00008b7400008b8c00008bdc00008c2000008ca40000
8cd000008d2c00008d5c00008e6c00008f5000008f9800009064000090a4
00009174000092040000921c000092340000924c00009264000092c00000
93b000009518000095300000954800009600000096cc000096f4000097ac
000097f8000098b0000099a400009a9c00009bac00009d7800009e300000
9f9c0000a10c0000a1640000a3940000a5d00000a5e80000a6000000a618
0000a6300000a6f80000a7100000a7280000a7c00000a9840000a99c0000
a9b40000a9cc0000a9e40000a9fc0000aa140000aa2c0000ab640000ab7c
0000ab940000ac400000ad480000ad600000ad780000ad900000ada80000
adc00000add80000adf00000ae080000ae200000ae380000ae500000ae68
0000ae800000ae980000aeb00000af980000afb00000b0500000b0680000
b0ac0000b0c40000b1bc0000b1d40000b25c0000b2740000b28c0000b2a4
0000b2bc0000b2d40000b2ec0000b3040000b31c0000b3340000b3bc0000
b4380000b4500000b4680000b4800000b4980000b4b00000b4c80000b4e0
0000b4f80000b5100000b5280000b5400000b6c00000b8240000b83c0000
b8540000b86c0000b8840000b89c0000b8b40000b8cc0000b8e40000b8fc
0000b9140000b92c0000b9440000b95c0000b9740000b98c0000baa40000
babc0000bad40000baec0000bb040000bb1c0000bb340000bc000000bce8
0000bd000000bd180000bd300000bd480000bd600000bd780000bd900000
bda80000bdc00000bdd80000bdf00000be080000be200000be380000be54
0000be700000be8c0000bea80000c0100000c03c0000c06c0000c0b00000
c1340000c1600000c1c00000c1f00000c2540000c3640000c3ac0000c3ec
0000c4400000c51c0000c5e80000c6140000c7000000c7180000c7340000
c74c0000c7640000c77c0000c7940000c7ac0000c7c40000c7dc0000c7f4
0000c8700000c8e80000c9140000c9640000c9cc0000ca440000cafc0000
cbb40000cc780000cdfc0000cebc0000cee80000cf480000cf600000cf78
0000d0180000d0dc0000d1240000d17c0000d2700000d4000000d43c0000
d50c0000d56c0000d6180000d7700000d8000000d8c80000d9340000d9c8
0000da7c0000dafc0000dc4c0000dcb00000dd880000de7c0000dec40000
df400000e0e00000e14c0000e1d00000e2740000e2e80000e3940000e488
0000e5840000e66c0000e7440000e86c0000e9e00000eb640000ed2c0000
ee980000eed40000ef8c0000f0740000f1040000f2340000f2c40000f38c
0000f3f40000f47c0000f5300000f5b00000f6e80000f7480000f8940000
f9880000f9d00000fa3c0000fc840000fcec0000fd700000fe0c0000fe80
0000ff2c000100200001011c00010204000102c8000103e4000105240001
05c4000106d0000107280001078c000107bc0001080c0001089800010968
00010a2400010aa400010b2400010c5800010d8c00010eb000010fd40001
1058000111a80001124c00011334000113c0000114480001153000011674
0001177000011834000118ec00011960000119d400011a3c00011aa40001
1af800011b4c00011ba000011bf400011c4000011c7400011ce000011d54
00011d8000011dac00011dd800011e0800011e6c00011f7c00011fac0001
1fec000120300001208c000120ec000121700001219c000121c80001224c
00012278000122a4000122e4000124000001244000012494000124f40001
2588000125f4000125f4000126940001272c000127fc0001286c00012968
000129d800012a4800012b4400012c9000012ce400012d6c00012e0c0001
2eb000012ef800012f7000012ff4000130d8000131bc0001329c0001330c
0001341800013520000135f8000137180001387c000138dc00013a480001
3b4400013b9c00013c5400013d2400013e8c00013ebc00013f2000013f7c
0001402c000140e80001413c0001416c0001419c0001457c000145e00001
4610000146b80001471400014740000147c40001480c00014850000148b0
0001490c000149380001496800014994000149c0000149f4000149f40001
49f4000149f4000149f4000149f4000149f4000149f4000149f4000149f4
000149f4000149f4000149f4000149f4000149f4000149f4000149f40001
49f4000149f4000149f4000149f4000149f4000149f4000149f4000149f4
00014a3000014a9400014bbc00014be800014bfc00014c5400014cb40001
4ccc00014d2400014ddc00014f5c000150c800015120000151bc00015258
000152b000015430000154d80001552400015638000156dc000157940001
58900001592c00015a0800015a7c00015b2400015b6800015bc800015c08
00015c3400015c9c00015ce400015d2c00015d7800015dc400015e380001
5e6400015ea800015ed400015f0000015f1800015f2800015f4000015f50
00015f6800015f7800015f9000015fa400015fbc00015fcc00015fe40001
5ff40001600c0001602400016034000160440001605c0001607c00016094
000160a4000160bc000160dc000161040001611c0001612c000161440001
6164000161740001618400016194000161a4000161b4000161cc000161ec
00016204000162140001622c0001624c000162740001628c0001629c0001
62b4000162d4000162e4000162f400016304000163140001633400016354
000163740001638c000163a4000163bc000163d4000163ec000164040001
641c000164340001644c000164640001647c00016494000164ac000164c4
000164e40001650400016524000165440001656400016584000165a40001
65c4000165e40001660400016624000166440001665c000166740001668c
000166a4000166bc000166d4000166ec0001670400016724000167440001
675c000167740001678c000167a4000167bc000167d4000167ec0001680c
0001682c000168440001685c000168740001688c000168a4000168bc0001
68d4000168ec000169040001691c000169340001694c000169640001697c
00016994000169ac000169c4000169dc000169f400016a0c00016a240001
6a3c00016a5400016a6c00016a8400016a9c00016ab400016acc00016ae4
00016afc00016b1400016b2c00016b4400016b5c00016b7c00016b9c0001
6bbc00016bdc00016bf400016c0c00016c2c00016c4c00016c6400016c7c
00016c8c00016c9c00016cb400016ccc00016ce400016cfc00016d140001
6d2c00016d4400016d5c00016d7400016d8c00016da400016dbc00016dd4
00016dec00016e0400016e1c00016e3400016e4c00016e6400016e7c0001
6e9c00016ebc00016edc00016efc00016f1400016f2c00016f4400016f5c
00016f7c00016f9c00016fb400016fcc00016fe400016ffc000170140001
702c000170440001705c000170740001708c000170a4000170bc000170d4
000170ec000171040001711c0001713c0001715c000171740001718c0001
71a4000171bc000171d4000171ec000172040001721c0001723c0001725c
000172740001728c000172a4000172bc000172d4000172ec000173040001
731c000173340001734c000173640001737c00017394000173ac000173c4
000173dc000173f40001740c0001742c0001744c0001746c0001748c0001
74ac000174cc000174ec0001750c000175240001753c000175540001756c
000175840001759c000175b4000175cc000175ec0001760c000176240001
763c000176540001766c000176840001769c000176bc000176dc000176fc
0001771c0001773c0001775c000177740001778c000177a4000177bc0001
77d4000177ec000178040001781c000178340001784c000178640001787c
00017894000178ac000178cc000178ec0001790c0001792c000179440001
795c000179740001798c000179a4000179bc000179d4000179ec00017a04
00017a1c00017a3400017a4c00017a6400017a7c00017a9400017aac0001
7ac400017adc00017af400017b0c00017b2400017b3c00017b5400017b6c
00017b8400017b9c00017bb400017bcc00017be400017bfc00017c140001
7c2c00017c4400017c5c00017c7400017c9400017cb400017cd400017cf4
00017d1400017d3400017d5400017d7400017d9400017db400017dd40001
7df400017e1400017e3400017e5400017e7400017e9400017eb400017ed4
00017ef400017f0c00017f2400017f3c00017f5400017f6c00017f840001
7fa400017fc400017fe40001800400018024000180440001806400018084
000180a4000180c4000180dc000180f40001810c000181240001813c0001
81540001816c00018184000181a4000181c4000181e40001820400018224
000182440001826400018284000182a4000182c4000182dc000182f40001
830c000183240001833c000183540001836c000183840001839c000183b4
000183cc000183e4000183fc000184140001842c000184440001845c0001
84740001848c000184a4000184bc000184d4000184ec000185040001851c
000185340001854c000185640001857c00018594000185ac000185c40001
85e40001860400018624000186440001865c000186740001868c000186a4
000186bc000186d4000186ec000187040001871c000187340001874c0001
87640001877c00018794000187ac000187c4000187dc000187f40001880c
000188240001883c000188540001886c000188840001889c000188b40001
88cc000188e4000188fc000189140001892c000189440001895c00018974
0001898400018994000189ac000189c4000189dc000189f400018aac0001
8b0c00018c8c00018cc800018d0400018d6400018dac00018e2c00018fac
00018fdc000190440001908c00019140000191c400019218000193800001
93e4000194b80001951000019558000195b800019748000197b4000198f4
00019a5c00019ae400019b7c00019cc400019e8c00019f240001a09c0001
a1f00001a3080001a3a80001a4a40001a5140001a5800001a5fc0001a6fc
0001a7400001a8b80001a9f80001ab1c0001ac340001ad840001ae040001
ae840001b0100001b0dc0001b1900001b3280001b3d80001b4900001b4dc
0001b53c0001b5a00001b5fc0001b6580001b6b40001b6e00001b7100001
b76c0001b8040001b8a80001b9180001b9880001b9b40001b9e00001ba50
0001badc0001bb4c0001bbe00001bd700001bedc0001c03c0001c0980001
c0f40001c10c0001c1240001c13c0001c15c0001c17c0001c19c0001c1bc
0001c1dc0001c1f40001c20c0001c22c0001c24c0001c26c0001c28c0001
c2ac0001c2cc0001c2e40001c2fc0001c3140001c3340001c3540001c374
0001c3940001c3ac0001c3c40001c3e40001c4040001c41c0001c4340001
c44c0001c5080001c5f80001c6a00001c7340001c8400001c87c0001c958
0001ca540001cac80001cb400001cc7c0001cd380001ce240001ced40001
cf680001d0400001d0840001d0e80001d14c0001d3940001d43c0001d4a0
0001d5040001d5300001d55c0001d5740001d58c0001d5a40001d5bc0001
d5e80001d6800001d7100001d7840001d7f80001d8880001d9500001da98
0001dbd40001dcf80001de580001df3c0001e0540001e0c80001e2240001
e2e00001e39c0001e4dc0001e5b40001e66c0001e7ac0001e9980001ea98
0001ec080001ed540001edb80001ee180001eeb40001ef100001ef400001
ef6c0001ef9c0001efc80001eff80001f0200001f04c0001f0780001f0d8
0001f1740001f1b40001f1f40001f2900001f3740001f3e00001f4540001
f4d00001f5640001f5d80001f6500001f7340001f8180001f8580001f898
0001f8dc0001f9200001f94c0001f9b40001fa1c0001fa880001fbec0001
fc540001fc840001fcd00001fd6c0001fdb00001fdf40001fe340001fe74
0001ff8400020068000200b4000200f40002013400020184000201d40002
02380002029c0002031800020358000203c00002040c000204e00002051c
0002051c0002051c0002051c0002051c0002051c000205b0000206bc0002
0734000207980002082000020838000208e000020a1c00020ac000020b34
00020bac00020bac00020bac00020bac00020bac00020bac00020bac0002
0d5c00020e8400020f0800020ff0000211440002119400021378000214dc
000215440002156c000215ac000216600002170c000217b8000218e00002
1920000219cc00021b0400021b8800021c7000021dc400021e1400021ff4
00022158000221c0000221e800022228000222dc00022388000223ec0002
25080002254400022580000225dc0002265c0002285000022930000229a8
00022a8000022ad800022bb800022d5000022d9000022e0800022e200002
2e3000022f100002303c0002311c0002323c000232c40002340800023488
00023530000235c00002373c000237c800023878000239d000023b240002
3b7800023bd000023cfc00023d1400023d2c00023d4400023d5c00023d74
00023d8c00023da400023dbc00023dd400023dec00023e0400023e1c0002
3e3400023e4c00023e6400023e7c00023e9400023eac00023ec400023edc
00023ef400023f0c00023f2400023f3c00023f5400023f6c00023f840002
3f9c00023fb400023fcc00023fe400023ffc000240140002402c00024044
0002405c000240740002408c000240a4000240bc000240d4000240ec0002
41040002411c000241340002414c000241640002417c00024194000241ac
000241c4000241dc000241f40002420c000242240002423c000242540002
426c000242840002429c000242b4000242cc000242e4000242fc00024314
0002432c000243440002435c000243740002438c000243a4000243bc0002
43d4000243ec000244040002441c000244340002444c000244640002447c
00024494000244ac000244c4000244dc000244f40002450c000245240002
453c000245540002456c000245840002459c000245b4000245cc000245e4
000245fc000246140002462c000246440002465c000246740002468c0002
46a4000246bc000246d4000246ec000247040002471c000247340002474c
000247640002477c00024794000247ac000247cc000247ec0002480c0002
482c0002484c0002486c0002488c000248ac000248cc000248ec0002490c
0002492c0002494c0002496c0002498c000249ac000249cc000249ec0002
4a0c00024a2c00024a4c00024a6c00024a8c00024aac00024acc00024aec
00024b0c00024b2c00024b4c00024b6c00024b8c00024bac00024bcc0002
4bec00024c0c00024c2c00024c4c00024c6c00024c8c00024cac00024ccc
00024cec00024d0c00024d2c00024d4c00024d6c00024d8c00024dac0002
4dc400024ddc00024dfc00024e1400024e3400024e4c00024e6c00024e84
00024e9c00024eb400024ecc00024ee400024f0400024f1c00024f3c0002
4f5400024f7400024f8c00024fa400024fbc00024fd400024fec00025004
0002501c000250340002504c000250640002507c00025094000250ac0002
50c4000250dc000250f40002510c000251240002513c000251540002516c
000251840002519c000251b4000251cc000251e4000251fc000252140002
52340002524c0002526c00025284000252a4000252bc000252d4000252ec
000253040002531c000253340002534c000253640002537c000253940002
53ac000253c4000253dc000253f40002540c000254240002543c00025454
0002546c000254840002549c0002556c000255b80002560c000256c40002
5730000257480002576800025788000257a8000257c8000257e800025808
00025828000258480002586800025888000258a8000258c8000258e80002
590800025928000259480002596800025988000259a8000259c8000259e8
00025a0800025a2800025a4800025a6800025a8800025aa800025ac80002
5ae800025b0800025b2800025b4800025b6800025b8800025ba800025bc8
00025be800025c0800025c2800025c4800025c6800025c8800025ca80002
5cc800025ce800025d0800025d2800025d4800025d6800025d8800025da8
00025dc800025de000025df800025e1000025e2800025e4000025e580002
5e7000025e8800025ea000025eb800025ed000025ee800025f0000025f18
00025f3000025f4800025f6000025f7800025f9800025fb000025fc80002
5fe000025ff8000260100002602800026040000260580002607800026090
000260a8000260c0000260d8000260f00002610800026120000261380002
61580002617000026188000261a0000261b8000261d0000261e800026200
000262180002623800026250000262680002628000026298000262b00002
62c8000263f00002651c0002669c000266f4000267a8000268bc00026978
000269b000026a5000026a6800026b4c00026be800026de4000270140002
71ec00027408000276c4000278ac00027a1000027b3400027c5800027d58
00027e2000027f6000028014000280900002810c000281ec000282dc0002
838c0002843000028518000286300002872c0002898000028a6800028ab4
00028b0000028b9400028c3c00028cd000028d6800028dd000028e340002
8f0400028fd4000291c400029424000294b400029538000295c800029658
00029788000298ac000299100002997800029a0800029a9c00029b300002
9bdc00029c6000029cf000029d4c00029da800029e0000029e5800029f18
00029fd00002a0840002a1240002a1f00002a27c0002a3200002a3a40002
a43c0002a4bc0002a5b40002a6a40002a8340002a9c00002aa540002ab0c
0002aba80002ac4c0002ae240002af400002b05c0002b1e40002b3180002
b4640002b5b40002b6240002b68c0002b7300002b7e40002b8b40002b9e8
0002bb340002bbd80002bc7c0002bcac0002bd4c0002bde40002be2c0002
bea00002bfc40002c1040002c1800002c2280002c2780002c2e40002c34c
0002c4240002c5080002c5d00002c6ac0002c8000002c8b00002c9580002
c9ec0002ca2c0002ca8c0002cad40002cb200002cb4c0002cbd00002cc2c
0002cc940002ccd80002cd940002ce300002ceb00002cf0c0002cfa80002
d0800002d1000002d1800002d2200002d2f80002d38c0002d4240002d514
0002d6380002d7100002d7d80002d8980002da000002dae00002dbe80002
dcf00002ddc00002deb80002dfac0002e0dc0002e28c0002e37c0002e480
0002e5340002e5dc0002e6a00002e7a00002e7dc0002e8180002e8540002
e88c0002e8d80002e9140002e9580002e99c0002e9f00002ea440002ea9c
0002ead80002eb340002ebb40002ec6c0002ed240002ee700002eee40002
efc40002f1200002f2280002f2680002f3980002f4cc0002f5080002f5c4
0002f5fc0002f6340002f6ec0002f7a80002f7f00002f8b80002f9d40002
fa6c0002fb040002fb700002fb9c0002fbc80002fc700002fc980002fcdc
0002fd200002fd800002fdc80002fe480002fec80002ffc0000300100003
003c000300680003021800030388000304580003052c00030640000306ec
00030758000307d40003094c00030a3c00030a9800030ae800030b180003
0bac00030d4800030dac00030df800030ec800030f9c000310700003114c
00031334000314280003152c000316180003172c000318a0000318b80003
18d0000318e800031950000319ec00031a3000031aa800031b0c00031ba4
00031c8c00031ea4000320bc0003226400032290000322bc000322f00003
2324000323600003239c000323d800032414000324500003248c000324c8
00032504000325300003261800032664000327e0000328880003299c0003
2a0400032ab400032bdc00032d3400032e7800032fc8000331000003319c
000332a000033468000336f40003390800033a6c00033be000033c940003
3e680003401400034070000340d00003417400034230000342d400034390
0003443c000344fc000345a80003466800034728000347e4000348a00003
495c00034a1800034ad400034b8c00034c4400034cfc00034db800034df4
00034e4000034e8c00034ed800034f1400034fd000035020000350c80003
510c0003523c0003541000035468000355b0000356fc0003573800035774
000357b0000357ec000358400003589000035904000359d800035ab40003
5acc00035ae400035bbc00035c7c00035d3c00035ebc0003603400036148
00036350000364580003655400036600000366b0000367a8000368a80003
69cc00036a1c00036a8c00036b6400036c2800036d3c00036e0c00036e8c
00036f5c0003707c00037124000371c00003729400037364000373a80003
7568000376040003778400037858000379a000037ab400037b8400037c98
00037dbc00037e980003804c000381b000038280000382d0000383440003
83e000038424000385e4000386800003879800038868000389c000038a60
00038ab000038b2800038cd800038e3400038fc800039158000392b00003
9458000395580003963000039794000397f000039898000398f40003999c
000399fc00039aa800039b0400039ba800039d1800039d8000039ea00003
a0b40003a1240003a2580003a2a00003a38c0003a5240003a5ac0003a698
0003a7f00003a8440003aa300003ab9c0003abe00003ac1c0003ac600001
00000869006f0009006b0007000200100010005d000007e80a1d00040001
0000002501c2000100000000000000500008000100000000000100090058
0001000000000002000700610001000000000003001f0068000100000000
000400090087000100000000000500080000000100000000000600090090
0001000000000007003200990001000000000012000900cb000100000000
0100000900d40001000000000101001000dd0001000000000102000e00ed
0001000000000103001400fb00010000000001040012010f000100000001
0007002f01210001000000020007003c015000010000000300070030018c
0001000000040007003a01bc0001000000050007003601f6000100000006
00070030022c0001000000070007003c025c000300010404000200060298
0003000104060002000e029e0003000104070002000c02ac000300010409
0002000e02b800030001040b0002001002c600030001040c0002000c02d6
0003000104100002001002e20003000104110002000a02f2000300010412
0002000602fc0003000104130002001003020003000104140002000c0312
0003000104160002000c031e0003000104190002000e032a00030001041d
0002000c0338000300010804000200060344000300010c0a0002000c034a
362e316431386531a920313939302d32303036204170706c6520436f6d70
7574657220496e632e20a92031393831204c696e6f7479706520414720a9
20313939302d3931205479706520536f6c7574696f6e7320496e632e4865
6c766574696361526567756c617248656c7665746963613b20362e316431
3865313b20323030392d30362d323948656c76657469636148656c766574
69636148656c766574696361206973206120726567697374657265642074
726164656d61726b206f66204c696e6f7479706520414748656c76657469
63614c6967617475726573436f6d6d6f6e204c69676174757265734e756d
6265722053706163696e6750726f706f7274696f6e616c204e756d626572
734d6f6e6f737061636564204e756d6265727348656c7665746963612065
737420756e65206d617271756520648e706f738e65206465204c696e6f74
79706520414748656c766574696361206973742065696e2065696e676574
726167656e657320576172656e7a65696368656e20646572204c696e6f74
79706520414748656c766574696361208f20756e206d61726368696f2072
65676973747261746f206469204c696e6f7479706520414748656c766574
6963612069732065656e20676572656769737472656572642068616e6465
6c736d65726b2076616e204c696e6f7479706520414748656c7665746963
61208a722065747420726567697374726572617420766172756d8a726b65
20669a72204c696e6f7479706520414748656c7665746963612065732075
6e61206d617263612072656769737472616461206465204c696e6f747970
6520414748656c7665746963612065722065742072656769737472657265
7420766172656dbe726b652074696c68bf72656e6465204c696e6f747970
652041476a196e969ad4004f007200640069006e00e60072004e006f0072
006d0061006c0052006500670075006c00610072004e006f0072006d0061
0061006c0069004e006f0072006d0061006c005200650067006f006c0061
0072006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c
006900650072004e006f0072006d0061006c004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d0061006c5e3889c4
4f53004e006f0072006d0061006cb800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[16253 16293 16265 16345 16037 16369 16077 16041 16201 16093 16185 16325 16205
16145 13917 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica AddT42Char 
1 1936 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>Helvetica AddT42Char 
1 2080 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>Helvetica AddT42Char 
1 7876 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>Helvetica AddT42Char 
1 10760 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>Helvetica AddT42Char 
1 10996 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>Helvetica AddT42Char 
1 13800 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>Helvetica AddT42Char 
1 16024 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/G 42 def
/T 55 def
/V 57 def
/e 72 def
/p 83 def
end
Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 71 /G put
dup 84 /T put
dup 86 /V put
dup 101 /e put
dup 112 /p put
pop
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica /Helvetica findfont ct_VMDictPut/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 29{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf489 529.75 mo( \(GeV\))[6.34656 7.60196 17.7612 12.6931 15.2269 0 ]xshMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf479.5 542 mo(T)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf467 529.75 mo(p)sh92.25 477.25 mo
92.25 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2852 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
1 3928 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/zero 19 def
/five 24 def
end
Helvetica /Encoding get
dup 48 /zero put
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero 4{/.notdef}rp /five 17{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf79 507 mo(50)[12.6931 0 ]xsh124.25 477.25 mo
124.25 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4224 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/six 25 def
end
Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero 4{/.notdef}rp /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf111.25 507 mo(60)[12.6931 0 ]xsh151.25 477.25 mo
151.25 484.25 li
@
174.75 477.25 mo
174.75 484.25 li
@
195.5 477.25 mo
195.5 484.25 li
@
214 470.25 mo
214 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3072 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/one 20 def
end
Helvetica /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 3{/.notdef}rp /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf194.961 507 mo(100)[12.6931 12.6931 0 ]xsh335.5 477.25 mo
335.5 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3148 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/two 21 def
end
Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf315.75 507 mo(200)[12.6931 12.6931 0 ]xsh406.75 477.25 mo
406.75 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3428 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/three 22 def
end
Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /.notdef /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf387.25 507 mo(300)[12.6931 12.6931 0 ]xsh457.25 477.25 mo
457.25 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3772 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/four 23 def
end
Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 14{/.notdef}rp /e 10{/.notdef}rp /p 143{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf437.5 507 mo(400)[12.6931 12.6931 0 ]xsh496.5 477.25 mo
496.5 484.25 li
@
528.5 477.25 mo
528.5 484.25 li
@
555.5 477.25 mo
555.5 484.25 li
@
73.75 484.25 mo
73.75 10.7499 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2780 18 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>Helvetica AddT42Char 
1 13112 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>Helvetica AddT42Char 
1 13584 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>Helvetica AddT42Char 
2 1924 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/slash 18 def
/b 69 def
/d 71 def
/y 92 def
end
Helvetica /Encoding get
dup 47 /slash put
dup 98 /b put
dup 100 /d put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three /four /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 8{/.notdef}rp /y 134{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [0 -22.8293 -22.8293 0 0 0 ]msf22.75 133 mo(dy \(pb/GeV\))[-12.6931 -11.4146 -6.34656 -7.60199 -12.6931 -12.6931 -6.34653 -17.7612 -12.6931 -15.227 0 ]yshMOQTAH+Helvetica*1 [0 -15.2196 -15.2196 0 0 0 ]msf34.25 142.5 mo(T)shMOQTAH+Helvetica*1 [0 -22.8293 -22.8293 0 0 0 ]msf22.75 174 mo(/dp)[-6.34656 -12.6931 0 ]yshtrue set_gvm
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 115 /sigma putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/sigma <1C60D8A8C9B7C05447F5912FBA2452AF183FCDA4EABE4B48A1B8CA2DB2FE27B5CA05184337E6A14471F4E4784E68DE4BCCB0F4CBDF4CF56943F8EAC4BE9236E53E561465B455434CB9B524ED6F54658755443A22EF90736E45BBEF02E32C0C302E57A2C333DCAF88A033C44D239492CE07F8959B883BCC98EFFD299A778B9FD0B07ABB4FAB7AAA28829714962ABE342EDDC72A559B> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/MOQTAI+Symbol /Symbol findfont ct_VMDictPut/MOQTAI+Symbol*1 [115{/.notdef}rp /sigma 140{/.notdef}rp]MOQTAI+Symbol nfMOQTAI+Symbol*1 [0 -22.8293 -22.8293 0 0 0 ]msf22.75 187.25 mo(s)shMOQTAH+Helvetica*1 [0 -15.2196 -15.2196 0 0 0 ]msf12.25 195.75 mo(2)shMOQTAH+Helvetica*1 [0 -22.8293 -22.8293 0 0 0 ]msf22.75 207.25 mo(d)sh88.5 484.25 mo
73.75 484.25 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2656 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/hyphen 16 def
end
Helvetica /Encoding get
dup 45 /hyphen put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six 16{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 8{/.notdef}rp /y 134{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf55.25 486 mo(-6)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf30.5 497.5 mo(10)[12.6931 0 ]xsh81 473.5 mo
73.75 473.5 li
@
81 467.25 mo
73.75 467.25 li
@
81 462.75 mo
73.75 462.75 li
@
81 459.25 mo
73.75 459.25 li
@
81 456.5 mo
73.75 456.5 li
@
81 454 mo
73.75 454 li
@
81 452 mo
73.75 452 li
@
81 450.25 mo
73.75 450.25 li
@
88.5 448.5 mo
73.75 448.5 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf55.25 449.75 mo(-5)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf30.5 461.25 mo(10)[12.6931 0 ]xsh81 437.75 mo
73.75 437.75 li
@
81 431.5 mo
73.75 431.5 li
@
81 427.25 mo
73.75 427.25 li
@
81 423.75 mo
73.75 423.75 li
@
81 420.75 mo
73.75 420.75 li
@
81 418.5 mo
73.75 418.5 li
@
81 416.5 mo
73.75 416.5 li
@
81 414.5 mo
73.75 414.5 li
@
88.5 413 mo
73.75 413 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf55.25 415.5 mo(-4)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf30.5 426 mo(10)[12.6931 0 ]xsh81 402.25 mo
73.75 402.25 li
@
81 396 mo
73.75 396 li
@
81 391.5 mo
73.75 391.5 li
@
81 388 mo
73.75 388 li
@
81 385.25 mo
73.75 385.25 li
@
81 383 mo
73.75 383 li
@
81 380.75 mo
73.75 380.75 li
@
81 379 mo
73.75 379 li
@
88.5 377.5 mo
73.75 377.5 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf55.25 378.5 mo(-3)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf30.5 390 mo(10)[12.6931 0 ]xsh81 366.75 mo
73.75 366.75 li
@
81 360.5 mo
73.75 360.5 li
@
81 356 mo
73.75 356 li
@
81 352.5 mo
73.75 352.5 li
@
81 349.75 mo
73.75 349.75 li
@
81 347.25 mo
73.75 347.25 li
@
81 345.25 mo
73.75 345.25 li
@
81 343.5 mo
73.75 343.5 li
@
88.5 341.75 mo
73.75 341.75 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf55.25 344.25 mo(-2)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf30.5 354.75 mo(10)[12.6931 0 ]xsh81 331 mo
73.75 331 li
@
81 324.75 mo
73.75 324.75 li
@
81 320.25 mo
73.75 320.25 li
@
81 317 mo
73.75 317 li
@
81 314 mo
73.75 314 li
@
81 311.75 mo
73.75 311.75 li
@
81 309.75 mo
73.75 309.75 li
@
81 307.75 mo
73.75 307.75 li
@
88.5 306.25 mo
73.75 306.25 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf57 309 mo(-1)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf32.25 319.5 mo(10)[12.6931 0 ]xsh81 295.5 mo
73.75 295.5 li
@
81 289.25 mo
73.75 289.25 li
@
81 284.75 mo
73.75 284.75 li
@
81 281.25 mo
73.75 281.25 li
@
81 278.5 mo
73.75 278.5 li
@
81 276.25 mo
73.75 276.25 li
@
81 274 mo
73.75 274 li
@
81 272.25 mo
73.75 272.25 li
@
88.5 270.5 mo
73.75 270.5 li
@
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf56.057 280.25 mo(1)sh81 260 mo
73.75 260 li
@
81 253.75 mo
73.75 253.75 li
@
81 249.25 mo
73.75 249.25 li
@
81 245.75 mo
73.75 245.75 li
@
81 243 mo
73.75 243 li
@
81 240.5 mo
73.75 240.5 li
@
81 238.5 mo
73.75 238.5 li
@
81 236.75 mo
73.75 236.75 li
@
88.5 235 mo
73.75 235 li
@
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf43.3641 244.5 mo(10)[12.6931 0 ]xsh81 224.25 mo
73.75 224.25 li
@
81 218 mo
73.75 218 li
@
81 213.5 mo
73.75 213.5 li
@
81 210.25 mo
73.75 210.25 li
@
81 207.25 mo
73.75 207.25 li
@
81 205 mo
73.75 205 li
@
81 203 mo
73.75 203 li
@
81 201 mo
73.75 201 li
@
88.5 199.5 mo
73.75 199.5 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 201.5 mo(2)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 212 mo(10)[12.6931 0 ]xsh81 188.75 mo
73.75 188.75 li
@
81 182.5 mo
73.75 182.5 li
@
81 178 mo
73.75 178 li
@
81 174.5 mo
73.75 174.5 li
@
81 171.75 mo
73.75 171.75 li
@
81 169.25 mo
73.75 169.25 li
@
81 167.25 mo
73.75 167.25 li
@
81 165.5 mo
73.75 165.5 li
@
88.5 163.75 mo
73.75 163.75 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 165.5 mo(3)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 176.75 mo(10)[12.6931 0 ]xsh81 153.25 mo
73.75 153.25 li
@
81 146.75 mo
73.75 146.75 li
@
81 142.5 mo
73.75 142.5 li
@
81 139 mo
73.75 139 li
@
81 136.25 mo
73.75 136.25 li
@
81 133.75 mo
73.75 133.75 li
@
81 131.75 mo
73.75 131.75 li
@
81 130 mo
73.75 130 li
@
88.5 128.25 mo
73.75 128.25 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 130.25 mo(4)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 140.75 mo(10)[12.6931 0 ]xsh81 117.5 mo
73.75 117.5 li
@
81 111.25 mo
73.75 111.25 li
@
81 106.75 mo
73.75 106.75 li
@
81 103.5 mo
73.75 103.5 li
@
81 100.5 mo
73.75 100.5 li
@
81 98.25 mo
73.75 98.25 li
@
81 96 mo
73.75 96 li
@
81 94.25 mo
73.75 94.25 li
@
88.5 92.75 mo
73.75 92.75 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 94 mo(5)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 105.5 mo(10)[12.6931 0 ]xsh81 82 mo
73.75 82 li
@
81 75.75 mo
73.75 75.75 li
@
81 71.25 mo
73.75 71.25 li
@
81 67.75 mo
73.75 67.75 li
@
81 65 mo
73.75 65 li
@
81 62.5 mo
73.75 62.5 li
@
81 60.5 mo
73.75 60.5 li
@
81 58.75 mo
73.75 58.75 li
@
88.5 57 mo
73.75 57 li
@
MOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 59 mo(6)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 70.25 mo(10)[12.6931 0 ]xsh81 46.25 mo
73.75 46.25 li
@
81 40 mo
73.75 40 li
@
81 35.75 mo
73.75 35.75 li
@
81 32.25 mo
73.75 32.25 li
@
81 29.4999 mo
73.75 29.4999 li
@
81 26.9999 mo
73.75 26.9999 li
@
81 24.9999 mo
73.75 24.9999 li
@
81 22.9999 mo
73.75 22.9999 li
@
88.5 21.4999 mo
73.75 21.4999 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4524 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/seven 26 def
end
Helvetica /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven 15{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 8{/.notdef}rp /y 134{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf60 23.75 mo(7)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf35.25 34.25 mo(10)[12.6931 0 ]xsh81 10.7499 mo
73.75 10.7499 li
@
528.5 361.25 mo
528.5 358.765 526.485 356.75 524 356.75 cv
521.515 356.75 519.5 358.765 519.5 361.25 cv
519.5 363.735 521.515 365.75 524 365.75 cv
526.485 365.75 528.5 363.735 528.5 361.25 cv
ef
505.25 332 mo
505.25 329.515 503.235 327.5 500.75 327.5 cv
498.265 327.5 496.25 329.515 496.25 332 cv
496.25 334.485 498.265 336.5 500.75 336.5 cv
503.235 336.5 505.25 334.485 505.25 332 cv
ef
488.25 306.75 mo
488.25 304.265 486.235 302.25 483.75 302.25 cv
481.265 302.25 479.25 304.265 479.25 306.75 cv
479.25 309.235 481.265 311.25 483.75 311.25 cv
486.235 311.25 488.25 309.235 488.25 306.75 cv
ef
470.5 288.25 mo
470.5 285.765 468.485 283.75 466 283.75 cv
463.515 283.75 461.5 285.765 461.5 288.25 cv
461.5 290.735 463.515 292.75 466 292.75 cv
468.485 292.75 470.5 290.735 470.5 288.25 cv
ef
452 271.75 mo
452 269.265 449.985 267.25 447.5 267.25 cv
445.015 267.25 443 269.265 443 271.75 cv
443 274.235 445.015 276.25 447.5 276.25 cv
449.985 276.25 452 274.235 452 271.75 cv
ef
433.75 255.75 mo
433.75 253.265 431.735 251.25 429.25 251.25 cv
426.765 251.25 424.75 253.265 424.75 255.75 cv
424.75 258.235 426.765 260.25 429.25 260.25 cv
431.735 260.25 433.75 258.235 433.75 255.75 cv
ef
416.5 241.25 mo
416.5 238.765 414.485 236.75 412 236.75 cv
409.515 236.75 407.5 238.765 407.5 241.25 cv
407.5 243.735 409.515 245.75 412 245.75 cv
414.485 245.75 416.5 243.735 416.5 241.25 cv
ef
398.5 227.5 mo
398.5 225.015 396.485 223 394 223 cv
391.515 223 389.5 225.015 389.5 227.5 cv
389.5 229.985 391.515 232 394 232 cv
396.485 232 398.5 229.985 398.5 227.5 cv
ef
380.5 214.5 mo
380.5 212.015 378.485 210 376 210 cv
373.515 210 371.5 212.015 371.5 214.5 cv
371.5 216.985 373.515 219 376 219 cv
378.485 219 380.5 216.985 380.5 214.5 cv
ef
364.25 203.5 mo
364.25 201.015 362.235 199 359.75 199 cv
357.265 199 355.25 201.015 355.25 203.5 cv
355.25 205.985 357.265 208 359.75 208 cv
362.235 208 364.25 205.985 364.25 203.5 cv
ef
348.25 193 mo
348.25 190.515 346.235 188.5 343.75 188.5 cv
341.265 188.5 339.25 190.515 339.25 193 cv
339.25 195.485 341.265 197.5 343.75 197.5 cv
346.235 197.5 348.25 195.485 348.25 193 cv
ef
330.5 181.75 mo
330.5 179.265 328.485 177.25 326 177.25 cv
323.515 177.25 321.5 179.265 321.5 181.75 cv
321.5 184.235 323.515 186.25 326 186.25 cv
328.485 186.25 330.5 184.235 330.5 181.75 cv
ef
310.75 169.75 mo
310.75 167.265 308.735 165.25 306.25 165.25 cv
303.765 165.25 301.75 167.265 301.75 169.75 cv
301.75 172.235 303.765 174.25 306.25 174.25 cv
308.735 174.25 310.75 172.235 310.75 169.75 cv
ef
292 158.75 mo
292 156.265 289.985 154.25 287.5 154.25 cv
285.015 154.25 283 156.265 283 158.75 cv
283 161.235 285.015 163.25 287.5 163.25 cv
289.985 163.25 292 161.235 292 158.75 cv
ef
273.75 148.25 mo
273.75 145.765 271.735 143.75 269.25 143.75 cv
266.765 143.75 264.75 145.765 264.75 148.25 cv
264.75 150.735 266.765 152.75 269.25 152.75 cv
271.735 152.75 273.75 150.735 273.75 148.25 cv
ef
257.25 138.75 mo
257.25 136.265 255.235 134.25 252.75 134.25 cv
250.265 134.25 248.25 136.265 248.25 138.75 cv
248.25 141.235 250.265 143.25 252.75 143.25 cv
255.235 143.25 257.25 141.235 257.25 138.75 cv
ef
242.5 130.25 mo
242.5 127.765 240.485 125.75 238 125.75 cv
235.515 125.75 233.5 127.765 233.5 130.25 cv
233.5 132.735 235.515 134.75 238 134.75 cv
240.485 134.75 242.5 132.735 242.5 130.25 cv
ef
226.5 121.5 mo
226.5 119.015 224.485 117 222 117 cv
219.515 117 217.5 119.015 217.5 121.5 cv
217.5 123.985 219.515 126 222 126 cv
224.485 126 226.5 123.985 226.5 121.5 cv
ef
208.75 112 mo
208.75 109.515 206.735 107.5 204.25 107.5 cv
201.765 107.5 199.75 109.515 199.75 112 cv
199.75 114.485 201.765 116.5 204.25 116.5 cv
206.735 116.5 208.75 114.485 208.75 112 cv
ef
189.25 101.5 mo
189.25 99.015 187.235 97 184.75 97 cv
182.265 97 180.25 99.015 180.25 101.5 cv
180.25 103.985 182.265 106 184.75 106 cv
187.235 106 189.25 103.985 189.25 101.5 cv
ef
167 89.75 mo
167 87.265 164.985 85.25 162.5 85.25 cv
160.015 85.25 158 87.265 158 89.75 cv
158 92.235 160.015 94.25 162.5 94.25 cv
164.985 94.25 167 92.235 167 89.75 cv
ef
141.5 76.75 mo
141.5 74.265 139.485 72.25 137 72.25 cv
134.515 72.25 132.5 74.265 132.5 76.75 cv
132.5 79.235 134.515 81.25 137 81.25 cv
139.485 81.25 141.5 79.235 141.5 76.75 cv
ef
111.75 61.75 mo
111.75 59.265 109.735 57.25 107.25 57.25 cv
104.765 57.25 102.75 59.265 102.75 61.75 cv
102.75 64.235 104.765 66.25 107.25 66.25 cv
109.735 66.25 111.75 64.235 111.75 61.75 cv
ef
524 367 mo
524 369.25 li
@
521.25 369.25 mo
526.75 369.25 li
@
528.5 361.25 mo
528.5 358.765 526.485 356.75 524 356.75 cv
521.515 356.75 519.5 358.765 519.5 361.25 cv
519.5 363.735 521.515 365.75 524 365.75 cv
526.485 365.75 528.5 363.735 528.5 361.25 cv
ef
505.25 332 mo
505.25 329.515 503.235 327.5 500.75 327.5 cv
498.265 327.5 496.25 329.515 496.25 332 cv
496.25 334.485 498.265 336.5 500.75 336.5 cv
503.235 336.5 505.25 334.485 505.25 332 cv
ef
488.25 306.75 mo
488.25 304.265 486.235 302.25 483.75 302.25 cv
481.265 302.25 479.25 304.265 479.25 306.75 cv
479.25 309.235 481.265 311.25 483.75 311.25 cv
486.235 311.25 488.25 309.235 488.25 306.75 cv
ef
470.5 288.25 mo
470.5 285.765 468.485 283.75 466 283.75 cv
463.515 283.75 461.5 285.765 461.5 288.25 cv
461.5 290.735 463.515 292.75 466 292.75 cv
468.485 292.75 470.5 290.735 470.5 288.25 cv
ef
452 271.75 mo
452 269.265 449.985 267.25 447.5 267.25 cv
445.015 267.25 443 269.265 443 271.75 cv
443 274.235 445.015 276.25 447.5 276.25 cv
449.985 276.25 452 274.235 452 271.75 cv
ef
433.75 255.75 mo
433.75 253.265 431.735 251.25 429.25 251.25 cv
426.765 251.25 424.75 253.265 424.75 255.75 cv
424.75 258.235 426.765 260.25 429.25 260.25 cv
431.735 260.25 433.75 258.235 433.75 255.75 cv
ef
416.5 241.25 mo
416.5 238.765 414.485 236.75 412 236.75 cv
409.515 236.75 407.5 238.765 407.5 241.25 cv
407.5 243.735 409.515 245.75 412 245.75 cv
414.485 245.75 416.5 243.735 416.5 241.25 cv
ef
398.5 227.5 mo
398.5 225.015 396.485 223 394 223 cv
391.515 223 389.5 225.015 389.5 227.5 cv
389.5 229.985 391.515 232 394 232 cv
396.485 232 398.5 229.985 398.5 227.5 cv
ef
380.5 214.5 mo
380.5 212.015 378.485 210 376 210 cv
373.515 210 371.5 212.015 371.5 214.5 cv
371.5 216.985 373.515 219 376 219 cv
378.485 219 380.5 216.985 380.5 214.5 cv
ef
364.25 203.5 mo
364.25 201.015 362.235 199 359.75 199 cv
357.265 199 355.25 201.015 355.25 203.5 cv
355.25 205.985 357.265 208 359.75 208 cv
362.235 208 364.25 205.985 364.25 203.5 cv
ef
348.25 193 mo
348.25 190.515 346.235 188.5 343.75 188.5 cv
341.265 188.5 339.25 190.515 339.25 193 cv
339.25 195.485 341.265 197.5 343.75 197.5 cv
346.235 197.5 348.25 195.485 348.25 193 cv
ef
330.5 181.75 mo
330.5 179.265 328.485 177.25 326 177.25 cv
323.515 177.25 321.5 179.265 321.5 181.75 cv
321.5 184.235 323.515 186.25 326 186.25 cv
328.485 186.25 330.5 184.235 330.5 181.75 cv
ef
310.75 169.75 mo
310.75 167.265 308.735 165.25 306.25 165.25 cv
303.765 165.25 301.75 167.265 301.75 169.75 cv
301.75 172.235 303.765 174.25 306.25 174.25 cv
308.735 174.25 310.75 172.235 310.75 169.75 cv
ef
292 158.75 mo
292 156.265 289.985 154.25 287.5 154.25 cv
285.015 154.25 283 156.265 283 158.75 cv
283 161.235 285.015 163.25 287.5 163.25 cv
289.985 163.25 292 161.235 292 158.75 cv
ef
273.75 148.25 mo
273.75 145.765 271.735 143.75 269.25 143.75 cv
266.765 143.75 264.75 145.765 264.75 148.25 cv
264.75 150.735 266.765 152.75 269.25 152.75 cv
271.735 152.75 273.75 150.735 273.75 148.25 cv
ef
257.25 138.75 mo
257.25 136.265 255.235 134.25 252.75 134.25 cv
250.265 134.25 248.25 136.265 248.25 138.75 cv
248.25 141.235 250.265 143.25 252.75 143.25 cv
255.235 143.25 257.25 141.235 257.25 138.75 cv
ef
242.5 130.25 mo
242.5 127.765 240.485 125.75 238 125.75 cv
235.515 125.75 233.5 127.765 233.5 130.25 cv
233.5 132.735 235.515 134.75 238 134.75 cv
240.485 134.75 242.5 132.735 242.5 130.25 cv
ef
226.5 121.5 mo
226.5 119.015 224.485 117 222 117 cv
219.515 117 217.5 119.015 217.5 121.5 cv
217.5 123.985 219.515 126 222 126 cv
224.485 126 226.5 123.985 226.5 121.5 cv
ef
208.75 112 mo
208.75 109.515 206.735 107.5 204.25 107.5 cv
201.765 107.5 199.75 109.515 199.75 112 cv
199.75 114.485 201.765 116.5 204.25 116.5 cv
206.735 116.5 208.75 114.485 208.75 112 cv
ef
189.25 101.5 mo
189.25 99.015 187.235 97 184.75 97 cv
182.265 97 180.25 99.015 180.25 101.5 cv
180.25 103.985 182.265 106 184.75 106 cv
187.235 106 189.25 103.985 189.25 101.5 cv
ef
167 89.75 mo
167 87.265 164.985 85.25 162.5 85.25 cv
160.015 85.25 158 87.265 158 89.75 cv
158 92.235 160.015 94.25 162.5 94.25 cv
164.985 94.25 167 92.235 167 89.75 cv
ef
141.5 76.75 mo
141.5 74.265 139.485 72.25 137 72.25 cv
134.515 72.25 132.5 74.265 132.5 76.75 cv
132.5 79.235 134.515 81.25 137 81.25 cv
139.485 81.25 141.5 79.235 141.5 76.75 cv
ef
111.75 61.75 mo
111.75 59.265 109.735 57.25 107.25 57.25 cv
104.765 57.25 102.75 59.265 102.75 61.75 cv
102.75 64.235 104.765 66.25 107.25 66.25 cv
109.735 66.25 111.75 64.235 111.75 61.75 cv
ef
514.5 378 mo
514.5 375.515 512.485 373.5 510 373.5 cv
507.515 373.5 505.5 375.515 505.5 378 cv
505.5 380.485 507.515 382.5 510 382.5 cv
512.485 382.5 514.5 380.485 514.5 378 cv
@
489 339.25 mo
489 336.765 486.985 334.75 484.5 334.75 cv
482.015 334.75 480 336.765 480 339.25 cv
480 341.735 482.015 343.75 484.5 343.75 cv
486.985 343.75 489 341.735 489 339.25 cv
@
470.25 314.25 mo
470.25 311.765 468.235 309.75 465.75 309.75 cv
463.265 309.75 461.25 311.765 461.25 314.25 cv
461.25 316.735 463.265 318.75 465.75 318.75 cv
468.235 318.75 470.25 316.735 470.25 314.25 cv
@
452 292.25 mo
452 289.765 449.985 287.75 447.5 287.75 cv
445.015 287.75 443 289.765 443 292.25 cv
443 294.735 445.015 296.75 447.5 296.75 cv
449.985 296.75 452 294.735 452 292.25 cv
@
433.75 273.25 mo
433.75 270.765 431.735 268.75 429.25 268.75 cv
426.765 268.75 424.75 270.765 424.75 273.25 cv
424.75 275.735 426.765 277.75 429.25 277.75 cv
431.735 277.75 433.75 275.735 433.75 273.25 cv
@
416.5 258.25 mo
416.5 255.765 414.485 253.75 412 253.75 cv
409.515 253.75 407.5 255.765 407.5 258.25 cv
407.5 260.735 409.515 262.75 412 262.75 cv
414.485 262.75 416.5 260.735 416.5 258.25 cv
@
398.5 243.75 mo
398.5 241.265 396.485 239.25 394 239.25 cv
391.515 239.25 389.5 241.265 389.5 243.75 cv
389.5 246.235 391.515 248.25 394 248.25 cv
396.485 248.25 398.5 246.235 398.5 243.75 cv
@
380.5 230 mo
380.5 227.515 378.485 225.5 376 225.5 cv
373.515 225.5 371.5 227.515 371.5 230 cv
371.5 232.485 373.515 234.5 376 234.5 cv
378.485 234.5 380.5 232.485 380.5 230 cv
@
364.25 218.25 mo
364.25 215.765 362.235 213.75 359.75 213.75 cv
357.265 213.75 355.25 215.765 355.25 218.25 cv
355.25 220.735 357.265 222.75 359.75 222.75 cv
362.235 222.75 364.25 220.735 364.25 218.25 cv
@
348.25 207.25 mo
348.25 204.765 346.235 202.75 343.75 202.75 cv
341.265 202.75 339.25 204.765 339.25 207.25 cv
339.25 209.735 341.265 211.75 343.75 211.75 cv
346.235 211.75 348.25 209.735 348.25 207.25 cv
@
330.5 195.5 mo
330.5 193.015 328.485 191 326 191 cv
323.515 191 321.5 193.015 321.5 195.5 cv
321.5 197.985 323.515 200 326 200 cv
328.485 200 330.5 197.985 330.5 195.5 cv
@
310.75 183 mo
310.75 180.515 308.735 178.5 306.25 178.5 cv
303.765 178.5 301.75 180.515 301.75 183 cv
301.75 185.485 303.765 187.5 306.25 187.5 cv
308.735 187.5 310.75 185.485 310.75 183 cv
@
292 171.5 mo
292 169.015 289.985 167 287.5 167 cv
285.015 167 283 169.015 283 171.5 cv
283 173.985 285.015 176 287.5 176 cv
289.985 176 292 173.985 292 171.5 cv
@
273.75 160.75 mo
273.75 158.265 271.735 156.25 269.25 156.25 cv
266.765 156.25 264.75 158.265 264.75 160.75 cv
264.75 163.235 266.765 165.25 269.25 165.25 cv
271.735 165.25 273.75 163.235 273.75 160.75 cv
@
257.25 151.25 mo
257.25 148.765 255.235 146.75 252.75 146.75 cv
250.265 146.75 248.25 148.765 248.25 151.25 cv
248.25 153.735 250.265 155.75 252.75 155.75 cv
255.235 155.75 257.25 153.735 257.25 151.25 cv
@
242.5 143 mo
242.5 140.515 240.485 138.5 238 138.5 cv
235.515 138.5 233.5 140.515 233.5 143 cv
233.5 145.485 235.515 147.5 238 147.5 cv
240.485 147.5 242.5 145.485 242.5 143 cv
@
226.5 133.75 mo
226.5 131.265 224.485 129.25 222 129.25 cv
219.515 129.25 217.5 131.265 217.5 133.75 cv
217.5 136.235 219.515 138.25 222 138.25 cv
224.485 138.25 226.5 136.235 226.5 133.75 cv
@
208.75 124.5 mo
208.75 122.015 206.735 120 204.25 120 cv
201.765 120 199.75 122.015 199.75 124.5 cv
199.75 126.985 201.765 129 204.25 129 cv
206.735 129 208.75 126.985 208.75 124.5 cv
@
189.25 113.5 mo
189.25 111.015 187.235 109 184.75 109 cv
182.265 109 180.25 111.015 180.25 113.5 cv
180.25 115.985 182.265 118 184.75 118 cv
187.235 118 189.25 115.985 189.25 113.5 cv
@
167 101.75 mo
167 99.265 164.985 97.25 162.5 97.25 cv
160.015 97.25 158 99.265 158 101.75 cv
158 104.235 160.015 106.25 162.5 106.25 cv
164.985 106.25 167 104.235 167 101.75 cv
@
141.5 88.75 mo
141.5 86.265 139.485 84.25 137 84.25 cv
134.515 84.25 132.5 86.265 132.5 88.75 cv
132.5 91.235 134.515 93.25 137 93.25 cv
139.485 93.25 141.5 91.235 141.5 88.75 cv
@
111.75 73.5 mo
111.75 71.015 109.735 69 107.25 69 cv
104.765 69 102.75 71.015 102.75 73.5 cv
102.75 75.985 104.765 78 107.25 78 cv
109.735 78 111.75 75.985 111.75 73.5 cv
@
510 383.75 mo
510 386 li
@
507.25 386 mo
512.75 386 li
@
514.5 378 mo
514.5 375.515 512.485 373.5 510 373.5 cv
507.515 373.5 505.5 375.515 505.5 378 cv
505.5 380.485 507.515 382.5 510 382.5 cv
512.485 382.5 514.5 380.485 514.5 378 cv
@
489 339.25 mo
489 336.765 486.985 334.75 484.5 334.75 cv
482.015 334.75 480 336.765 480 339.25 cv
480 341.735 482.015 343.75 484.5 343.75 cv
486.985 343.75 489 341.735 489 339.25 cv
@
470.25 314.25 mo
470.25 311.765 468.235 309.75 465.75 309.75 cv
463.265 309.75 461.25 311.765 461.25 314.25 cv
461.25 316.735 463.265 318.75 465.75 318.75 cv
468.235 318.75 470.25 316.735 470.25 314.25 cv
@
452 292.25 mo
452 289.765 449.985 287.75 447.5 287.75 cv
445.015 287.75 443 289.765 443 292.25 cv
443 294.735 445.015 296.75 447.5 296.75 cv
449.985 296.75 452 294.735 452 292.25 cv
@
433.75 273.25 mo
433.75 270.765 431.735 268.75 429.25 268.75 cv
426.765 268.75 424.75 270.765 424.75 273.25 cv
424.75 275.735 426.765 277.75 429.25 277.75 cv
431.735 277.75 433.75 275.735 433.75 273.25 cv
@
416.5 258.25 mo
416.5 255.765 414.485 253.75 412 253.75 cv
409.515 253.75 407.5 255.765 407.5 258.25 cv
407.5 260.735 409.515 262.75 412 262.75 cv
414.485 262.75 416.5 260.735 416.5 258.25 cv
@
398.5 243.75 mo
398.5 241.265 396.485 239.25 394 239.25 cv
391.515 239.25 389.5 241.265 389.5 243.75 cv
389.5 246.235 391.515 248.25 394 248.25 cv
396.485 248.25 398.5 246.235 398.5 243.75 cv
@
380.5 230 mo
380.5 227.515 378.485 225.5 376 225.5 cv
373.515 225.5 371.5 227.515 371.5 230 cv
371.5 232.485 373.515 234.5 376 234.5 cv
378.485 234.5 380.5 232.485 380.5 230 cv
@
364.25 218.25 mo
364.25 215.765 362.235 213.75 359.75 213.75 cv
357.265 213.75 355.25 215.765 355.25 218.25 cv
355.25 220.735 357.265 222.75 359.75 222.75 cv
362.235 222.75 364.25 220.735 364.25 218.25 cv
@
348.25 207.25 mo
348.25 204.765 346.235 202.75 343.75 202.75 cv
341.265 202.75 339.25 204.765 339.25 207.25 cv
339.25 209.735 341.265 211.75 343.75 211.75 cv
346.235 211.75 348.25 209.735 348.25 207.25 cv
@
330.5 195.5 mo
330.5 193.015 328.485 191 326 191 cv
323.515 191 321.5 193.015 321.5 195.5 cv
321.5 197.985 323.515 200 326 200 cv
328.485 200 330.5 197.985 330.5 195.5 cv
@
310.75 183 mo
310.75 180.515 308.735 178.5 306.25 178.5 cv
303.765 178.5 301.75 180.515 301.75 183 cv
301.75 185.485 303.765 187.5 306.25 187.5 cv
308.735 187.5 310.75 185.485 310.75 183 cv
@
292 171.5 mo
292 169.015 289.985 167 287.5 167 cv
285.015 167 283 169.015 283 171.5 cv
283 173.985 285.015 176 287.5 176 cv
289.985 176 292 173.985 292 171.5 cv
@
273.75 160.75 mo
273.75 158.265 271.735 156.25 269.25 156.25 cv
266.765 156.25 264.75 158.265 264.75 160.75 cv
264.75 163.235 266.765 165.25 269.25 165.25 cv
271.735 165.25 273.75 163.235 273.75 160.75 cv
@
257.25 151.25 mo
257.25 148.765 255.235 146.75 252.75 146.75 cv
250.265 146.75 248.25 148.765 248.25 151.25 cv
248.25 153.735 250.265 155.75 252.75 155.75 cv
255.235 155.75 257.25 153.735 257.25 151.25 cv
@
242.5 143 mo
242.5 140.515 240.485 138.5 238 138.5 cv
235.515 138.5 233.5 140.515 233.5 143 cv
233.5 145.485 235.515 147.5 238 147.5 cv
240.485 147.5 242.5 145.485 242.5 143 cv
@
226.5 133.75 mo
226.5 131.265 224.485 129.25 222 129.25 cv
219.515 129.25 217.5 131.265 217.5 133.75 cv
217.5 136.235 219.515 138.25 222 138.25 cv
224.485 138.25 226.5 136.235 226.5 133.75 cv
@
208.75 124.5 mo
208.75 122.015 206.735 120 204.25 120 cv
201.765 120 199.75 122.015 199.75 124.5 cv
199.75 126.985 201.765 129 204.25 129 cv
206.735 129 208.75 126.985 208.75 124.5 cv
@
189.25 113.5 mo
189.25 111.015 187.235 109 184.75 109 cv
182.265 109 180.25 111.015 180.25 113.5 cv
180.25 115.985 182.265 118 184.75 118 cv
187.235 118 189.25 115.985 189.25 113.5 cv
@
167 101.75 mo
167 99.265 164.985 97.25 162.5 97.25 cv
160.015 97.25 158 99.265 158 101.75 cv
158 104.235 160.015 106.25 162.5 106.25 cv
164.985 106.25 167 104.235 167 101.75 cv
@
141.5 88.75 mo
141.5 86.265 139.485 84.25 137 84.25 cv
134.515 84.25 132.5 86.265 132.5 88.75 cv
132.5 91.235 134.515 93.25 137 93.25 cv
139.485 93.25 141.5 91.235 141.5 88.75 cv
@
111.75 73.5 mo
111.75 71.015 109.735 69 107.25 69 cv
104.765 69 102.75 71.015 102.75 73.5 cv
102.75 75.985 104.765 78 107.25 78 cv
109.735 78 111.75 75.985 111.75 73.5 cv
@
477.75 369.5 mo
473.25 369.5 li
473.25 378.5 li
482.25 378.5 li
482.25 369.5 li
ef
454 327.25 mo
449.5 327.25 li
449.5 336.25 li
458.5 336.25 li
458.5 327.25 li
ef
435.25 304.75 mo
430.75 304.75 li
430.75 313.75 li
439.75 313.75 li
439.75 304.75 li
ef
415.75 283.25 mo
411.25 283.25 li
411.25 292.25 li
420.25 292.25 li
420.25 283.25 li
ef
397 264 mo
392.5 264 li
392.5 273 li
401.5 273 li
401.5 264 li
ef
381.25 250 mo
376.75 250 li
376.75 259 li
385.75 259 li
385.75 250 li
ef
367.25 238.25 mo
362.75 238.25 li
362.75 247.25 li
371.75 247.25 li
371.75 238.25 li
ef
351.75 226.5 mo
347.25 226.5 li
347.25 235.5 li
356.25 235.5 li
356.25 226.5 li
ef
335 214 mo
330.5 214 li
330.5 223 li
339.5 223 li
339.5 214 li
ef
316.5 201 mo
312 201 li
312 210 li
321 210 li
321 201 li
ef
298.75 189.25 mo
294.25 189.25 li
294.25 198.25 li
303.25 198.25 li
303.25 189.25 li
ef
281.5 178.5 mo
277 178.5 li
277 187.5 li
286 187.5 li
286 178.5 li
ef
262.5 167.25 mo
258 167.25 li
258 176.25 li
267 176.25 li
267 167.25 li
ef
241.25 154.75 mo
236.75 154.75 li
236.75 163.75 li
245.75 163.75 li
245.75 154.75 li
ef
222 144 mo
217.5 144 li
217.5 153 li
226.5 153 li
226.5 144 li
ef
204.25 133.75 mo
199.75 133.75 li
199.75 142.75 li
208.75 142.75 li
208.75 133.75 li
ef
184.75 123.25 mo
180.25 123.25 li
180.25 132.25 li
189.25 132.25 li
189.25 123.25 li
ef
162.5 111.25 mo
158 111.25 li
158 120.25 li
167 120.25 li
167 111.25 li
ef
137 98 mo
132.5 98 li
132.5 107 li
141.5 107 li
141.5 98 li
ef
107.25 83 mo
102.75 83 li
102.75 92 li
111.75 92 li
111.75 83 li
ef
477.75 369.5 mo
473.25 369.5 li
473.25 378.5 li
482.25 378.5 li
482.25 369.5 li
ef
454 327.25 mo
449.5 327.25 li
449.5 336.25 li
458.5 336.25 li
458.5 327.25 li
ef
435.25 304.75 mo
430.75 304.75 li
430.75 313.75 li
439.75 313.75 li
439.75 304.75 li
ef
415.75 283.25 mo
411.25 283.25 li
411.25 292.25 li
420.25 292.25 li
420.25 283.25 li
ef
397 264 mo
392.5 264 li
392.5 273 li
401.5 273 li
401.5 264 li
ef
381.25 250 mo
376.75 250 li
376.75 259 li
385.75 259 li
385.75 250 li
ef
367.25 238.25 mo
362.75 238.25 li
362.75 247.25 li
371.75 247.25 li
371.75 238.25 li
ef
351.75 226.5 mo
347.25 226.5 li
347.25 235.5 li
356.25 235.5 li
356.25 226.5 li
ef
335 214 mo
330.5 214 li
330.5 223 li
339.5 223 li
339.5 214 li
ef
316.5 201 mo
312 201 li
312 210 li
321 210 li
321 201 li
ef
298.75 189.25 mo
294.25 189.25 li
294.25 198.25 li
303.25 198.25 li
303.25 189.25 li
ef
281.5 178.5 mo
277 178.5 li
277 187.5 li
286 187.5 li
286 178.5 li
ef
262.5 167.25 mo
258 167.25 li
258 176.25 li
267 176.25 li
267 167.25 li
ef
241.25 154.75 mo
236.75 154.75 li
236.75 163.75 li
245.75 163.75 li
245.75 154.75 li
ef
222 144 mo
217.5 144 li
217.5 153 li
226.5 153 li
226.5 144 li
ef
204.25 133.75 mo
199.75 133.75 li
199.75 142.75 li
208.75 142.75 li
208.75 133.75 li
ef
184.75 123.25 mo
180.25 123.25 li
180.25 132.25 li
189.25 132.25 li
189.25 123.25 li
ef
162.5 111.25 mo
158 111.25 li
158 120.25 li
167 120.25 li
167 111.25 li
ef
137 98 mo
132.5 98 li
132.5 107 li
141.5 107 li
141.5 98 li
ef
107.25 83 mo
102.75 83 li
102.75 92 li
111.75 92 li
111.75 83 li
ef
435 376.75 mo
435 377 li
@
432.25 377 mo
438 377 li
@
435 366.75 mo
430.5 366.75 li
430.5 375.75 li
439.5 375.75 li
439.5 366.75 li
cp
@
409.5 321.25 mo
405 321.25 li
405 330.25 li
414 330.25 li
414 321.25 li
cp
@
392.25 299.25 mo
387.75 299.25 li
387.75 308.25 li
396.75 308.25 li
396.75 299.25 li
cp
@
375.75 279 mo
371.25 279 li
371.25 288 li
380.25 288 li
380.25 279 li
cp
@
357.25 260.75 mo
352.75 260.75 li
352.75 269.75 li
361.75 269.75 li
361.75 260.75 li
cp
@
336.75 241.5 mo
332.25 241.5 li
332.25 250.5 li
341.25 250.5 li
341.25 241.5 li
cp
@
316.25 224.25 mo
311.75 224.25 li
311.75 233.25 li
320.75 233.25 li
320.75 224.25 li
cp
@
298.5 210.5 mo
294 210.5 li
294 219.5 li
303 219.5 li
303 210.5 li
cp
@
281.5 198.5 mo
277 198.5 li
277 207.5 li
286 207.5 li
286 198.5 li
cp
@
262.5 185.75 mo
258 185.75 li
258 194.75 li
267 194.75 li
267 185.75 li
cp
@
241.25 172 mo
236.75 172 li
236.75 181 li
245.75 181 li
245.75 172 li
cp
@
222 160.5 mo
217.5 160.5 li
217.5 169.5 li
226.5 169.5 li
226.5 160.5 li
cp
@
204.25 150 mo
199.75 150 li
199.75 159 li
208.75 159 li
208.75 150 li
cp
@
184.75 138.5 mo
180.25 138.5 li
180.25 147.5 li
189.25 147.5 li
189.25 138.5 li
cp
@
162.5 126 mo
158 126 li
158 135 li
167 135 li
167 126 li
cp
@
137 112.25 mo
132.5 112.25 li
132.5 121.25 li
141.5 121.25 li
141.5 112.25 li
cp
@
107.25 96 mo
102.75 96 li
102.75 105 li
111.75 105 li
111.75 96 li
cp
@
435 366.75 mo
430.5 366.75 li
430.5 375.75 li
439.5 375.75 li
439.5 366.75 li
cp
@
409.5 321.25 mo
405 321.25 li
405 330.25 li
414 330.25 li
414 321.25 li
cp
@
392.25 299.25 mo
387.75 299.25 li
387.75 308.25 li
396.75 308.25 li
396.75 299.25 li
cp
@
375.75 279 mo
371.25 279 li
371.25 288 li
380.25 288 li
380.25 279 li
cp
@
357.25 260.75 mo
352.75 260.75 li
352.75 269.75 li
361.75 269.75 li
361.75 260.75 li
cp
@
336.75 241.5 mo
332.25 241.5 li
332.25 250.5 li
341.25 250.5 li
341.25 241.5 li
cp
@
316.25 224.25 mo
311.75 224.25 li
311.75 233.25 li
320.75 233.25 li
320.75 224.25 li
cp
@
298.5 210.5 mo
294 210.5 li
294 219.5 li
303 219.5 li
303 210.5 li
cp
@
281.5 198.5 mo
277 198.5 li
277 207.5 li
286 207.5 li
286 198.5 li
cp
@
262.5 185.75 mo
258 185.75 li
258 194.75 li
267 194.75 li
267 185.75 li
cp
@
241.25 172 mo
236.75 172 li
236.75 181 li
245.75 181 li
245.75 172 li
cp
@
222 160.5 mo
217.5 160.5 li
217.5 169.5 li
226.5 169.5 li
226.5 160.5 li
cp
@
204.25 150 mo
199.75 150 li
199.75 159 li
208.75 159 li
208.75 150 li
cp
@
184.75 138.5 mo
180.25 138.5 li
180.25 147.5 li
189.25 147.5 li
189.25 138.5 li
cp
@
162.5 126 mo
158 126 li
158 135 li
167 135 li
167 126 li
cp
@
137 112.25 mo
132.5 112.25 li
132.5 121.25 li
141.5 121.25 li
141.5 112.25 li
cp
@
107.25 96 mo
102.75 96 li
102.75 105 li
111.75 105 li
111.75 96 li
cp
@
371.75 343.25 mo
371.75 343.5 li
@
368.75 343.5 mo
374.5 343.5 li
@
393.75 387.5 mo
393.75 391 li
@
390.75 391 mo
396.5 391 li
@
393.75 377.25 mo
389.25 386.25 li
398.25 386.25 li
ef
371.75 333.25 mo
367.25 342.25 li
376.25 342.25 li
ef
353 303.5 mo
348.5 312.5 li
357.5 312.5 li
ef
334.75 279 mo
330.25 288 li
339.25 288 li
ef
319 261.25 mo
314.5 270.25 li
323.5 270.25 li
ef
303.75 245.5 mo
299.25 254.5 li
308.25 254.5 li
ef
283.75 227 mo
279.25 236 li
288.25 236 li
ef
262.5 209 mo
258 218 li
267 218 li
ef
241.25 193 mo
236.75 202 li
245.75 202 li
ef
222 179.5 mo
217.5 188.5 li
226.5 188.5 li
ef
204.25 167.5 mo
199.75 176.5 li
208.75 176.5 li
ef
184.5 155 mo
180 164 li
189 164 li
ef
162.5 141.75 mo
158 150.75 li
167 150.75 li
ef
137 127.25 mo
132.5 136.25 li
141.5 136.25 li
ef
107.25 110.75 mo
102.75 119.75 li
111.75 119.75 li
ef
393.75 377.25 mo
389.25 386.25 li
398.25 386.25 li
ef
371.75 333.25 mo
367.25 342.25 li
376.25 342.25 li
ef
353 303.5 mo
348.5 312.5 li
357.5 312.5 li
ef
334.75 279 mo
330.25 288 li
339.25 288 li
ef
319 261.25 mo
314.5 270.25 li
323.5 270.25 li
ef
303.75 245.5 mo
299.25 254.5 li
308.25 254.5 li
ef
283.75 227 mo
279.25 236 li
288.25 236 li
ef
262.5 209 mo
258 218 li
267 218 li
ef
241.25 193 mo
236.75 202 li
245.75 202 li
ef
222 179.5 mo
217.5 188.5 li
226.5 188.5 li
ef
204.25 167.5 mo
199.75 176.5 li
208.75 176.5 li
ef
184.5 155 mo
180 164 li
189 164 li
ef
162.5 141.75 mo
158 150.75 li
167 150.75 li
ef
137 127.25 mo
132.5 136.25 li
141.5 136.25 li
ef
107.25 110.75 mo
102.75 119.75 li
111.75 119.75 li
ef
321.5 346.75 mo
321.5 348 li
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2716 17 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>Helvetica AddT42Char 
1 5540 31 <0001001cffed04ad04280006006a40405703670387030300201203030202
20120100010620120304030420120505060306040200030505010106050a
03000104020503011a08060019070888215fb5182b2b4ef43c10f6173c11
1239003d3f3f111217392f044d1887102b10872b87102b87102b3130015d
130115090115011c0491fc4403bcfb6f025e01cab4fe97fe96b401cb>Helvetica AddT42Char 
2 1808 91 <0001000b000003e1042f000b0035b800532b00b800002fb800032fb80006
2fb800092fba000200060000111239ba000400060000111239ba00080006
0000111239303113331b0117090123090123011ee9f6f9dbfe970179e6fe
f6fefee40179042ffe87017905fdfbfddb0192fe6e0225000000>Helvetica AddT42Char 
2 2608 95 <000100900000013b05d20003002940150200010a0517171a0300c1020119
0405c1217765182b2b4ef43c4dfd3c4e456544e6003f3f31302123113301
3babab05d2000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/period 17 def
/less 31 def
/x 91 def
/bar 95 def
end
Helvetica /Encoding get
dup 46 /period put
dup 60 /less put
dup 120 /x put
dup 124 /bar put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six /seven 4{/.notdef}rp /less 10{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 7{/.notdef}rp /x /y 2{/.notdef}rp /bar 131{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 32.25 mo( |y|<0.4 \(x32\))[6.34656 5.93549 11.4146 5.93549 13.3323 12.6931 6.34656 12.6931 6.34653 7.60199 11.4146 12.6931 12.6931 0 ]xsh346.75 24.75 mo
346.75 22.265 344.735 20.25 342.25 20.25 cv
339.765 20.25 337.75 22.265 337.75 24.75 cv
337.75 27.235 339.765 29.25 342.25 29.25 cv
344.735 29.25 346.75 27.235 346.75 24.75 cv
ef
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4672 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/eight 27 def
end
Helvetica /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight 3{/.notdef}rp /less 10{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 7{/.notdef}rp /x /y 2{/.notdef}rp /bar 131{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 59.75 mo( 0.4<|y|<0.8 \(x16\))[6.34656 12.6931 6.34656 12.6931 13.3323 5.93549 11.4147 5.93549 13.3323 12.6931 6.34653 12.6931 6.34656 7.60199 11.4146 12.6931 12.6931 0 ]xsh346.75 53 mo
346.75 50.515 344.735 48.5 342.25 48.5 cv
339.765 48.5 337.75 50.515 337.75 53 cv
337.75 55.485 339.765 57.5 342.25 57.5 cv
344.735 57.5 346.75 55.485 346.75 53 cv
@
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 88.25 mo( 0.8<|y|<1.2 \(x8\))[6.34656 12.6931 6.34656 12.6931 13.3323 5.93549 11.4147 5.93549 13.3323 12.6931 6.34653 12.6931 6.34656 7.60199 11.4146 12.6931 0 ]xsh342.25 76.5 mo
337.75 76.5 li
337.75 85.5 li
346.75 85.5 li
346.75 76.5 li
ef
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 116 mo( 1.2<|y|<1.6 \(x4\))[6.34656 12.6931 6.34656 12.6931 13.3323 5.93549 11.4147 5.93549 13.3323 12.6931 6.34653 12.6931 6.34656 7.60199 11.4146 12.6931 0 ]xsh342.25 104.75 mo
337.75 104.75 li
337.75 113.75 li
346.75 113.75 li
346.75 104.75 li
cp
@
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 144.5 mo( 1.6<|y|<2.0 \(x2\))[6.34656 12.6931 6.34656 12.6931 13.3323 5.93549 11.4147 5.93549 13.3323 12.6931 6.34653 12.6931 6.34656 7.60199 11.4146 12.6931 0 ]xsh342.25 132.75 mo
337.75 141.75 li
346.75 141.75 li
ef
MOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf372 172 mo( 2.0<|y|<2.4)[6.34656 12.6931 6.34656 12.6931 13.3323 5.93549 11.4147 5.93549 13.3323 12.6931 6.34653 0 ]xsh342.25 161 mo
337.75 170 li
346.75 170 li
cp
@
1.5 lw
83.25 51.25 mo
100.75 60 li
116.75 67.75 li
131.5 75.25 li
145 82 li
157.5 88.5 li
169.25 94.5 li
180.25 100.25 li
190.5 105.75 li
200.25 111 li
209.5 115.75 li
218.25 120.5 li
226.5 125.25 li
234.5 129.5 li
242.25 133.75 li
249.5 137.75 li
256.5 141.75 li
263.25 145.5 li
269.75 149.25 li
276 152.75 li
282.25 156.25 li
288 159.75 li
293.75 163 li
299.25 166.25 li
304.5 169.25 li
309.75 172.5 li
314.75 175.5 li
319.5 178.25 li
324.25 181.25 li
329 184.25 li
333.5 187 li
337.75 189.75 li
342 192.5 li
346.25 195.25 li
350.25 197.75 li
354.25 200.25 li
358.25 202.75 li
362 205.25 li
365.75 207.75 li
369.5 210.25 li
373 212.75 li
376.5 215 li
380 217.5 li
383.25 219.75 li
386.75 222 li
390 224.5 li
393.25 226.75 li
396.25 229 li
399.25 231.25 li
402.25 233.5 li
1 0 0 rgb
@
402.25 233.5 mo
405.25 235.75 li
408.25 237.75 li
411.25 240 li
414 242.25 li
416.75 244.5 li
419.5 246.5 li
422.25 248.5 li
424.75 251 li
427.5 253 li
430 255 li
432.5 257.25 li
435.25 259.25 li
437.5 261.25 li
440 263.5 li
442.5 265.5 li
444.75 267.75 li
447.25 269.5 li
449.5 272 li
451.75 274 li
454 275.75 li
456.25 278 li
458.5 280 li
460.5 282.25 li
462.75 284.25 li
464.75 286.25 li
467 288.5 li
469 290.5 li
471 292.5 li
473 294.75 li
475 296.75 li
477 298.75 li
479 301 li
481 303.25 li
482.75 305 li
484.75 307.5 li
486.5 309.25 li
488.5 311.5 li
490.25 313.75 li
492 315.75 li
493.75 318 li
495.75 320.25 li
497.5 322.5 li
499 324.5 li
500.75 326.5 li
502.5 329 li
504.25 331.25 li
506 333.5 li
507.5 335.5 li
509.25 337.75 li
@
509.25 337.75 mo
510.75 340 li
512.5 342.5 li
514 344.75 li
515.5 347 li
517.25 349.5 li
518.75 351.75 li
520.25 354 li
521.75 356.25 li
523.25 358.75 li
524.75 361.25 li
526.25 363.5 li
527.75 366.25 li
529.25 368.5 li
530.75 371 li
532.25 373.5 li
533.5 376 li
535 378.75 li
536.5 381.5 li
537.75 383.75 li
538.75 385.75 li
539.25 386.5 li
540.5 389.5 li
541 390.25 li
541.75 391.5 li
542 391.75 li
543.25 394.5 li
544.5 397.25 li
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
524 367 mo
524 369.25 li
@
521.25 369.25 mo
526.75 369.25 li
@
528.5 361.25 mo
528.5 358.765 526.485 356.75 524 356.75 cv
521.515 356.75 519.5 358.765 519.5 361.25 cv
519.5 363.735 521.515 365.75 524 365.75 cv
526.485 365.75 528.5 363.735 528.5 361.25 cv
ef
505.25 332 mo
505.25 329.515 503.235 327.5 500.75 327.5 cv
498.265 327.5 496.25 329.515 496.25 332 cv
496.25 334.485 498.265 336.5 500.75 336.5 cv
503.235 336.5 505.25 334.485 505.25 332 cv
ef
488.25 306.75 mo
488.25 304.265 486.235 302.25 483.75 302.25 cv
481.265 302.25 479.25 304.265 479.25 306.75 cv
479.25 309.235 481.265 311.25 483.75 311.25 cv
486.235 311.25 488.25 309.235 488.25 306.75 cv
ef
470.5 288.25 mo
470.5 285.765 468.485 283.75 466 283.75 cv
463.515 283.75 461.5 285.765 461.5 288.25 cv
461.5 290.735 463.515 292.75 466 292.75 cv
468.485 292.75 470.5 290.735 470.5 288.25 cv
ef
452 271.75 mo
452 269.265 449.985 267.25 447.5 267.25 cv
445.015 267.25 443 269.265 443 271.75 cv
443 274.235 445.015 276.25 447.5 276.25 cv
449.985 276.25 452 274.235 452 271.75 cv
ef
433.75 255.75 mo
433.75 253.265 431.735 251.25 429.25 251.25 cv
426.765 251.25 424.75 253.265 424.75 255.75 cv
424.75 258.235 426.765 260.25 429.25 260.25 cv
431.735 260.25 433.75 258.235 433.75 255.75 cv
ef
416.5 241.25 mo
416.5 238.765 414.485 236.75 412 236.75 cv
409.515 236.75 407.5 238.765 407.5 241.25 cv
407.5 243.735 409.515 245.75 412 245.75 cv
414.485 245.75 416.5 243.735 416.5 241.25 cv
ef
398.5 227.5 mo
398.5 225.015 396.485 223 394 223 cv
391.515 223 389.5 225.015 389.5 227.5 cv
389.5 229.985 391.515 232 394 232 cv
396.485 232 398.5 229.985 398.5 227.5 cv
ef
380.5 214.5 mo
380.5 212.015 378.485 210 376 210 cv
373.515 210 371.5 212.015 371.5 214.5 cv
371.5 216.985 373.515 219 376 219 cv
378.485 219 380.5 216.985 380.5 214.5 cv
ef
364.25 203.5 mo
364.25 201.015 362.235 199 359.75 199 cv
357.265 199 355.25 201.015 355.25 203.5 cv
355.25 205.985 357.265 208 359.75 208 cv
362.235 208 364.25 205.985 364.25 203.5 cv
ef
348.25 193 mo
348.25 190.515 346.235 188.5 343.75 188.5 cv
341.265 188.5 339.25 190.515 339.25 193 cv
339.25 195.485 341.265 197.5 343.75 197.5 cv
346.235 197.5 348.25 195.485 348.25 193 cv
ef
330.5 181.75 mo
330.5 179.265 328.485 177.25 326 177.25 cv
323.515 177.25 321.5 179.265 321.5 181.75 cv
321.5 184.235 323.515 186.25 326 186.25 cv
328.485 186.25 330.5 184.235 330.5 181.75 cv
ef
310.75 169.75 mo
310.75 167.265 308.735 165.25 306.25 165.25 cv
303.765 165.25 301.75 167.265 301.75 169.75 cv
301.75 172.235 303.765 174.25 306.25 174.25 cv
308.735 174.25 310.75 172.235 310.75 169.75 cv
ef
292 158.75 mo
292 156.265 289.985 154.25 287.5 154.25 cv
285.015 154.25 283 156.265 283 158.75 cv
283 161.235 285.015 163.25 287.5 163.25 cv
289.985 163.25 292 161.235 292 158.75 cv
ef
273.75 148.25 mo
273.75 145.765 271.735 143.75 269.25 143.75 cv
266.765 143.75 264.75 145.765 264.75 148.25 cv
264.75 150.735 266.765 152.75 269.25 152.75 cv
271.735 152.75 273.75 150.735 273.75 148.25 cv
ef
257.25 138.75 mo
257.25 136.265 255.235 134.25 252.75 134.25 cv
250.265 134.25 248.25 136.265 248.25 138.75 cv
248.25 141.235 250.265 143.25 252.75 143.25 cv
255.235 143.25 257.25 141.235 257.25 138.75 cv
ef
242.5 130.25 mo
242.5 127.765 240.485 125.75 238 125.75 cv
235.515 125.75 233.5 127.765 233.5 130.25 cv
233.5 132.735 235.515 134.75 238 134.75 cv
240.485 134.75 242.5 132.735 242.5 130.25 cv
ef
226.5 121.5 mo
226.5 119.015 224.485 117 222 117 cv
219.515 117 217.5 119.015 217.5 121.5 cv
217.5 123.985 219.515 126 222 126 cv
224.485 126 226.5 123.985 226.5 121.5 cv
ef
208.75 112 mo
208.75 109.515 206.735 107.5 204.25 107.5 cv
201.765 107.5 199.75 109.515 199.75 112 cv
199.75 114.485 201.765 116.5 204.25 116.5 cv
206.735 116.5 208.75 114.485 208.75 112 cv
ef
189.25 101.5 mo
189.25 99.015 187.235 97 184.75 97 cv
182.265 97 180.25 99.015 180.25 101.5 cv
180.25 103.985 182.265 106 184.75 106 cv
187.235 106 189.25 103.985 189.25 101.5 cv
ef
167 89.75 mo
167 87.265 164.985 85.25 162.5 85.25 cv
160.015 85.25 158 87.265 158 89.75 cv
158 92.235 160.015 94.25 162.5 94.25 cv
164.985 94.25 167 92.235 167 89.75 cv
ef
141.5 76.75 mo
141.5 74.265 139.485 72.25 137 72.25 cv
134.515 72.25 132.5 74.265 132.5 76.75 cv
132.5 79.235 134.515 81.25 137 81.25 cv
139.485 81.25 141.5 79.235 141.5 76.75 cv
ef
111.75 61.75 mo
111.75 59.265 109.735 57.25 107.25 57.25 cv
104.765 57.25 102.75 59.265 102.75 61.75 cv
102.75 64.235 104.765 66.25 107.25 66.25 cv
109.735 66.25 111.75 64.235 111.75 61.75 cv
ef
1.5 lw
83.25 62.75 mo
100.75 71.5 li
116.75 79.5 li
131.5 86.75 li
145 93.75 li
157.5 100.25 li
169.25 106.25 li
180.25 112 li
190.5 117.5 li
200.25 122.75 li
209.5 127.75 li
218.25 132.5 li
226.5 137.25 li
234.5 141.5 li
242.25 145.75 li
249.5 150 li
256.5 154 li
263.25 157.75 li
269.75 161.5 li
276 165.25 li
282.25 168.75 li
288 172.25 li
293.75 175.5 li
299.25 178.75 li
304.5 182.25 li
309.75 185.25 li
314.75 188.5 li
319.5 191.25 li
324.25 194.5 li
329 197.25 li
333.5 200 li
337.75 203 li
342 205.75 li
346.25 208.5 li
350.25 211.25 li
354.25 214 li
358.25 216.5 li
362 219.25 li
365.75 221.75 li
369.5 224.25 li
373 227 li
376.5 229.25 li
380 232 li
383.25 234.5 li
386.75 237 li
390 239.25 li
393.25 241.75 li
396.25 244 li
399.25 246.5 li
402.25 248.75 li
1 0 0 rgb
@
402.25 248.75 mo
405.25 251.25 li
408.25 253.75 li
411.25 255.75 li
414 258.5 li
416.75 260.5 li
419.5 263 li
422.25 265.25 li
424.75 267.5 li
427.5 269.75 li
430 272.25 li
432.5 274.5 li
435.25 276.75 li
437.5 279 li
440 281.5 li
442.5 283.75 li
444.75 286 li
447.25 288.5 li
449.5 290.75 li
451.75 292.75 li
454 295.25 li
456.25 297.75 li
458.5 300 li
460.5 302.25 li
462.75 304.5 li
464.75 306.75 li
467 309.25 li
469 311.5 li
471 314 li
473 316.25 li
475 318.75 li
477 321.25 li
479 323.5 li
481 325.75 li
482.75 328.5 li
484.75 330.75 li
486.5 333.25 li
488.5 335.75 li
490.25 338.25 li
492 340.5 li
493.75 343.25 li
495.75 345.75 li
497.5 348.25 li
499 351 li
500.75 353.5 li
502.5 356.25 li
504.25 358.5 li
506 361.75 li
507.5 364 li
509.25 366.75 li
@
509.25 366.75 mo
510.25 368.5 li
510.75 369.75 li
511.75 371.25 li
512.5 372.25 li
513.75 374.25 li
514 375 li
514.5 375.75 li
515.5 377.75 li
515.5 378.25 li
516 379 li
517 380.25 li
517.25 380.5 li
518.75 383.5 li
520.25 386.5 li
521.75 389.25 li
523.25 392.5 li
524.5 394.5 li
524.75 395.25 li
526.25 398.25 li
527.75 401.5 li
529.25 404.5 li
530.75 407.25 li
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
510 383.75 mo
510 386 li
@
507.25 386 mo
512.75 386 li
@
514.5 378 mo
514.5 375.515 512.485 373.5 510 373.5 cv
507.515 373.5 505.5 375.515 505.5 378 cv
505.5 380.485 507.515 382.5 510 382.5 cv
512.485 382.5 514.5 380.485 514.5 378 cv
@
489 339.25 mo
489 336.765 486.985 334.75 484.5 334.75 cv
482.015 334.75 480 336.765 480 339.25 cv
480 341.735 482.015 343.75 484.5 343.75 cv
486.985 343.75 489 341.735 489 339.25 cv
@
470.25 314.25 mo
470.25 311.765 468.235 309.75 465.75 309.75 cv
463.265 309.75 461.25 311.765 461.25 314.25 cv
461.25 316.735 463.265 318.75 465.75 318.75 cv
468.235 318.75 470.25 316.735 470.25 314.25 cv
@
452 292.25 mo
452 289.765 449.985 287.75 447.5 287.75 cv
445.015 287.75 443 289.765 443 292.25 cv
443 294.735 445.015 296.75 447.5 296.75 cv
449.985 296.75 452 294.735 452 292.25 cv
@
433.75 273.25 mo
433.75 270.765 431.735 268.75 429.25 268.75 cv
426.765 268.75 424.75 270.765 424.75 273.25 cv
424.75 275.735 426.765 277.75 429.25 277.75 cv
431.735 277.75 433.75 275.735 433.75 273.25 cv
@
416.5 258.25 mo
416.5 255.765 414.485 253.75 412 253.75 cv
409.515 253.75 407.5 255.765 407.5 258.25 cv
407.5 260.735 409.515 262.75 412 262.75 cv
414.485 262.75 416.5 260.735 416.5 258.25 cv
@
398.5 243.75 mo
398.5 241.265 396.485 239.25 394 239.25 cv
391.515 239.25 389.5 241.265 389.5 243.75 cv
389.5 246.235 391.515 248.25 394 248.25 cv
396.485 248.25 398.5 246.235 398.5 243.75 cv
@
380.5 230 mo
380.5 227.515 378.485 225.5 376 225.5 cv
373.515 225.5 371.5 227.515 371.5 230 cv
371.5 232.485 373.515 234.5 376 234.5 cv
378.485 234.5 380.5 232.485 380.5 230 cv
@
364.25 218.25 mo
364.25 215.765 362.235 213.75 359.75 213.75 cv
357.265 213.75 355.25 215.765 355.25 218.25 cv
355.25 220.735 357.265 222.75 359.75 222.75 cv
362.235 222.75 364.25 220.735 364.25 218.25 cv
@
348.25 207.25 mo
348.25 204.765 346.235 202.75 343.75 202.75 cv
341.265 202.75 339.25 204.765 339.25 207.25 cv
339.25 209.735 341.265 211.75 343.75 211.75 cv
346.235 211.75 348.25 209.735 348.25 207.25 cv
@
330.5 195.5 mo
330.5 193.015 328.485 191 326 191 cv
323.515 191 321.5 193.015 321.5 195.5 cv
321.5 197.985 323.515 200 326 200 cv
328.485 200 330.5 197.985 330.5 195.5 cv
@
310.75 183 mo
310.75 180.515 308.735 178.5 306.25 178.5 cv
303.765 178.5 301.75 180.515 301.75 183 cv
301.75 185.485 303.765 187.5 306.25 187.5 cv
308.735 187.5 310.75 185.485 310.75 183 cv
@
292 171.5 mo
292 169.015 289.985 167 287.5 167 cv
285.015 167 283 169.015 283 171.5 cv
283 173.985 285.015 176 287.5 176 cv
289.985 176 292 173.985 292 171.5 cv
@
273.75 160.75 mo
273.75 158.265 271.735 156.25 269.25 156.25 cv
266.765 156.25 264.75 158.265 264.75 160.75 cv
264.75 163.235 266.765 165.25 269.25 165.25 cv
271.735 165.25 273.75 163.235 273.75 160.75 cv
@
257.25 151.25 mo
257.25 148.765 255.235 146.75 252.75 146.75 cv
250.265 146.75 248.25 148.765 248.25 151.25 cv
248.25 153.735 250.265 155.75 252.75 155.75 cv
255.235 155.75 257.25 153.735 257.25 151.25 cv
@
242.5 143 mo
242.5 140.515 240.485 138.5 238 138.5 cv
235.515 138.5 233.5 140.515 233.5 143 cv
233.5 145.485 235.515 147.5 238 147.5 cv
240.485 147.5 242.5 145.485 242.5 143 cv
@
226.5 133.75 mo
226.5 131.265 224.485 129.25 222 129.25 cv
219.515 129.25 217.5 131.265 217.5 133.75 cv
217.5 136.235 219.515 138.25 222 138.25 cv
224.485 138.25 226.5 136.235 226.5 133.75 cv
@
208.75 124.5 mo
208.75 122.015 206.735 120 204.25 120 cv
201.765 120 199.75 122.015 199.75 124.5 cv
199.75 126.985 201.765 129 204.25 129 cv
206.735 129 208.75 126.985 208.75 124.5 cv
@
189.25 113.5 mo
189.25 111.015 187.235 109 184.75 109 cv
182.265 109 180.25 111.015 180.25 113.5 cv
180.25 115.985 182.265 118 184.75 118 cv
187.235 118 189.25 115.985 189.25 113.5 cv
@
167 101.75 mo
167 99.265 164.985 97.25 162.5 97.25 cv
160.015 97.25 158 99.265 158 101.75 cv
158 104.235 160.015 106.25 162.5 106.25 cv
164.985 106.25 167 104.235 167 101.75 cv
@
141.5 88.75 mo
141.5 86.265 139.485 84.25 137 84.25 cv
134.515 84.25 132.5 86.265 132.5 88.75 cv
132.5 91.235 134.515 93.25 137 93.25 cv
139.485 93.25 141.5 91.235 141.5 88.75 cv
@
111.75 73.5 mo
111.75 71.015 109.735 69 107.25 69 cv
104.765 69 102.75 71.015 102.75 73.5 cv
102.75 75.985 104.765 78 107.25 78 cv
109.735 78 111.75 75.985 111.75 73.5 cv
@
1.5 lw
83.25 75 mo
100.75 83.75 li
116.75 91.75 li
131.5 99.25 li
145 106.5 li
157.5 112.75 li
169.25 119 li
180.25 125 li
190.5 130.5 li
200.25 136 li
209.5 141 li
218.25 146 li
226.5 150.5 li
234.5 155.25 li
242.25 159.5 li
249.5 163.75 li
256.5 168 li
263.25 172 li
269.75 175.75 li
276 179.75 li
282.25 183.5 li
288 187 li
293.75 190.5 li
299.25 194 li
304.5 197.5 li
309.75 201 li
314.75 204.25 li
319.5 207.5 li
324.25 210.75 li
329 214 li
333.5 216.75 li
337.75 220 li
342 223 li
346.25 226.25 li
350.25 229.25 li
354.25 232 li
358.25 235 li
362 237.75 li
365.75 240.75 li
369.5 243.75 li
373 246.75 li
376.5 249.5 li
380 252.25 li
383.25 255 li
386.75 258 li
390 260.75 li
393.25 263.5 li
396.25 266.25 li
399.25 269.25 li
402.25 272 li
1 0 0 rgb
@
402.25 272 mo
405.25 274.75 li
408.25 277.75 li
411.25 280.25 li
414 283 li
416.75 286 li
419.5 288.75 li
422.25 291.75 li
424.75 294.5 li
427.5 297.25 li
430 300.25 li
432.5 303 li
435.25 305.75 li
437.5 308.75 li
440 311.75 li
442.5 314.5 li
444.75 317.75 li
447.25 320.25 li
449.5 323.5 li
451.75 326.5 li
454 329.75 li
456.25 332.25 li
458.5 335.5 li
460.5 338.5 li
462.75 341.5 li
464.75 345 li
467 347.75 li
469 351.5 li
470.75 353.5 li
471 354 li
473 357.75 li
475 360.75 li
477 364.5 li
479 367.25 li
481 371 li
482.75 374.25 li
484.75 378 li
486.5 381.5 li
488.5 384.75 li
490.25 388.5 li
492 391.5 li
492 391.75 li
493.75 396.25 li
495.5 399.25 li
495.75 399.75 li
497.25 402.75 li
497.5 403 li
499 407.25 li
500.75 411.25 li
502.5 415 li
503.75 418.25 li
504.25 419.5 li
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
477.75 369.5 mo
473.25 369.5 li
473.25 378.5 li
482.25 378.5 li
482.25 369.5 li
ef
454 327.25 mo
449.5 327.25 li
449.5 336.25 li
458.5 336.25 li
458.5 327.25 li
ef
435.25 304.75 mo
430.75 304.75 li
430.75 313.75 li
439.75 313.75 li
439.75 304.75 li
ef
415.75 283.25 mo
411.25 283.25 li
411.25 292.25 li
420.25 292.25 li
420.25 283.25 li
ef
397 264 mo
392.5 264 li
392.5 273 li
401.5 273 li
401.5 264 li
ef
381.25 250 mo
376.75 250 li
376.75 259 li
385.75 259 li
385.75 250 li
ef
367.25 238.25 mo
362.75 238.25 li
362.75 247.25 li
371.75 247.25 li
371.75 238.25 li
ef
351.75 226.5 mo
347.25 226.5 li
347.25 235.5 li
356.25 235.5 li
356.25 226.5 li
ef
335 214 mo
330.5 214 li
330.5 223 li
339.5 223 li
339.5 214 li
ef
316.5 201 mo
312 201 li
312 210 li
321 210 li
321 201 li
ef
298.75 189.25 mo
294.25 189.25 li
294.25 198.25 li
303.25 198.25 li
303.25 189.25 li
ef
281.5 178.5 mo
277 178.5 li
277 187.5 li
286 187.5 li
286 178.5 li
ef
262.5 167.25 mo
258 167.25 li
258 176.25 li
267 176.25 li
267 167.25 li
ef
241.25 154.75 mo
236.75 154.75 li
236.75 163.75 li
245.75 163.75 li
245.75 154.75 li
ef
222 144 mo
217.5 144 li
217.5 153 li
226.5 153 li
226.5 144 li
ef
204.25 133.75 mo
199.75 133.75 li
199.75 142.75 li
208.75 142.75 li
208.75 133.75 li
ef
184.75 123.25 mo
180.25 123.25 li
180.25 132.25 li
189.25 132.25 li
189.25 123.25 li
ef
162.5 111.25 mo
158 111.25 li
158 120.25 li
167 120.25 li
167 111.25 li
ef
137 98 mo
132.5 98 li
132.5 107 li
141.5 107 li
141.5 98 li
ef
107.25 83 mo
102.75 83 li
102.75 92 li
111.75 92 li
111.75 83 li
ef
1.5 lw
83.25 88 mo
100.75 97 li
116.75 105.25 li
131.5 113 li
145 120 li
157.5 127 li
169.25 133.5 li
180.25 139.5 li
190.5 145.5 li
200.25 151 li
209.5 156.25 li
218.25 161.5 li
226.5 166.5 li
234.5 171.25 li
242.25 176 li
249.5 180.5 li
256.5 185 li
263.25 189.25 li
269.75 193.75 li
276 198 li
282.25 202 li
288 206 li
293.75 210 li
299.25 214 li
304.5 217.75 li
309.75 221.75 li
314.75 225.5 li
319.5 229.25 li
324.25 233.5 li
329 236.75 li
333.5 240.5 li
337.75 244.5 li
342 248 li
346.25 251.75 li
350.25 255.25 li
354.25 259.25 li
358.25 262.75 li
362 266.25 li
365.75 270 li
369.5 273.5 li
373 277.5 li
376.5 281.25 li
380 285 li
383.25 288.75 li
386.75 292.25 li
390 296 li
393.25 300 li
396.25 303.75 li
399.25 307.5 li
402.25 311.5 li
1 0 0 rgb
@
402.25 311.5 mo
405.25 315.75 li
408.25 319.25 li
411.25 323.75 li
414 327.5 li
416.75 331.5 li
419.5 335.75 li
422.25 340 li
424.75 344.25 li
426.75 346.75 li
427.5 348 li
430 353 li
432.5 356.75 li
434.75 360.75 li
435.25 361.5 li
437.5 366.5 li
438.5 368 li
439.75 370 li
440 370.25 li
442.5 375.5 li
444.75 380.25 li
447.25 385 li
449.5 390.5 li
451 393.75 li
451.75 395.25 li
454 401 li
454 401.25 li
455 403.25 li
456 405.5 li
456.25 406 li
457.5 409.5 li
458.5 411.75 li
460.5 417.75 li
462 421.25 li
462.75 423 li
463.75 426 li
464.75 429.25 li
464.75 430 li
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
435 366.75 mo
430.5 366.75 li
430.5 375.75 li
439.5 375.75 li
439.5 366.75 li
cp
@
409.5 321.25 mo
405 321.25 li
405 330.25 li
414 330.25 li
414 321.25 li
cp
@
392.25 299.25 mo
387.75 299.25 li
387.75 308.25 li
396.75 308.25 li
396.75 299.25 li
cp
@
375.75 279 mo
371.25 279 li
371.25 288 li
380.25 288 li
380.25 279 li
cp
@
357.25 260.75 mo
352.75 260.75 li
352.75 269.75 li
361.75 269.75 li
361.75 260.75 li
cp
@
336.75 241.5 mo
332.25 241.5 li
332.25 250.5 li
341.25 250.5 li
341.25 241.5 li
cp
@
316.25 224.25 mo
311.75 224.25 li
311.75 233.25 li
320.75 233.25 li
320.75 224.25 li
cp
@
298.5 210.5 mo
294 210.5 li
294 219.5 li
303 219.5 li
303 210.5 li
cp
@
281.5 198.5 mo
277 198.5 li
277 207.5 li
286 207.5 li
286 198.5 li
cp
@
262.5 185.75 mo
258 185.75 li
258 194.75 li
267 194.75 li
267 185.75 li
cp
@
241.25 172 mo
236.75 172 li
236.75 181 li
245.75 181 li
245.75 172 li
cp
@
222 160.5 mo
217.5 160.5 li
217.5 169.5 li
226.5 169.5 li
226.5 160.5 li
cp
@
204.25 150 mo
199.75 150 li
199.75 159 li
208.75 159 li
208.75 150 li
cp
@
184.75 138.5 mo
180.25 138.5 li
180.25 147.5 li
189.25 147.5 li
189.25 138.5 li
cp
@
162.5 126 mo
158 126 li
158 135 li
167 135 li
167 126 li
cp
@
137 112.25 mo
132.5 112.25 li
132.5 121.25 li
141.5 121.25 li
141.5 112.25 li
cp
@
107.25 96 mo
102.75 96 li
102.75 105 li
111.75 105 li
111.75 96 li
cp
@
1.5 lw
83.25 102 mo
100.75 111.5 li
116.75 120 li
131.5 128.25 li
145 136 li
157.5 143.25 li
169.25 150 li
180.25 156.5 li
190.5 163 li
200.25 169 li
209.5 175 li
218.25 181 li
226.5 186.25 li
234.5 192 li
242.25 197.5 li
249.5 202.75 li
256.5 208 li
263.25 213.25 li
269.75 218.5 li
276 223.5 li
282.25 228.5 li
288 233.75 li
293.75 238.5 li
299.25 243.75 li
304.5 249.25 li
309.75 254 li
314.75 258.75 li
319.5 264 li
324.25 269.75 li
329 274.25 li
333.5 280 li
337.75 284.75 li
342 290 li
346.25 295.5 li
350.25 301 li
354.25 306.75 li
358.25 312 li
362 317.75 li
365.75 323.75 li
369.5 329 li
373 335.5 li
374.5 336.75 li
376 338 li
376.5 339 li
380 348.25 li
382 352 li
383.25 354.5 li
386.75 360.5 li
390 368.25 li
393.25 374.5 li
396.25 382.5 li
399 388.25 li
399.25 389 li
401 393.75 li
402.25 398.25 li
1 0 0 rgb
@
402.25 398.25 mo
404 402.75 li
405.25 406.25 li
407 411 li
407.75 412.75 li
408.25 414.75 li
408.75 416.5 li
411.25 425 li
411.75 427.25 li
413.5 432.75 li
414 434 li
415 437.5 li
416 441.25 li
416.75 443.75 li
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
393.75 377.25 mo
389.25 386.25 li
398.25 386.25 li
ef
371.75 333.25 mo
367.25 342.25 li
376.25 342.25 li
ef
353 303.5 mo
348.5 312.5 li
357.5 312.5 li
ef
334.75 279 mo
330.25 288 li
339.25 288 li
ef
319 261.25 mo
314.5 270.25 li
323.5 270.25 li
ef
303.75 245.5 mo
299.25 254.5 li
308.25 254.5 li
ef
283.75 227 mo
279.25 236 li
288.25 236 li
ef
262.5 209 mo
258 218 li
267 218 li
ef
241.25 193 mo
236.75 202 li
245.75 202 li
ef
222 179.5 mo
217.5 188.5 li
226.5 188.5 li
ef
204.25 167.5 mo
199.75 176.5 li
208.75 176.5 li
ef
184.5 155 mo
180 164 li
189 164 li
ef
162.5 141.75 mo
158 150.75 li
167 150.75 li
ef
137 127.25 mo
132.5 136.25 li
141.5 136.25 li
ef
107.25 110.75 mo
102.75 119.75 li
111.75 119.75 li
ef
1.5 lw
83.25 118.5 mo
100.75 128.5 li
116.75 138 li
131.5 147 li
145 155.25 li
157.5 163.5 li
169.25 171.25 li
180.25 179 li
190.5 186.5 li
200.25 194 li
209.5 201.25 li
218.25 208.5 li
226.5 215.75 li
234.5 222.75 li
242.25 230 li
249.5 237.25 li
256.5 244.25 li
263.25 251.5 li
269.75 259 li
276 266.25 li
282.25 274 li
288 281.75 li
293.75 289.75 li
299.25 297.5 li
304.5 306 li
309.75 314.25 li
314.75 323 li
319.5 332.25 li
324.25 341.25 li
329 352.25 li
333.5 362.5 li
337.75 373.25 li
342 385.25 li
346.25 398.25 li
349.5 409 li
350.25 412 li
354.25 429.5 li
356.5 438.25 li
358 443.75 li
358.25 445.5 li
359.75 453.5 li
361.5 462.75 li
362 466.75 li
1 0 0 rgb
@
0.75 lw
321.5 346.75 mo
321.5 348 li
0 gry
@
318.75 348 mo
324.5 348 li
@
344.25 388.75 mo
344.25 388.5 li
@
341.25 388.5 mo
347 388.5 li
@
344.25 400.25 mo
344.25 405.75 li
@
341.25 405.75 mo
347 405.75 li
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
344.25 390 mo
339.75 399 li
348.75 399 li
cp
@
321.5 336.5 mo
317 345.5 li
326 345.5 li
cp
@
303.5 305.25 mo
299 314.25 li
308 314.25 li
cp
@
287 281.25 mo
282.5 290.25 li
291.5 290.25 li
cp
@
268.75 257.25 mo
264.25 266.25 li
273.25 266.25 li
cp
@
252.5 239.25 mo
248 248.25 li
257 248.25 li
cp
@
237.75 224.75 mo
233.25 233.75 li
242.25 233.75 li
cp
@
221.75 209.75 mo
217.25 218.75 li
226.25 218.75 li
cp
@
204.25 195.25 mo
199.75 204.25 li
208.75 204.25 li
cp
@
184.5 179.75 mo
180 188.75 li
189 188.75 li
cp
@
162.25 164 mo
157.75 173 li
166.75 173 li
cp
@
137 146.75 mo
132.5 155.75 li
141.5 155.75 li
cp
@
107.25 129 mo
102.75 138 li
111.75 138 li
cp
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 5028 28 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>Helvetica AddT42Char 
1 5688 32 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>Helvetica AddT42Char 
2 372 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/nine 28 def
/equal 32 def
/s 86 def
end
Helvetica /Encoding get
dup 57 /nine put
dup 61 /equal put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 9{/.notdef}rp /G 12{/.notdef}rp /T /.notdef /V 11{/.notdef}rp /b /.notdef /d /e 10{/.notdef}rp /p 2{/.notdef}rp /s 4{/.notdef}rp /x /y 2{/.notdef}rp /bar 131{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf119 288 mo( = 1.96 TeV)[6.34654 13.3323 6.34654 12.6931 6.34654 12.6931 12.6931 6.34654 13.9485 12.6931 0 ]xsh107.5 288 mo(s)sh1.5 lw
96 275.75 mo
105.5 289 li
@
105.5 289 mo
105.5 269 li
@
105.5 269 mo
119 269 li
@
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 7156 38 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>Helvetica AddT42Char 
1 7444 39 <000200a50000056305bd000d00180067401f871196120232080b1e0f0200
1e17080831131a1a0d250e19191ad6217689182b2b4ef44dfd4e10f64ded
003ffd3ffd3130437940260116112515260607050704070307020705060a
10083201011608320109120b320107140032002b2b012b2b2a2b2b815d25
32373637363736351002232111032120171611140702290102d06541744a
3b1a0fd9f1fe9fc80253012fa795589bfe86fdafaa15276f598b53470111
012efb980513d7c2fed1eabdfeb20000>Helvetica AddT42Char 
1 8748 47 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>Helvetica AddT42Char 
1 9108 49 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>Helvetica AddT42Char 
1 9280 50 <00030050ffd505e805e5000f001b001c008a402c8705c700c701c302c808
c90a064308153a0f031b3a07091c021c1c0b1231031a1e18310b191d1ed8
216a66182b2b4ef44ded4e10f64ded12392f003f3fed3fed313043794032
001a0d26012509250526160e18320014001232011a081832001006123201
170c1532011302153201190a1b320011041b32002b2b2b2b012b2b2b2b2b
2b2b2b81005d001716111007022120272611103712210012351000232200
1114122103049bbb92a7c4fe95feadc2ad94be0174011bebfef1ebe4fee0
f701150e05e5fac3fed0feb7daff00e0d8014a012ad40110faa20179f501
03013cfec7fecff4feb1055e>Helvetica AddT42Char 
1 9704 52 <00020050ff8b05e805e50015002700e4406b69036a1579038513961bc71b
064a1c591b5a1c64157515781cb719c81a083808181b021b191901151a1b
1a1a1a0001190100191e121a1a00191a191a1b18150206240001111e1500
02050d191a1b18042127213a0d03273a0105091e31111a29243109192829
d8216a66182b2b4ef44ded4e10f64ded003f33ed3fed1112173911123939
39011112393912173908872e2b087d10c50187102b3c2b3c87102bc42b3c
313018437940281f2606100b260f250725220c243200200e1e3201260624
3200230a2132011f102132012508273200002b2b2b012b2b2b2b2b2b8181
015d005d2507270e01232027261110371221201716111407060704363727
371736123510002322001110002105dc64e352bf71feaac2ab94be017401
85bb9223357efe576c28a164c05b41fef1ebeefeea010b01020479ad2d36
e0da0148012ad40110fac3fed08e83c87e1a11197e7b9568010276010301
3cfed1fec5fef7fec6000000>Helvetica AddT42Char 
1 10076 53 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>Helvetica AddT42Char 
1 13324 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>Helvetica AddT42Char 
1 14204 73 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>Helvetica AddT42Char 
1 15600 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>Helvetica AddT42Char 
1 15784 82 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/C 38 def
/D 39 def
/L 47 def
/N 49 def
/O 50 def
/Q 52 def
/R 53 def
/c 70 def
/f 73 def
/n 81 def
/o 82 def
end
Helvetica /Encoding get
dup 67 /C put
dup 68 /D put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 81 /Q put
dup 82 /R put
dup 99 /c put
dup 102 /f put
dup 110 /n put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 5{/.notdef}rp /C /D 2{/.notdef}rp /G 4{/.notdef}rp /L /.notdef /N /O /.notdef /Q /R /.notdef /T /.notdef /V 11{/.notdef}rp /b /c /d /e /f 7{/.notdef}rp /n /o /p 2{/.notdef}rp /s 4{/.notdef}rp /x /y 2{/.notdef}rp /bar 131{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf203.5 310 mo(-1)[5.06801 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf96 320.5 mo(L = 0.70 fb)[12.6931 6.34654 13.3323 6.34654 12.6931 6.34654 12.6931 12.6931 6.34654 6.34654 0 ]xsh146.5 352.75 mo( = 0.7)[6.34654 13.3323 6.34654 12.6931 6.34654 0 ]xshMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf113.25 357.5 mo(cone)[7.6098 8.4621 8.46208 0 ]xshMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf96 352.75 mo(R)sh142.75 393.75 mo(NLO pQCD)[16.4824 12.6931 17.7612 6.34654 12.6931 17.7612 16.4824 0 ]xsh103.5 386.25 mo
136.25 386.25 li
1 0 0 rgb
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2452 14 <0001005c0000046f0415000b0037401c037a050220080b7a0a0a0d17171a
067a040920030a7a00190c3f52182b4e10f44df43cfd3cf44e456544e600
3f4df43cfd3cf431301335211133112115211123115c01b4ab01b4fe4cab
01b6a801b7fe49a8fe4a01b60000>Helvetica AddT42Char 
1 7640 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>Helvetica AddT42Char 
1 7776 41 <000100af000004aa05bd000900394018071e040409031e0100020908066b
011a0b03082500190a0bb80157b32195dc182b2b4ef44dfd3c4e10f64de4
003f3f3ced12392ffd313013211521112115211123af03fbfccc02d1fd2f
c705bdb4fe42affd6400>Helvetica AddT42Char 
1 8324 44 <000100c90000019205bd00030017b8002b2bba00010000002e2b00b80000
2fb800022f303113331123c9c9c905bdfa43>Helvetica AddT42Char 
1 8828 48 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>Helvetica AddT42Char 
1 12708 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>Helvetica AddT42Char 
1 14852 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>Helvetica AddT42Char 
2 232 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>Helvetica AddT42Char 
2 820 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>Helvetica AddT42Char 
2 980 88 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>Helvetica AddT42Char 
2 1160 89 <0001000b000003ea042f00060102402e4201c50102006700680268036706
87048805a700a802084700480245044a0586048905c704c8050849287328
0708b80109b321677e182b2b4b5279b8ff70b40105042004b80183b70303
6d1202010205b80183401e06066d12000001050604030101050203060300
0605040a0817171a03af02ba018400000184b301af0619194ef4184dfde0
e0fd194e456544e618003f3c3f173c1239011112391239074d2e2b104ee4
4d072e2b104ee44d2b4b5179402502291203030400291206060501050203
0603000605040a0817171a020403af050001af0619194ef4184dfd3939fd
3939194e456544e618003f3c3f173c12390507102b07102b313001715d00
5d7113090133012301dc011e012bc5fe6cc0fe75042ffc980368fbd1042f
>Helvetica AddT42Char 
2 8376 145 <00030042ffd505e805e6000b00270032012e40a01718182647004a285700
5928573107180e171c4a09470b54005b09570f591d57255a285631593267
0b770b0e3208181d321d0e1d311d19190d0a1e1b1d271d0b1d1a0c0e1d1a
0d311d1a1a0e0b1d27271a0e27181b041f1132310b0a042e06181b0e2704
152331320a0b04022b190d191a0de0120c0c1a0d0c1a182b3a150319030c
090d27023a2309191a1b0306311f1a340c2e31113b0d193334d8216a6618
2b2b4ef44df4fd394e10f64dfd1739003fed39393f3f3fed393908872e2b
087d10c500111217391112173901111217391112173907102b3c07102b3c
072b3c872bc42bc42bc42b3c87102bc42bc42bc42b3c313018437940222c
2d2022121403051326212604252c142e320003220632012d122b32010520
023200002b2b012b2b2b2b2b81818181015d005d24163320373635342726
270901273726023510371221321617371707161716151007062122272627
002726232200111416170101f9a48f010c8361261529fcfefece42af524f
9cbe0163b1f7529a409d392f3ccdc8fec7bb8957520312396784e1fee428
350307d14ae0a6e8826d3b46fcb2fec53eb46b010b930130d80107594da5
3dad466b93bffe94ded93f284d045c1c33fec5fed15fc04f034e>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/plus 14 def
/E 40 def
/F 41 def
/I 44 def
/M 48 def
/a 68 def
/i 76 def
/r 85 def
/t 87 def
/u 88 def
/v 89 def
/Oslash 145 def
end
Helvetica /Encoding get
dup 43 /plus put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 97 /a put
dup 105 /i put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 175 /Oslash put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MOQTAH+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 5{/.notdef}rp /C /D /E /F /G /.notdef /I 2{/.notdef}rp /L /M /N /O /.notdef /Q /R /.notdef /T /.notdef /V 10{/.notdef}rp /a /b /c /d /e /f 2{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u /v /.notdef /x /y 2{/.notdef}rp /bar 50{/.notdef}rp /Oslash 80{/.notdef}rp]MOQTAH+Helvetica nfMOQTAH+Helvetica*1 [18.0732 0 0 -18.0732 0 0 ]msf96 418.5 mo(+non-perturbative corrections)[10.5547 10.0487 10.0487 10.0487 6.01823 10.0487 10.0487 6.01823 5.02434 10.0487 6.01823 10.0487 10.0487 5.02435 4.01196 9.03661 10.0487 5.02435 9.03659 10.0487 6.01825 6.01825 10.0487 9.03659 5.02435 4.01196 10.0487 10.0487 0 ]xshMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf336.75 468 mo(T)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf298.75 456.5 mo( = p)[6.34656 13.3323 6.34656 0 ]xshMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf289.25 468.75 mo(F)shtrue set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)systemdict beginMOQTAI+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/mu <1C60D8A8C9B7FBE1FE4184A63AD3BFC867589BB8491A52E161D4AA12837AECA794260C7D1E68A550829D6CDF5F145C34E5905B94507A2298B5F280D6193BAB1BD404788A8A5B1800B72A6BCA896C2F0F3B56FED2809B2387DA5A2C1CBB79CAA94721CC40188B2954396E231A4D07632E946CFC1BEF0579A1108E8CE0CF4237E9A76292CF2525CDABA2C2EE9CB263C36A613B85E9CBB30D329CEC5C715B94DC8938C4ECD83BF1DE075DC5192F4889> |-systemdict /gcheck known {setglobal} if end {end} ifendMOQTAI+Symbol /Encoding getdup 109 /mu putpop%ADOEndSubsetFont
reset_gvm
/MOQTAI+Symbol*1 [109{/.notdef}rp /mu 5{/.notdef}rp /sigma 140{/.notdef}rp]MOQTAI+Symbol nfMOQTAI+Symbol*1 [22.8293 0 0 -22.8293 0 0 ]msf275.75 456.5 mo(m)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf251 456.5 mo( = )[6.34656 13.3323 0 ]xshMOQTAH+Helvetica*1 [15.2196 0 0 -15.2196 0 0 ]msf239.75 468.75 mo(R)shMOQTAI+Symbol*1 [22.8293 0 0 -22.8293 0 0 ]msf226.5 456.5 mo(m)shMOQTAH+Helvetica*1 [22.8293 0 0 -22.8293 0 0 ]msf96 456.5 mo(CTEQ6.5M)[16.4824 13.9485 15.227 17.7612 12.6931 6.34654 12.6931 0 ]xsh509.75 507 mo(600)[12.6931 12.6931 0 ]xsh96 38 mo(D\257 Run II)[16.4824 17.7612 6.34654 16.4824 12.6931 12.6931 6.34654 6.34654 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/MOQTAI+Symbol*1 uf/MOQTAI+Symbol uf/Symbol uf/MOQTAH+Helvetica*1 uf/MOQTAH+Helvetica uf/Helvetica ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
