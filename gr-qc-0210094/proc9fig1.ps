%!PS-Adobe-2.0 EPSF-2.0
%%Title: proc9fig1.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Sun Sep 22 10:50:26 2002
%%For: thiemann@localhost.localdomain (Thomas Thiemann)
%%BoundingBox: 0 0 432 242
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 242 moveto 0 0 lineto 432 0 lineto 432 242 lineto closepath clip newpath
-146.0 338.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% crosshatch lines
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<ffff111111111111ffff111111111111ffff111111111111
	ffff111111111111>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P11 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
30.000 slw
% Ellipse
n 4200 4800 75 75 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P11 [16 0 0 -16 275.00 315.00] PATmp PATsp ef gr PATusp gs col4 s gr

% Ellipse
n 7800 4800 75 75 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P11 [16 0 0 -16 515.00 315.00] PATmp PATsp ef gr PATusp gs col4 s gr

% Polyline
n 2475 4800 m
 9600 4800 l gs col2 s gr 
% Polyline
2 slj
n 4200 4800 m 4200 4798 l 4199 4793 l 4198 4785 l 4196 4774 l 4195 4760 l
 4193 4744 l 4192 4726 l 4191 4706 l 4190 4685 l 4191 4662 l
 4192 4636 l 4195 4607 l 4200 4575 l 4206 4544 l 4211 4516 l
 4215 4494 l 4218 4477 l 4219 4466 l 4219 4457 l 4219 4450 l
 4219 4443 l 4220 4435 l 4223 4425 l 4230 4411 l 4240 4393 l
 4255 4372 l 4275 4350 l 4297 4330 l 4319 4315 l 4338 4304 l
 4354 4296 l 4367 4292 l 4378 4289 l 4388 4287 l 4397 4286 l
 4408 4285 l 4421 4284 l 4437 4281 l 4456 4279 l 4478 4276 l
 4500 4275 l 4517 4276 l 4531 4278 l 4542 4281 l 4549 4284 l
 4553 4287 l 4556 4289 l 4556 4291 l 4556 4294 l 4556 4296 l
 4556 4299 l 4556 4303 l 4558 4309 l 4561 4316 l 4565 4325 l
 4570 4337 l 4575 4350 l 4580 4369 l 4584 4386 l 4586 4400 l
 4587 4411 l 4587 4419 l 4587 4425 l 4587 4431 l 4587 4439 l
 4586 4450 l 4584 4464 l 4580 4481 l 4575 4500 l 4568 4517 l
 4562 4531 l 4557 4540 l 4553 4545 l 4551 4548 l 4550 4550 l
 4548 4551 l 4545 4553 l 4540 4557 l 4531 4562 l 4517 4568 l
 4500 4575 l 4481 4580 l 4464 4584 l 4451 4586 l 4442 4587 l
 4436 4587 l 4431 4587 l 4426 4587 l 4420 4587 l 4409 4586 l
 4394 4584 l 4374 4580 l 4350 4575 l 4329 4569 l 4311 4564 l
 4296 4561 l 4286 4559 l 4278 4559 l 4273 4561 l 4269 4563 l
 4265 4564 l 4260 4564 l 4253 4561 l 4244 4554 l 4231 4542 l
 4216 4524 l 4200 4500 l 4187 4475 l 4175 4451 l 4166 4428 l
 4159 4407 l 4153 4390 l 4149 4375 l 4146 4362 l 4144 4350 l
 4141 4338 l 4139 4325 l 4137 4310 l 4134 4293 l 4131 4272 l
 4128 4249 l 4126 4225 l 4125 4200 l 4126 4176 l 4129 4158 l
 4132 4148 l 4136 4143 l 4139 4143 l 4141 4146 l 4144 4150 l
 4147 4155 l 4150 4158 l 4156 4160 l 4163 4157 l 4172 4151 l
 4185 4140 l 4200 4125 l 4216 4109 l 4231 4094 l 4242 4083 l
 4249 4076 l 4253 4072 l 4255 4070 l 4256 4069 l 4258 4067 l
 4261 4064 l 4267 4058 l 4278 4047 l 4296 4029 l 4320 4005 l
 4350 3975 l 4373 3952 l 4395 3929 l 4416 3907 l 4435 3887 l
 4450 3869 l 4464 3852 l 4475 3838 l 4484 3824 l 4492 3812 l
 4500 3800 l 4508 3788 l 4516 3777 l 4525 3765 l 4536 3752 l
 4550 3739 l 4565 3725 l 4584 3710 l 4605 3697 l 4627 3684 l
 4650 3675 l 4670 3670 l 4687 3668 l 4703 3668 l 4715 3670 l
 4725 3673 l 4733 3677 l 4739 3681 l 4743 3685 l 4746 3690 l
 4748 3695 l 4750 3700 l 4751 3706 l 4753 3712 l 4755 3718 l
 4758 3726 l 4761 3735 l 4766 3745 l 4771 3757 l 4778 3771 l
 4785 3787 l 4793 3805 l 4800 3825 l 4808 3854 l 4815 3882 l
 4819 3907 l 4823 3930 l 4826 3949 l 4828 3966 l 4830 3980 l
 4831 3994 l 4832 4007 l 4833 4021 l 4832 4036 l 4831 4052 l
 4827 4070 l 4821 4090 l 4812 4109 l 4800 4125 l 4785 4136 l
 4769 4142 l 4754 4144 l 4741 4144 l 4730 4141 l 4721 4136 l
 4713 4131 l 4706 4125 l 4699 4118 l 4690 4111 l 4680 4104 l
 4666 4095 l 4649 4086 l 4628 4075 l 4603 4063 l 4575 4050 l
 4547 4036 l 4522 4023 l 4501 4012 l 4484 4004 l 4470 3999 l
 4460 3996 l 4451 3995 l 4444 3994 l 4437 3993 l 4429 3990 l
 4420 3986 l 4409 3978 l 4396 3966 l 4381 3949 l 4365 3927 l
 4350 3900 l 4338 3871 l 4329 3844 l 4324 3820 l 4321 3800 l
 4320 3783 l 4321 3770 l 4323 3760 l 4325 3750 l 4328 3740 l
 4331 3730 l 4334 3717 l 4336 3700 l 4339 3680 l 4342 3656 l
 4346 3629 l 4350 3600 l 4357 3566 l 4363 3540 l 4368 3523 l
 4372 3515 l 4374 3512 l 4375 3513 l 4377 3513 l 4380 3511 l
 4385 3505 l 4394 3493 l 4408 3474 l 4425 3450 l 4441 3429 l
 4456 3411 l 4468 3397 l 4476 3388 l 4482 3381 l 4485 3378 l
 4488 3375 l 4490 3372 l 4494 3369 l 4501 3362 l 4512 3353 l
 4528 3339 l 4550 3321 l 4575 3300 l 4598 3282 l 4620 3265 l
 4639 3251 l 4654 3239 l 4666 3230 l 4675 3223 l 4682 3217 l
 4688 3213 l 4693 3208 l 4700 3203 l 4709 3197 l 4721 3190 l
 4736 3181 l 4755 3171 l 4777 3160 l 4800 3150 l 4829 3140 l
 4852 3134 l 4866 3132 l 4873 3132 l 4875 3134 l 4875 3138 l
 4875 3141 l 4877 3144 l 4884 3147 l 4898 3149 l 4921 3150 l
 4950 3150 l 4977 3150 l 5001 3150 l 5022 3150 l 5038 3150 l
 5051 3150 l 5060 3150 l 5069 3150 l 5077 3150 l 5086 3150 l
 5098 3150 l 5113 3150 l 5131 3150 l 5153 3150 l 5175 3150 l
 5206 3150 l 5222 3149 l 5227 3146 l 5225 3144 l 5222 3141 l
 5224 3141 l 5233 3143 l 5250 3150 l 5262 3157 l 5272 3163 l
 5280 3168 l 5286 3172 l 5290 3174 l 5294 3175 l 5297 3177 l
 5301 3180 l 5305 3185 l 5311 3194 l 5318 3208 l 5325 3225 l
 5330 3244 l 5334 3261 l 5336 3274 l 5337 3283 l 5337 3289 l
 5337 3294 l 5337 3299 l 5337 3305 l 5336 3316 l 5334 3331 l
 5330 3351 l 5325 3375 l 5318 3399 l 5312 3420 l 5307 3436 l
 5303 3447 l 5301 3456 l 5300 3463 l 5298 3469 l 5295 3476 l
 5290 3485 l 5281 3497 l 5267 3511 l 5250 3525 l 5234 3534 l
 5219 3540 l 5206 3544 l 5197 3546 l 5190 3546 l 5185 3545 l
 5181 3544 l 5177 3542 l 5172 3540 l 5164 3538 l 5154 3536 l
 5139 3533 l 5121 3530 l 5100 3525 l 5079 3519 l 5061 3514 l
 5046 3510 l 5036 3507 l 5028 3506 l 5023 3506 l 5019 3506 l
 5015 3506 l 5010 3505 l 5003 3502 l 4994 3495 l 4981 3485 l
 4966 3470 l 4950 3450 l 4935 3428 l 4922 3407 l 4913 3390 l
 4906 3377 l 4900 3368 l 4897 3361 l 4894 3356 l 4891 3351 l
 4889 3343 l 4886 3332 l 4882 3315 l 4879 3291 l 4876 3261 l
 4875 3225 l 4876 3192 l 4878 3162 l 4880 3136 l 4881 3115 l
 4882 3099 l 4882 3087 l 4882 3077 l 4881 3069 l 4881 3061 l
 4882 3051 l 4885 3039 l 4890 3024 l 4899 3005 l 4911 2981 l
 4929 2954 l 4950 2925 l 4972 2901 l 4993 2881 l 5013 2865 l
 5030 2853 l 5043 2845 l 5054 2840 l 5062 2838 l 5069 2837 l
 5075 2838 l 5081 2838 l 5089 2838 l 5099 2836 l 5112 2833 l
 5130 2827 l 5152 2818 l 5180 2806 l 5213 2791 l 5250 2775 l
 5284 2760 l 5316 2746 l 5344 2734 l 5369 2723 l 5389 2714 l
 5405 2707 l 5418 2701 l 5428 2696 l 5436 2691 l 5444 2687 l
 5451 2684 l 5459 2680 l 5469 2675 l 5482 2670 l 5497 2665 l
 5516 2658 l 5539 2650 l 5565 2642 l 5595 2633 l 5625 2625 l
 5665 2616 l 5698 2610 l 5722 2606 l 5737 2604 l 5745 2604 l
 5749 2605 l 5750 2606 l 5751 2608 l 5754 2610 l 5760 2612 l
 5773 2614 l 5792 2617 l 5819 2620 l 5850 2625 l 5881 2631 l
 5909 2636 l 5932 2640 l 5950 2643 l 5963 2644 l 5973 2644 l
 5981 2644 l 5989 2644 l 5998 2645 l 6009 2648 l 6023 2655 l
 6039 2665 l 6057 2680 l 6075 2700 l 6086 2717 l 6095 2734 l
 6101 2750 l 6105 2764 l 6108 2776 l 6110 2785 l 6112 2793 l
 6112 2800 l 6113 2806 l 6112 2813 l 6112 2820 l 6110 2828 l
 6108 2838 l 6105 2851 l 6101 2866 l 6095 2884 l 6086 2904 l
 6075 2925 l 6061 2945 l 6047 2963 l 6033 2979 l 6021 2991 l
 6011 3001 l 6002 3009 l 5994 3016 l 5987 3021 l 5981 3025 l
 5975 3029 l 5967 3033 l 5959 3038 l 5948 3043 l 5934 3049 l
 5917 3056 l 5897 3063 l 5875 3070 l 5850 3075 l 5819 3078 l
 5791 3078 l 5769 3076 l 5752 3072 l 5741 3067 l 5732 3062 l
 5725 3056 l 5718 3050 l 5710 3044 l 5700 3037 l 5686 3029 l
 5668 3020 l 5647 3011 l 5625 3000 l 5603 2988 l 5586 2978 l
 5576 2971 l 5571 2967 l 5569 2964 l 5569 2962 l 5569 2961 l
 5569 2958 l 5567 2954 l 5563 2947 l 5557 2937 l 5550 2925 l
 5545 2913 l 5541 2905 l 5539 2900 l 5538 2900 l 5538 2902 l
 5538 2906 l 5538 2910 l 5539 2907 l 5541 2896 l 5545 2878 l
 5550 2850 l 5555 2825 l 5560 2801 l 5563 2778 l 5564 2759 l
 5564 2742 l 5562 2729 l 5559 2717 l 5556 2706 l 5554 2695 l
 5552 2683 l 5553 2669 l 5558 2652 l 5566 2631 l 5580 2606 l
 5599 2579 l 5625 2550 l 5646 2530 l 5668 2512 l 5688 2497 l
 5707 2484 l 5722 2473 l 5735 2463 l 5745 2456 l 5753 2450 l
 5759 2445 l 5764 2441 l 5769 2437 l 5774 2434 l 5780 2431 l
 5788 2428 l 5799 2424 l 5813 2420 l 5831 2416 l 5855 2412 l
 5884 2408 l 5918 2404 l 5957 2401 l 6000 2400 l 6041 2401 l
 6081 2403 l 6120 2407 l 6154 2411 l 6186 2415 l 6213 2420 l
 6237 2424 l 6257 2428 l 6275 2432 l 6291 2436 l 6305 2440 l
 6319 2444 l 6332 2448 l 6346 2452 l 6361 2457 l 6378 2463 l
 6397 2469 l 6419 2477 l 6444 2486 l 6471 2496 l 6502 2507 l
 6534 2520 l 6568 2535 l 6600 2550 l 6638 2571 l 6670 2591 l
 6693 2608 l 6708 2622 l 6717 2633 l 6721 2641 l 6720 2647 l
 6717 2652 l 6712 2656 l 6707 2660 l 6703 2665 l 6700 2672 l
 6700 2681 l 6702 2693 l 6709 2709 l 6720 2728 l 6734 2750 l
 6750 2775 l 6768 2803 l 6785 2827 l 6799 2847 l 6811 2862 l
 6820 2873 l 6827 2880 l 6833 2884 l 6838 2888 l 6842 2891 l
 6847 2895 l 6853 2902 l 6860 2913 l 6869 2928 l 6879 2948 l
 6890 2972 l 6900 3000 l 6909 3031 l 6916 3059 l 6920 3080 l
 6922 3096 l 6924 3106 l 6925 3113 l 6925 3119 l 6925 3124 l
 6924 3131 l 6922 3141 l 6920 3155 l 6916 3174 l 6909 3198 l
 6900 3225 l 6888 3250 l 6876 3272 l 6865 3288 l 6856 3299 l
 6849 3306 l 6843 3310 l 6837 3313 l 6832 3315 l 6825 3318 l
 6816 3324 l 6805 3332 l 6790 3344 l 6771 3359 l 6750 3375 l
 6729 3390 l 6711 3403 l 6697 3413 l 6688 3421 l 6681 3428 l
 6678 3433 l 6675 3438 l 6672 3441 l 6669 3445 l 6662 3449 l
 6653 3452 l 6639 3453 l 6621 3453 l 6600 3450 l 6582 3444 l
 6565 3436 l 6551 3429 l 6541 3423 l 6532 3417 l 6527 3413 l
 6522 3410 l 6519 3406 l 6515 3403 l 6511 3398 l 6506 3391 l
 6499 3381 l 6489 3367 l 6478 3349 l 6464 3327 l 6450 3300 l
 6437 3271 l 6425 3244 l 6415 3220 l 6407 3200 l 6401 3183 l
 6396 3170 l 6391 3160 l 6388 3150 l 6384 3140 l 6381 3130 l
 6378 3117 l 6375 3100 l 6373 3080 l 6371 3056 l 6372 3029 l
 6375 3000 l 6382 2970 l 6392 2946 l 6402 2928 l 6412 2917 l
 6421 2911 l 6429 2908 l 6438 2906 l 6446 2905 l 6455 2903 l
 6466 2899 l 6478 2892 l 6493 2881 l 6509 2866 l 6525 2850 l
 6542 2833 l 6554 2819 l 6560 2810 l 6562 2805 l 6560 2802 l
 6556 2800 l 6553 2799 l 6551 2797 l 6554 2793 l 6562 2788 l
 6578 2782 l 6600 2775 l 6622 2770 l 6643 2767 l 6659 2765 l
 6671 2764 l 6679 2763 l 6684 2763 l 6688 2763 l 6692 2763 l
 6698 2763 l 6709 2764 l 6726 2765 l 6751 2767 l 6785 2770 l
 6825 2775 l 6859 2779 l 6891 2784 l 6921 2788 l 6946 2791 l
 6968 2793 l 6985 2794 l 7000 2794 l 7013 2794 l 7025 2794 l
 7037 2794 l 7049 2794 l 7063 2796 l 7080 2799 l 7099 2804 l
 7122 2811 l 7147 2821 l 7174 2834 l 7200 2850 l 7225 2869 l
 7245 2888 l 7258 2904 l 7266 2916 l 7269 2924 l 7269 2930 l
 7266 2934 l 7263 2938 l 7258 2941 l 7255 2946 l 7252 2954 l
 7252 2967 l 7254 2984 l 7259 3009 l 7266 3039 l 7275 3075 l
 7283 3109 l 7291 3141 l 7297 3170 l 7303 3195 l 7308 3216 l
 7311 3233 l 7314 3246 l 7317 3258 l 7319 3269 l 7321 3279 l
 7323 3291 l 7326 3304 l 7329 3320 l 7332 3340 l 7336 3363 l
 7341 3391 l 7345 3420 l 7350 3450 l 7354 3481 l 7358 3506 l
 7361 3524 l 7364 3537 l 7366 3545 l 7369 3549 l 7372 3550 l
 7375 3550 l 7377 3549 l 7379 3550 l 7380 3551 l 7379 3556 l
 7376 3563 l 7371 3573 l 7362 3586 l 7350 3600 l 7332 3615 l
 7314 3627 l 7296 3636 l 7280 3642 l 7267 3646 l 7255 3649 l
 7244 3650 l 7233 3651 l 7220 3653 l 7206 3655 l 7189 3659 l
 7169 3663 l 7147 3669 l 7125 3675 l 7111 3678 l 7099 3681 l
 7089 3684 l 7082 3686 l 7078 3689 l 7075 3691 l 7073 3693 l
 7073 3696 l 7074 3698 l 7075 3700 l 7076 3702 l 7077 3704 l
 7078 3705 l 7076 3704 l 7073 3702 l 7069 3698 l 7064 3693 l
 7057 3685 l 7050 3675 l 7039 3657 l 7030 3639 l 7022 3622 l
 7015 3607 l 7009 3595 l 7004 3585 l 7000 3575 l 6996 3565 l
 6992 3554 l 6988 3540 l 6983 3523 l 6979 3502 l 6976 3477 l
 6975 3450 l 6976 3430 l 6977 3412 l 6979 3397 l 6980 3386 l
 6980 3377 l 6979 3371 l 6978 3367 l 6977 3365 l 6975 3362 l
 6974 3361 l 6974 3358 l 6975 3355 l 6978 3350 l 6985 3344 l
 6995 3335 l 7008 3325 l 7027 3313 l 7050 3300 l 7076 3288 l
 7103 3277 l 7128 3267 l 7151 3259 l 7170 3251 l 7187 3244 l
 7201 3237 l 7213 3231 l 7225 3225 l 7237 3220 l 7250 3215 l
 7265 3211 l 7282 3207 l 7304 3206 l 7329 3206 l 7359 3209 l
 7391 3215 l 7425 3225 l 7457 3239 l 7485 3256 l 7508 3273 l
 7526 3289 l 7540 3303 l 7549 3317 l 7555 3328 l 7559 3339 l
 7563 3350 l 7565 3361 l 7569 3373 l 7573 3386 l 7580 3402 l
 7589 3421 l 7601 3443 l 7616 3468 l 7633 3496 l 7650 3525 l
 7670 3561 l 7685 3590 l 7696 3612 l 7704 3626 l 7708 3633 l
 7711 3637 l 7713 3638 l 7714 3638 l 7715 3642 l 7716 3649 l
 7719 3663 l 7721 3685 l 7724 3714 l 7725 3750 l 7724 3783 l
 7722 3813 l 7720 3840 l 7717 3861 l 7716 3878 l 7714 3892 l
 7713 3903 l 7713 3913 l 7711 3922 l 7709 3932 l 7706 3945 l
 7700 3960 l 7693 3979 l 7682 4001 l 7667 4025 l 7650 4050 l
 7631 4072 l 7612 4089 l 7594 4102 l 7580 4111 l 7568 4117 l
 7559 4121 l 7551 4124 l 7544 4125 l 7537 4126 l 7528 4127 l
 7518 4127 l 7506 4128 l 7490 4129 l 7471 4129 l 7449 4128 l
 7425 4125 l 7405 4120 l 7386 4113 l 7370 4106 l 7357 4099 l
 7345 4093 l 7335 4088 l 7327 4083 l 7319 4079 l 7312 4075 l
 7306 4071 l 7300 4066 l 7294 4059 l 7288 4051 l 7283 4041 l
 7278 4029 l 7274 4013 l 7273 3995 l 7275 3975 l 7280 3956 l
 7288 3937 l 7296 3920 l 7304 3903 l 7312 3889 l 7318 3875 l
 7324 3863 l 7329 3852 l 7333 3841 l 7338 3831 l 7342 3822 l
 7348 3812 l 7356 3802 l 7365 3793 l 7378 3783 l 7394 3774 l
 7414 3765 l 7439 3757 l 7468 3752 l 7500 3750 l 7531 3752 l
 7562 3756 l 7592 3762 l 7619 3770 l 7644 3778 l 7665 3786 l
 7685 3794 l 7701 3802 l 7717 3809 l 7731 3817 l 7744 3825 l
 7757 3833 l 7770 3842 l 7785 3851 l 7800 3861 l 7818 3873 l
 7837 3886 l 7858 3901 l 7881 3917 l 7904 3935 l 7928 3955 l
 7950 3975 l 7972 4000 l 7988 4022 l 7999 4041 l 8004 4056 l
 8006 4067 l 8004 4075 l 8000 4081 l 7994 4085 l 7987 4088 l
 7980 4090 l 7973 4094 l 7967 4100 l 7961 4108 l 7956 4119 l
 7953 4134 l 7951 4153 l 7950 4175 l 7950 4200 l 7950 4231 l
 7951 4259 l 7952 4281 l 7954 4298 l 7957 4309 l 7959 4318 l
 7963 4325 l 7965 4332 l 7967 4340 l 7969 4350 l 7968 4364 l
 7965 4382 l 7959 4403 l 7950 4425 l 7936 4447 l 7922 4463 l
 7910 4472 l 7901 4476 l 7894 4477 l 7887 4475 l 7881 4473 l
 7872 4472 l 7861 4474 l 7845 4479 l 7824 4488 l 7800 4500 l
 7776 4512 l 7756 4524 l 7742 4533 l 7733 4542 l 7728 4549 l
 7725 4556 l 7722 4563 l 7717 4569 l 7708 4574 l 7694 4577 l
 7674 4578 l 7650 4575 l 7629 4568 l 7610 4559 l 7595 4549 l
 7584 4540 l 7575 4533 l 7568 4526 l 7562 4519 l 7557 4512 l
 7551 4503 l 7544 4493 l 7535 4481 l 7524 4465 l 7512 4446 l
 7500 4425 l 7492 4407 l 7485 4390 l 7481 4376 l 7477 4366 l
 7474 4357 l 7472 4352 l 7470 4347 l 7469 4344 l 7468 4340 l
 7467 4336 l 7468 4331 l 7469 4324 l 7473 4314 l 7479 4303 l
 7488 4289 l 7500 4275 l 7518 4260 l 7536 4248 l 7554 4239 l
 7570 4233 l 7583 4229 l 7595 4226 l 7606 4225 l 7617 4224 l
 7630 4222 l 7644 4220 l 7661 4216 l 7681 4212 l 7703 4206 l
 7725 4200 l 7739 4197 l 7751 4194 l 7761 4191 l 7768 4189 l
 7772 4186 l 7775 4184 l 7777 4182 l 7777 4179 l 7776 4177 l
 7775 4175 l 7774 4173 l 7773 4171 l 7772 4170 l 7774 4171 l
 7777 4173 l 7781 4177 l 7786 4182 l 7793 4190 l 7800 4200 l
 7811 4218 l 7820 4235 l 7828 4250 l 7835 4262 l 7841 4270 l
 7846 4276 l 7850 4281 l 7854 4287 l 7858 4295 l 7862 4307 l
 7867 4325 l 7871 4351 l 7874 4384 l 7875 4425 l 7874 4459 l
 7872 4493 l 7868 4525 l 7864 4556 l 7858 4585 l 7853 4614 l
 7846 4641 l 7840 4667 l 7833 4692 l 7826 4716 l 7820 4738 l
 7814 4757 l 7809 4773 l 7805 4785 l 7802 4793 l 7801 4798 l

 7800 4800 l gs col1 s gr 
/Times-Roman-iso ff 360.00 scf sf
5625 1875 m
gs 1 -1 sc (p - k) col1 sh gr
/Times-Roman-iso ff 360.00 scf sf
3075 5475 m
gs 1 -1 sc (p) col2 sh gr
/Times-Roman-iso ff 360.00 scf sf
5475 5550 m
gs 1 -1 sc (k) col2 sh gr
/Times-Roman-iso ff 360.00 scf sf
8550 5550 m
gs 1 -1 sc (p) col2 sh gr
$F2psEnd
rs
end
