%!PS-Adobe-2.0 EPSF-2.0
%%Title: frankfurt02fig6.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Tue Jun 11 12:41:23 2002
%%For: thiemann@mim.aei-potsdam.mpg.de (Thomas Thiemann,51,51,none)
%%BoundingBox: 0 0 745 210
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 210 moveto 0 0 lineto 745 0 lineto 745 210 lineto closepath clip newpath
-31.0 223.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/reencdict 12 dict def /ReEncode { reencdict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse } { pop pop } ifelse } forall
newfont /FontName newfontname put newcodesandnames aload pop
128 1 255 { newfont /Encoding get exch /.notdef put } for
newcodesandnames length 2 idiv { newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/isovec [
8#055 /minus 8#200 /grave 8#201 /acute 8#202 /circumflex 8#203 /tilde
8#204 /macron 8#205 /breve 8#206 /dotaccent 8#207 /dieresis
8#210 /ring 8#211 /cedilla 8#212 /hungarumlaut 8#213 /ogonek 8#214 /caron
8#220 /dotlessi 8#230 /oe 8#231 /OE
8#240 /space 8#241 /exclamdown 8#242 /cent 8#243 /sterling
8#244 /currency 8#245 /yen 8#246 /brokenbar 8#247 /section 8#250 /dieresis
8#251 /copyright 8#252 /ordfeminine 8#253 /guillemotleft 8#254 /logicalnot
8#255 /hyphen 8#256 /registered 8#257 /macron 8#260 /degree 8#261 /plusminus
8#262 /twosuperior 8#263 /threesuperior 8#264 /acute 8#265 /mu 8#266 /paragraph
8#267 /periodcentered 8#270 /cedilla 8#271 /onesuperior 8#272 /ordmasculine
8#273 /guillemotright 8#274 /onequarter 8#275 /onehalf
8#276 /threequarters 8#277 /questiondown 8#300 /Agrave 8#301 /Aacute
8#302 /Acircumflex 8#303 /Atilde 8#304 /Adieresis 8#305 /Aring
8#306 /AE 8#307 /Ccedilla 8#310 /Egrave 8#311 /Eacute
8#312 /Ecircumflex 8#313 /Edieresis 8#314 /Igrave 8#315 /Iacute
8#316 /Icircumflex 8#317 /Idieresis 8#320 /Eth 8#321 /Ntilde 8#322 /Ograve
8#323 /Oacute 8#324 /Ocircumflex 8#325 /Otilde 8#326 /Odieresis 8#327 /multiply
8#330 /Oslash 8#331 /Ugrave 8#332 /Uacute 8#333 /Ucircumflex
8#334 /Udieresis 8#335 /Yacute 8#336 /Thorn 8#337 /germandbls 8#340 /agrave
8#341 /aacute 8#342 /acircumflex 8#343 /atilde 8#344 /adieresis 8#345 /aring
8#346 /ae 8#347 /ccedilla 8#350 /egrave 8#351 /eacute
8#352 /ecircumflex 8#353 /edieresis 8#354 /igrave 8#355 /iacute
8#356 /icircumflex 8#357 /idieresis 8#360 /eth 8#361 /ntilde 8#362 /ograve
8#363 /oacute 8#364 /ocircumflex 8#365 /otilde 8#366 /odieresis 8#367 /divide
8#370 /oslash 8#371 /ugrave 8#372 /uacute 8#373 /ucircumflex
8#374 /udieresis 8#375 /yacute 8#376 /thorn 8#377 /ydieresis] def
/Times-Roman /Times-Roman-iso isovec ReEncode
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
45.000 slw
% Ellipse
n 8625 2925 75 75 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 570.00 190.00] PATmp PATsp ef gr PATusp gs col4 s gr

% Ellipse
n 11775 3600 75 75 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 780.00 235.00] PATmp PATsp ef gr PATusp gs col4 s gr

% Ellipse
n 11025 2625 106 106 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 727.93 167.93] PATmp PATsp ef gr PATusp gs col4 s gr

% Ellipse
n 12450 1725 106 106 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 822.93 107.93] PATmp PATsp ef gr PATusp gs col4 s gr

% Ellipse
n 10575 1050 106 106 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 697.93 62.93] PATmp PATsp ef gr PATusp gs col4 s gr

% Polyline
n 2100 1425 m 2475 1425 l
 2475 1800 l gs col4 s gr 
% Polyline
n 1350 900 m 1350 1275 l
 975 1275 l gs col2 s gr 
% Polyline
n 4050 1275 m 4275 1575 l
 4350 1200 l gs col1 s gr 
% Polyline
n 5100 1500 m 5325 1200 l
 5475 1500 l gs col1 s gr 
% Polyline
n 7875 975 m 8625 2925 l 10575 1050 l
 7875 975 l  cp gs col1 s gr 
% Polyline
n 7875 975 m
 9450 1800 l gs col1 s gr 
% Polyline
n 9975 2100 m
 11025 2625 l gs col1 s gr 
% Polyline
n 10575 1050 m 11025 2625 l
 8625 2925 l gs col1 s gr 
% Polyline
n 10575 1050 m 12450 1725 l 11025 2625 l 11775 3600 l
 8625 2925 l gs col1 s gr 
% Polyline
n 7950 1725 m 8250 1950 l
 8325 1650 l gs col1 s gr 
% Polyline
n 8925 1350 m 9150 1650 l
 8850 1650 l gs col1 s gr 
% Polyline
n 9375 825 m 9750 1050 l
 9450 1200 l gs col1 s gr 
% Polyline
n 9750 2550 m 10125 2700 l
 9900 2925 l gs col1 s gr 
% Polyline
n 10050 3450 m 10500 3300 l
 10125 3075 l gs col1 s gr 
% Ellipse
n 7875 975 75 75 0 360 DrawEllipse gs /PC [[1.00 0.00 0.00] [1.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 520.00 60.00] PATmp PATsp ef gr PATusp gs col4 s gr

% Polyline
n 11250 1275 m
 11550 1575 l gs col1 s gr 
/Times-Roman-iso ff 540.00 scf sf
9225 600 m
gs 1 -1 sc (l) col2 sh gr
% Polyline
n 11250 1275 m
 11700 1200 l gs col1 s gr 
% Polyline
n 12075 2175 m 11700 2175 l
 11850 1875 l gs col1 s gr 
% Polyline
n 11175 3075 m 11175 2775 l
 11475 2925 l gs col1 s gr 
% Polyline
n 10650 1875 m 10725 1500 l
 10950 1800 l gs col1 s gr 
% Polyline
2 slj
n 750 975 m 752 975 l 757 976 l 766 976 l 779 978 l 796 979 l
 817 981 l 840 984 l 865 987 l 891 990 l 918 994 l
 946 999 l 974 1004 l 1003 1011 l 1033 1018 l 1064 1028 l
 1095 1038 l 1125 1050 l 1156 1064 l 1180 1077 l 1198 1087 l
 1209 1094 l 1215 1099 l 1217 1100 l 1215 1101 l 1213 1100 l
 1210 1100 l 1208 1101 l 1208 1105 l 1212 1113 l 1221 1126 l
 1234 1144 l 1253 1169 l 1275 1200 l 1294 1227 l 1312 1254 l
 1329 1278 l 1344 1300 l 1357 1319 l 1368 1334 l 1378 1347 l
 1386 1357 l 1393 1367 l 1400 1375 l 1407 1384 l 1414 1393 l
 1421 1404 l 1430 1418 l 1439 1435 l 1450 1456 l 1462 1480 l
 1475 1509 l 1488 1541 l 1500 1575 l 1512 1616 l 1521 1654 l
 1526 1687 l 1529 1716 l 1529 1743 l 1528 1766 l 1525 1788 l
 1521 1807 l 1517 1825 l 1512 1840 l 1508 1853 l 1505 1863 l
 1502 1869 l 1501 1873 l
 1500 1875 l gs col2 s gr 
% Polyline
n 1500 1875 m 1502 1875 l 1506 1876 l 1512 1878 l 1522 1881 l 1535 1883 l
 1550 1886 l 1568 1889 l 1587 1892 l 1609 1893 l 1632 1894 l
 1659 1894 l 1688 1892 l 1721 1889 l 1759 1883 l 1800 1875 l
 1834 1867 l 1865 1859 l 1894 1851 l 1918 1844 l 1937 1838 l
 1953 1834 l 1965 1831 l 1974 1828 l 1981 1827 l 1988 1825 l
 1994 1823 l 2001 1821 l 2010 1817 l 2022 1812 l 2038 1804 l
 2057 1794 l 2081 1782 l 2110 1766 l 2141 1747 l 2175 1725 l
 2208 1702 l 2238 1680 l 2264 1661 l 2284 1644 l 2300 1632 l
 2312 1622 l 2320 1616 l 2325 1611 l 2329 1609 l 2331 1606 l
 2334 1604 l 2337 1600 l 2342 1594 l 2349 1585 l 2360 1572 l
 2375 1553 l 2395 1530 l 2418 1500 l 2445 1465 l 2475 1425 l
 2500 1390 l 2524 1355 l 2547 1320 l 2568 1287 l 2588 1254 l
 2607 1223 l 2624 1192 l 2641 1163 l 2657 1134 l 2672 1106 l
 2686 1079 l 2700 1052 l 2713 1027 l 2725 1003 l 2736 981 l
 2746 961 l 2754 944 l 2761 929 l 2766 918 l 2770 910 l
 2773 904 l 2774 901 l
 2775 900 l gs col4 s gr 
% Polyline
n 3975 750 m 3976 751 l 3979 754 l 3984 759 l 3990 766 l 3999 775 l
 4009 786 l 4020 799 l 4031 814 l 4043 829 l 4056 847 l
 4069 867 l 4082 889 l 4096 914 l 4111 943 l 4125 975 l
 4138 1008 l 4149 1037 l 4158 1062 l 4163 1080 l 4167 1094 l
 4168 1102 l 4169 1108 l 4169 1113 l 4169 1117 l 4169 1123 l
 4170 1133 l 4172 1148 l 4177 1170 l 4183 1198 l 4191 1234 l
 4200 1275 l 4208 1312 l 4216 1347 l 4222 1376 l 4228 1400 l
 4233 1418 l 4236 1430 l 4239 1439 l 4242 1445 l 4244 1450 l
 4246 1455 l 4248 1461 l 4251 1471 l 4254 1485 l 4257 1505 l
 4261 1532 l 4266 1565 l 4270 1605 l 4275 1650 l 4278 1691 l
 4281 1730 l 4283 1764 l 4284 1793 l 4284 1816 l 4284 1835 l
 4284 1849 l 4283 1859 l 4282 1868 l 4281 1875 l 4280 1882 l
 4279 1891 l 4278 1901 l 4277 1915 l 4276 1934 l 4276 1957 l
 4275 1986 l 4275 2020 l 4275 2059 l 4275 2100 l 4275 2145 l
 4275 2187 l 4275 2225 l 4275 2259 l 4275 2289 l 4275 2317 l
 4275 2343 l 4275 2366 l 4275 2388 l 4275 2408 l 4275 2426 l
 4275 2441 l 4275 2454 l 4275 2463 l 4275 2470 l 4275 2473 l

 4275 2475 l gs col1 s gr 
% Polyline
n 5100 675 m 5101 676 l 5103 678 l 5106 682 l 5111 687 l 5118 695 l
 5126 704 l 5135 716 l 5145 729 l 5155 744 l 5166 761 l
 5176 780 l 5188 802 l 5200 828 l 5212 857 l 5224 892 l
 5237 931 l 5250 975 l 5260 1013 l 5269 1050 l 5276 1085 l
 5283 1116 l 5288 1143 l 5292 1166 l 5294 1185 l 5297 1201 l
 5298 1214 l 5299 1226 l 5300 1238 l 5301 1249 l 5302 1261 l
 5303 1274 l 5304 1290 l 5306 1309 l 5308 1332 l 5311 1359 l
 5314 1390 l 5318 1425 l 5321 1462 l 5325 1500 l 5329 1549 l
 5332 1589 l 5334 1618 l 5334 1637 l 5334 1645 l 5334 1647 l
 5332 1643 l 5331 1638 l 5330 1632 l 5329 1629 l 5327 1631 l
 5326 1642 l 5326 1663 l 5325 1697 l 5325 1743 l 5325 1800 l
 5325 1842 l 5325 1884 l 5325 1927 l 5325 1968 l 5325 2009 l
 5325 2049 l 5325 2088 l 5325 2126 l 5325 2163 l 5325 2200 l
 5325 2236 l 5325 2271 l 5325 2305 l 5325 2337 l 5325 2366 l
 5325 2393 l 5325 2416 l 5325 2436 l 5325 2451 l 5325 2462 l
 5325 2469 l 5325 2473 l
 5325 2475 l gs col1 s gr 
/Times-Roman-iso ff 360.00 scf sf
2325 2550 m
gs 1 -1 sc (e') col4 sh gr
/Times-Roman-iso ff 360.00 scf sf
525 1800 m
gs 1 -1 sc (e) col2 sh gr
/Times-Roman-iso ff 360.00 scf sf
3975 3075 m
gs 1 -1 sc (e) col1 sh gr
/Times-Roman-iso ff 360.00 scf sf
5175 3150 m
gs 1 -1 sc (e^-1) col1 sh gr
/Times-Roman-iso ff 360.00 scf sf
7425 2250 m
gs 1 -1 sc (e_1) col1 sh gr
/Times-Roman-iso ff 360.00 scf sf
7425 675 m
gs 1 -1 sc (v_1) col4 sh gr
/Times-Roman-iso ff 360.00 scf sf
7575 3225 m
gs 1 -1 sc (v_2) col4 sh gr
/Times-Roman-iso ff 360.00 scf sf
12225 2550 m
gs 1 -1 sc (v_M) col4 sh gr
/Times-Roman-iso ff 360.00 scf sf
11325 900 m
gs 1 -1 sc (e_N) col1 sh gr
/Times-Roman-iso ff 360.00 scf sf
9075 3675 m
gs 1 -1 sc (e_2) col1 sh gr
$F2psEnd
rs
end
