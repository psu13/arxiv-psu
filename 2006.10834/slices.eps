%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: slices.pdf
%%Creator: Adobe Acrobat 8.0
%%For: giddings
%%CreationDate: 6/17/20, 5:01:19 PM
%%BoundingBox: 0 0 484 703
%%HiResBoundingBox: 0 0 484 703
%%CropBox: 0 0 484 703
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.30 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.30 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}				if				end		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:08:23">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stMfs="http://ns.adobe.com/xap/1.0/sType/ManifestItem#"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
   xap:CreateDate="2011-12-27T20:13:19Z"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:ModifyDate="2020-06-05T21:48:22-07:00"
   xap:MetadataDate="2020-06-05T21:48:22-07:00"
   pdf:Producer="Mac OS X 10.6.8 Quartz PDFContext"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   dc:format="application/pdf"
   xapMM:InstanceID="uuid:4cc85c77-1843-ec42-925a-319b75ac9236"
   xapMM:DocumentID="uuid:af16540d-2148-284a-8dc5-527d1a85ecc1">
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="256"
      xapGImg:height="184"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYqwf8AMT8z7fyXqWj2k9pHcR6oszmR7j0XAgntYSkKenIskh+uc6M6CiH4sVQ3lf8A&#xA;OLSPMOp6Npdtb8b7Uvrn1uHm5+rfVK0+JokWX1OPYinvil6Dih2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjHkXzFqOtnzD9d4f7jNavNOtvTXj+4g4&#xA;cOW5q3xGpyc4gV5hjE3at5p8i6D5nmtpdV+sH6tDcWpjt7iW3Sa2uzGbiCcRMvqRSegnJT4ZBkr2&#xA;Hk7y/Yfov6rblP0N6/6PrI7cPrVfVrUnlyr+10xVOsVeP/l35m1LUfMvn20n1G7uo9O121htggnZ&#xA;oo21OaIwgTStEIwIuLmFVAj3NWBVVXsGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KsE/Kjr5y/8CjUv1RZbl5R936Swh197O8qZuxV2KvEPym0R7TzR+YbQ&#xA;R6hPG+t2SRSyzs5KW2ozlhHPJzaRI6lpeTcj8Snf42Ve34q7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwT8qOvnL/wACjUv1RZbl5R936Swh197O8qZuxV2K&#xA;sbfyp5V0SyYaPounaaLm8sGuBbxRWSyNFdxmNmaIR83Qmsanq3w96YqyTFXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXn35XXcUL+cVdZCT5n1E/BFJIP919&#xA;0Vhl+SNiPu/Wwj197N/0lb/yT/8ASPP/AM0ZVwH8EMrcdStwK8J/+kef/mjHgP4IW3fpK3/kn/6R&#xA;5/8AmjHgP4IW0v1zUbQ2UfIFR9bs97i2uClfrUVAKJ9snaP/ACqY8B/BTaYfpK3/AJJ/+kef/mjH&#xA;gP4IRbv0lb/yT/8ASPP/AM0Y8B/BC2767Kd47Od07NSNK/7GR0YfSMeHzVh+reXvPk2uzajo+v3e&#xA;m2k0okfTpLa2vIqCOCMoDNc/Av7l2/dhd3r48nhHf96Uu03yx+a6PdPe+aJyzieG2VLS1kCpwuEt&#xA;Zd5oxzQzxu60PL0wCx+1h4R3oT7ynovnHTrxF1XXJ9S09IpEEE9tbo3NjEUczpNLKxThJ1rXnv8A&#xA;ZGAgd6WW5FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWCflR185f+BRqX6o&#xA;sty8o+79JYQ6+9neVM3Yq7FUDrMjR2cbLIYibq0XksYmJDXMaleJ6BgeJb9mvLtiqOxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVgn5UdfOX/gUal+qLLcv&#xA;KPu/SWEOvvZpLf2MLmOW5ijcdUd1U7+xOQESejO1n6TtDunqSL2eOKWRD8mRWU/QceAot36QVtoY&#xA;J5W7j0zHQfOb0x9xx4VtBavc3jWkYSzvVb6zakm3aHnQXMZYGkn2CNpP8iuPCO9KN+tXbbJZSKx6&#xA;GR4lT6SjSN9ynHhHeh3qap/yzwf8j3/6pY1Hv/HzV3qap/yzwf8AI9/+qWNR7/x81Yt5j8gtrmvW&#xA;muvcXOn6jZRrDDJY3piHBZDIQQ1u9efIq3+SSO5x9P4/tVLbT8q72AQLJ5h1q7itwgSK51MSJ+6Z&#xA;Hjbj9UHxI0ezD4vE4fT+P7VRnl78t7jR/MCarHreqvCZZZptNkvxJZu80ZRi1uLaMHc89mHxb4DS&#xA;Wc5FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXnv5XWdtO/nFpk9QDzPqI4&#xA;MSU/3XvwJ4V96ZfkkQI13fpLCPX3s/ihhhQRwosaDoiAKN/YZSTbNfgV2KoDW0V7OMNF6wF1aNw9&#xA;UQ0K3UZD8j14U5cf26ce+Ko/FXYq7FULquqWOlabdanqEvoWNlE89zNRm4RxqWZuKhmNAOwxVK9N&#xA;8+eS9SgSex1uzmWRS6IJkWQqoUk+mxDjaVD0/aXxGKonR/NflvWSiaXqVvdTyQrc/VUkAuFicKQ0&#xA;kDUlj+2tQ6gitDiqa4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwT8qOvn&#xA;L/wKNS/VFluXlH3fpLCHX3s7ypmozXttC/pu9ZaV9JAXenjwQM1PemSESVU/rdy391ZyGv2HkKIt&#xA;PE/EXH/AV9seEd6Ev1x9RNlGHgswPrVnQzzSFAfrUXEgBEq9fsb/AGqY7JTD09U/5aIP+RD/APVX&#xA;G4934+SHenqn/LRB/wAiH/6q43Hu/HyVckV8T+9uE49vSj4NX5u0gp9GNjuS1PYrcQvBPIZoZAVk&#xA;ikWJlZT1DKUoRgtUqi8i+U4jWLSrKM0YVW0tRs4RW6RftLEgP+qPAY2qI0/yp5f07UDqNlYW1tfN&#xA;H6L3UNtbxStFt+7MiRq/H4RtXtjaptgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KpH9b81f4m+r/VE/QNafWOCcuPo8uXqfWedfV+Hj9X6b8sVSD8qOvnL/wKNS/VFluXlH3fpLCH&#xA;X3symkeWU20LceIBnlHVQeij/KP4D6MgBW7JWhgihThEoUE1PiSerMTuSe5OAm0r8CpfrjxpZRl5&#xA;UhU3dmA8kfqglrqIKgWhozk8Vb9knl2xVMMVdiqGbU9NWeSBruFZ4jEssRkUOrTmkIZa1BkOyV69&#xA;sVROKoOfWdIt2ZZ763iZS6sryopDRoJHBqeqxkMfAb4qrxXVrNLLFFMkksBCzxowZkYioDgGqkjf&#xA;fFVXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlD2Jk80C7W5jrDbRrJacv3g&#xA;BaYK5X+Vi1Af8k+GKsb/ACo6+cv/AAKNS/VFluXlH3fpLCHX3sx0z4rKKY/buAJ5D/lSDlT5KPhH&#xA;sBkJ86ZBFZFLsVQOsyPHZxsjTITdWi1t1DPRrmNSCCR8BBpIey1OKo7FVCW+to5DHyLyr9qONWkZ&#xA;a7jkEDca9q5IRK2xjX/IflvzHfrfanojT3aPDKsk93LCoa29QQlVt5HAZfWf9kV79BjQ71SZfyK/&#xA;L02Utiug29vbTxpHPS6vpjIscpmUMfUhaodq8uRNKL0Ao+lVWT8jfIUkzTyaVatM9wbt5D9b5NOW&#xA;Zi7H61vu567Y3Hu/HyVfB+Snkq31aLV4bCGPUYLhbuKdXvhSZZWnDcfrfE/vHLcSKe1Mbj+P7FZu&#xA;La4Iq13IGPUKsYWvsCrGnzJxsdyu+rTf8tcv3Rf9U8bHcrvq03/LXL90X/VPGx3KujglVwzXEkgH&#xA;7DCOh/4FFP44CfJVbArsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQr6Vpz6impPbob+NPSS5&#xA;p8YTc8a+HxnFWHflR185f+BRqX6osty8o+79JYQ6+9mOlf8AHLs/+MEf/EBkJ/UWQRWRS7FUFrEc&#xA;klpGscckjC5tWKwuI2CrcxszEkH4VUEuv7S1HfFVSRnuJmgjYpHHQTuuzEkAhFPb4TUnt236SG26&#xA;FeKKKKMRxIEReiqKDffATaV2BXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FWCflR185f8AgUal+qLLcvKPu/SWEOvvZjpX/HLs/wDjBH/xAZCf1FkEVkUuxVK/Mrwx&#xA;6V6syJJHDc2kpWR/TH7u6jYFTVauCKotfiai98IFmlR1nC0NrHG5BlpylYdDIx5OR82JOMjZVWwK&#xA;7FXYqoXt/Y2MPr3txFawA0MszrGlT25MQMVUNO1i11Ca8igWVTZSLFI0kUkasWjWQFC6ryFH7fqI&#xA;qqjsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYJ+VHXzl/4FGpfqiy3Lyj&#xA;7v0lhDr72Y6V/wAcuz/4wR/8QGQn9RZBFZFLsVSTzmUHl2cu0Sj1LcAzqzLU3EYUAKCeZP2D0DUJ&#xA;2yUPqClO8irsVdiqB1jWLbS7ZZJFaaeZhFaWkQBmnmIJWONSQK0BJJIVVBZiFBOKpBo3lfX73R5r&#xA;XztfLqdw18L20+rfuBBGioYoeUSwl/TkDHmRVuu3QKstoPv64q7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FWB/lUyqPObMaKPM+pEk+AEWW5OUfd+ksI9feh7HzWNa1vStAsb&#xA;hrOfTLimpRetFV0t1kTgyJPHNyaS2b4ODDj8TCm2QnzLIPRMilpmVVLMaKoqT7DFWIXvmyz1ry5e&#xA;TWK3VskbWyvNJbc0ZpLgI8SEkxvTiUeSNiEryBJGSh9QQzDIpdiqB1jWLbS7ZZJFaaeZhFaWkQBm&#xA;nmIJWONSQK0BJJIVVBZiFBOKoXR9HuVuW1bVmWbWJlKAISYbWEkH0IKgGlQC7kBpGFTRQqqqnGKu&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvPvyz/AN5fPP8A4Emqf8Rj&#xA;y6f8Pu/Swj197J5bm2l82wadJaRO1taNf290wBkjkdzA3Db4ao7VPvlLNOsVcQCCCKg9RirB7iLS&#xA;jp2uy6Xpn6PufrEMN3Lp4VJJ1t7tk5ScVT4OPL1OvwEjJw+oIZxkEobU702On3N4LeW6NvG0gtrd&#xA;ec0hUV4Rr3Y9BirF9H1azW5bVtWiv5tYmUoAmmakYbWEkH0IK24NKgF3IDSMKmihVVVOP8W6V/vj&#xA;Uf8AuGaj/wBk+Ku/xbpX++NR/wC4ZqP/AGT4ql2h/mJp2s2+nzW+m6jD+kb2WwhS5gFuQ0MckrTf&#xA;vWQPDxhajR8j7dcVZVirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirz78s/9&#xA;5fPP/gSap/xGPLp/w+79LCPX3sxDawNccG2gbSjEgS55lZ1kq5deHEhl+x+0KeBylmmGKuxVimsR&#xA;37aFqiX2mwpS6RoHgmWISxi8DRyvXo6LxdlqeZ2H2qZKH1BDK8il2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjfl3yu+gWnmHlcC4/S2o3mqLROHpi5Vf3Z3&#xA;blx4dfwywysjyYgVbJMrZOxV2KpT5rtprjQbmOKKOZlaKQpNXiFilSR2HEj40VSyf5QFdslD6gpT&#xA;bIq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpXQLWsyq&#xA;KkowAHUmhwx5qq4FdirsVQuq/wDHLvP+MEn/ABA5KH1BBRWRS7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhdV/45d5/wAYJP8AiByUPqCCisil&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD&#xA;amjPp10iAs7QyBVAqSSpoAMlDmFKJyKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;v//Z"/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapTPg:MaxPageSize
    stDim:w="1024.000000"
    stDim:h="768.000000"
    stDim:unit="Points"/>
   <xapTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="HelveticaNeue"
      stFnt:fontFamily="Helvetica Neue"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="13.0d3e1"
      stFnt:composite="False"
      stFnt:fontFileName="HelveticaNeue.ttc"/>
     <rdf:li
      stFnt:fontName="GillSans-Light"
      stFnt:fontFamily="Gill Sans"
      stFnt:fontFace="Light"
      stFnt:fontType="TrueType"
      stFnt:versionString="13.0d1e4"
      stFnt:composite="False"
      stFnt:fontFileName="GillSans.ttc"/>
     <rdf:li
      stFnt:fontName="MyriadPro-Regular"
      stFnt:fontFamily="Myriad Pro"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032"
      stFnt:composite="False"
      stFnt:fontFileName="MyriadPro-Regular.otf"/>
    </rdf:Bag>
   </xapTPg:Fonts>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xapG:groupName="Default Swatch Group"
      xapG:groupType="0"/>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
   <xapMM:Manifest>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       stMfs:linkForm="EmbedByReference">
      <stMfs:reference
       stRef:filePath="/Users/giddings/Box Sync/projects-physics/BH-slices/figfiles/latex-image-4.pdf"/>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stMfs:linkForm="EmbedByReference">
      <stMfs:reference
       stRef:filePath="/Users/giddings/Box Sync/projects-physics/BH-slices/figfiles/latex-image-3.pdf"/>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stMfs:linkForm="EmbedByReference">
      <stMfs:reference
       stRef:filePath="/Users/giddings/Box Sync/projects-physics/BH-slices/figfiles/latex-image-1.pdf"/>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stMfs:linkForm="EmbedByReference">
      <stMfs:reference
       stRef:filePath="/Users/giddings/Box Sync/projects-physics/BH-slices/figfiles/latex-image-2.pdf"/>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xapMM:Manifest>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -703 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 703 li
484 703 li
484 0 li
cp
clp
[1 0 0 1 -17 0 ]ct
false sop
/0 
[/DeviceCMYK] /CSA add_res
0.749 0.678 0.671 0.902 cmyk
true set_gvm
%ADOBeginSubsetFont: DLGQMX+HelveticaNeue Initial
ct_T42Dict begin
-0.949 -0.48 1.984 1.074
 256 array 0 1 255 {1 index exch /.notdef put} for  /DLGQMX+HelveticaNeue
Type42DictBegin
[<00010000000c000c000c000c4f532f32db3b89c8000000cc000000606376
7420185400a70000012c000000186670676dfdfac9ac0000014400000428
676c7966624ad48900005928000003fc68656164f236df730000056c0000
00366868656107e30f38000005a400000024686d747863f38eb4000005c8
0000236c6c6f63610022252400002934000023706d6178700b0a05290000
4ca4000000206e616d6573d5777900004cc400000c1470726570960f2033
000058d80000004d67646972000000000000000000000000000201bf0190
0005000000cc00cc0000011e00cc00cc0000011e003200fa000002000503
000000020004e50002ff500079db00000010000000004c494e4f00000008
fb0203b8ff2b001c03b800d50000000000000000020502ca000000200002
14000014004b005a00000011ff3a000b0205000c02ca0011b800002c4bb8
00095058b101018e59b801ff85b844001db9000900035f5e2db800012c20
20456944b001602db800022cb800012a212db800032c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800042c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800052c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800062c2020456944b00160202045
7d691844b001602db800072cb800062a2db800082c4b20b003265358b080
1bb040598a8a20b003265358b0022621b0c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b80003265358b0032545b8014050582321b8
014023211bb003254523212321591b2159442db800092c4b535845441b21
21592db8000a2c4bb800095058b101018e59b801ff85b800441db9000900
035f5e2db8000b2c2020456944b001602db8000c2cb8000b2a212db8000d
2c2046b003254652582359208a208a49648a204620686164b00425462068
6164525823658a592f20b00053586920b000545821b040591b6920b00054
5821b0406559593a2db8000e2c2046b00425465258238a592046206a6164
b0042546206a61645258238a592ffd2db8000f2c4b20b0032650585158b0
80441bb04044591b21212045b0c05058b0c0441b2159592db800102c2020
456944b001602020457d691844b001602db800112cb800102a2db800122c
4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800132c4b535845441b2121592db80014
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
152c2020456944b001602db800162cb800152a212db800172c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800182c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800192c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db8001a2c2020456944b00160
2020457d691844b001602db8001b2cb8001a2a2db8001c2c4b20b0032653
58b0401bb000598a8a20b0032653582321b0808a8a1b8a235920b0032653
582321b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b0032653582321b801408a8a1b8a235920b80003265358b0032545b80180
50582321b8018023211bb003254523212321591b2159442db8001d2c4b53
5845441b2121592d00010000000100006aa15f8a5f0f3cf5011103e80000
0000b643600000000000d7c23c38fc49fe1f07c304350000000900020001
000000000001000003b8ff2b001c08b1fc49fe8007c30001000000000000
000000000000000008db01f4003300000000011600000116000000000000
0116000001160000000000000103004a01aa006d022c0022022c001903e8
005c02760021011600690103002f0103fff7016000180258003001160053
0185003201160053014dffef022c002a022c0057022c0018022c001d022c
001c022c0023022c0026022c0032022c0028022c00220116005301160053
0258002e025800300258002e022c00360320002a0288fffa02ad004e02d2
002b02c0004e0263004e023e004e02f7002b02d2004e0103005202070016
029b004e022c004e0367005002d2004d02f800260288004e02f8002602ad
004e02880025023e000202d2004a02630000039e000c0263000002880002
0263001601030048014dffef010300000258003201f4000000deffe00219
0024025100430219002402510024021900240128000c023e0024022c0040
00de004500defff30207004500de004503550040022c0040023e00240251
004302510024014d003d01f4001f013b0009022c004001f4000e02f60011
0206000901f4000801e00016014d003000de004d014d0018025800300288
fffa0288fffa02d2002b0263004e02d2004d02f8002602d2004a02190024
021900240219002402190024021900240219002402190024021900240219
0024021900240219002400de003200deffe000deffda00deffe5022c0040
023e0024023e0024023e0024023e0024023e0024022c0040022c0040022c
0040022c0040022c002a01900038022c002e022c002f022c002301f40048
02580030022c0040032000180320001803de004000de003200deffe50258
0030039efffa02f8002502e8001a025800300258003002580030022c0000
022c0040021600230240000002ee004e026e001e01570000017a00190180
001902e4001a03660024023e0022022c00440103004a0258003002180000
022c0003025800240288fff901cf003201cf004103e8006f011600000288
fffa0288fffa02f8002604320026037b002401f4000003e8008201aa0042
01aa00420116005401160053025800300258005601f400080288000200a7
ff5b022c000d01030032010300390206000c0206000c022c002a0116004b
0116005301aa0042047c00480288fffa0263004e0288fffa0263004e0263
004e010300460103ffed0103fff80103ffe902f8002602f8002603160033
02f8002602d2004a02d2004a02d2004a00de004500deffda00deffc100de
ffc600deffd400de004200deffff00de000500deffd100de004c00deffda
02e40019022c0019022c000000de00000342003103420024014d00420258
00470288004e00de004d02c000080342002402580030023e002402510043
014d000e014d000402880025028800020263001601f4001f01f4000801e0
00160000ff040000ff560000fefe0000fee50000feea0000fef80000ff66
0000ff090000ff230000fef50000fefe0000ff290000ff700000fea40000
000000deffe000deffd802e7002603230026028200240263001601e00016
022300200263004e0263004e02ee00020226005402ce0026028800250103
00520103fff7020700160451000a0464004e02ee0001029b004e02da004e
0263000102c8004e0288fffa02a3004e02ad004e0226005402d900090263
004e03f30007028e002502da004e02da004e029b004e02bf000a03670050
02d2004e02f8002602c8004e0288004e02d2002b023e000202630001035d
001e0263000002d0004e0292002f03f3004e0408004e030a00020368004e
028d004e02ce002603fc004e029f000002190024023d0032021c004001a8
0042024d000302190024030f000001fa001e0236004002360040020e0040
0233000a02b0004002300040023e002402260040025100430219002401cf
000401f40008032000280206000902340040020b002e03010040033f0040
0269000302c4004002160045021900210306004002180003021900240219
00240236ffeb01a800420219002401f4001f00de004500f2001700defff3
036f000a036c00400236ffeb020e00400236004001f400080226004002da
00000245fffc03a7003f02d9003202f80026023e0024029b00000212000e
02da000a023500000226005401a800420263001601d700140402fffd031d
0000028e002501fa001e02ac004e021c0040029e004e0227004003180002
0266000302e3004e0246004003f7004e0301004002d2002b021900240288
000201f400080288000201f4000802750000020e000902a3002f0221002e
0292002f020b002e0299004e022c00400103005203f3fffd030f00000288
fffa021900240288fffa02190024039efffa036600240263004e02190024
02e700260223002003f3fffd030f0000028e002501fa001e02da004e0236
004002da004e0236004002f80026023e002402f80026023e002402630001
01f400080263000101f400080263000101f400080292002f020b002e036d
004e02c40040040b00520288fffa0219002402d2002b021900240263004e
0219002402d2004d022c00400288002501f4001f0263001601e000160263
001601e000160288fff90288fffa0288fff9039efff902d2002b02d2002b
02d2002b02c0004e02c000080263004e0263004e0263004e0263004e02f7
002b02f7002b02f7002b02f7002b02d2004e02d2004e0103ffe60103ffc1
0103ffd8010300520103002802070016029b004e022c004e022c004e022c
004e022c004e02d2004d02d2004d02f8002602f8002602f8002602f80025
02ad004e02ad004e02ad004e028800250288002502880025023e0002023e
0002023e0002023e000202d2004a02d2004a02d2004a02d2004a02d2004a
02d2004a039e000c039e000c039e000c039e000c02880002028800020219
002402190024021900240366002402190024021900240219002402510024
0256002402190024021900240219002402190024023e0024023e0024023e
0024023e0024022c00400231ffef00deffd400deffc200deffc600de0011
00defff200deffd9020700450202004000de0041012e004500de00380156
0045022c0040022c004002970012023e0024023e0024023e0024023e0022
014d003d014d002d014d003001f4001f01f4001f01f4001f013b0009013b
0009013b0009013b0009022c0040022c0040022c0040022c0040022c0040
022c004002f6001102f6001102f6001102f6001101f4000801f400080302
005201b600450241000c031f000c031f000c00deffe900de003200deffd9
00deffd900de005000deffc600deffe400deffc500deffc500deffd300de
fffe00deffd000de00420116005101160053018500320116004b00a7ff5a
0342002e034200380342001b0342002b034200310342004c0288fffc022c
004301f4004802f8002c022c004002d2004d0206000c0206000c01850032
03e80064022c003601720022017200190172001f017200230172002b0172
0021017200220190002900fa00230190002900be002600be00070172002a
017200220172003b0172001f0172001d017200190172001f017200230172
002b01720021017200220190002900fa00230190002900be002600be0007
034200230320001800de003000de00180116005300f1005800f10058014c
fffb028f00000116005302f2000b0361000b018a000b0361000b034a000b
0364000b00edffd00288fff902ad004e0228004e0263004e0263001602d2
004e02f8002601030052029b004e0265fff90367005002d2004d023a0025
02f8002602cb004e0288004e0262002a023e000202880002030900260263
ffff033b00470103fff702880002024b002401e5001f022d004000ed0045
020f003c024b00240234004301d1000e022a002401e5001f01b10026022d
00400216002400ed0045020200400206000c01e4000e01a90026023e0024
023a003c020100240235002401c40003020f003c02cc002001c1fff60296
004002cf002400edffe5020f003c023e0024020f003c02cf002400de0040
00de0053022c0000022c001e0000feb500d0ffee0116000e022c002301f4
001c022c00280000fec00000fe3e0000fe4f0000fe6c0000feb50000feb5
0000feb50000feb50000fe430000fed10000fe9e0000fe4f0000fe870000
fe870000fe4d0000febc0000fe6c0000fe840000fed10000fe580000fe58
0000fe4f0000fe4f0000fe3f0000fe4d0000fe3e0000fe3f0000fe4d0000
fe3e0000fe3e0000feb00000fe3e0000feb50000fe4f0000fe510000fe9e
000000000116000d022c004003410040014d004203410040014d0043014d
0042020900280209002900fb00420193ffff0116000b0116000b01f40005
02d2000801f4000a022c004c022c004d022c004c01f4003e024b001c024b
001c02d2002b02d2001002370024029b0055029b002f01f40020023e001c
035e004a02ba003e02f300280104005901af00590116005f0238001501f4
001d00960028014d005e014d005f05620007029b0074014300740219fffb
020b005e020b005f02a2005e02a2005f014d002a01430074014d002a0162
0050008b0000000000000000000000000000000000000000000000000000
0000000001f4000003e800000116000003410000014d00000116000000a7
0000022c0000006900000116000000000000000000000000000000000000
002c0000000f0000014dfffc01ae0059014d002a014d0003021900380219
0038029b000f02630055022c00230379002602a400240000feb70000feb7
0000feb70000feb70000fe6e0000fe730000fed30000fe700000fe810000
fe7a0000fe760000fe7f0000fe3a0000feaa0000fead0000fe710000fe72
0000fe4d0000fe530000fe6a0000fe6a0000fe6a0000fe6b0000fe6b0000
fe4f00a7002f0136002f0462003603f30036029b004c01160062022c0062
0341006203b10062029b001903b1001904c7001905dc001903b10062029b
001503b1001504c70015022c004c02d2002c02d200510341004a00de0040
01bc0040029b004002d2004001f4000502d2000503b00005048f000502d2
004001f4000502d2000503b0000500de004301f4001d022c001b03410040
04d300390446002703d6001b03d5003402c300370173002b045900370363
003402c00029029b000f022c0024011600030116fff6030a0027022c001b
02d20053022c004002d20053022c004002d20053022c004002d20053022c
004002d20053022c0040029b000f022c0028029b000f022c002803e80008
03790024030a0030022c001e029b004c01f4003e030a0027022c001d030a
0027022c001d00deffe004c900290463003603e6001b030a003002d2004c
022c0040029b000f022c0028029b000f022c0028029b0055022c0023029b
0055022c00230116ffba00deff9d0116fffc00deffd6030a0027022c001d
030a0027022c001d02d20058014dffeb02d20058014d002702d20053022c
003e02d20053022c003e02d2004f022c0040029b000f022c0028029b0055
022c0023030a0027022c001d030a0027022c001d030a0027022c001d030a
0027022c001d029b001501f4000a014d0026029b000f022c0028029b004a
022c003a029b004a022c003a029b004a022c003a02d2002c01f4001d02d2
0051022c001b02d20051022c001b02d20051022c001b02d20051022c001b
02d20051022c001b029b0055022c0023029b0055022c0023029b0055022c
0023029b0055022c0023029b0055022c0023026300550116000e030a0030
022c001e02d2004f022c004002d2004f022c004002d2004f022c004002d2
001c022c000d02d2004f022c00400116fff600deffd0011600130116000b
029b004c01f4003e029b004c01f4003e029b004c01f4003e022c004c00de
0043022c004c00deffd0022c004c00deffdb022c004c00deffe10341004a
034100400341004a034100400341004a0341004002d2004c022c004002d2
004c022c004002d2004c022c004002d2004c022c0040030a0027022c001d
030a0027022c001d030a0027022c001d030a0027022c001d029b0055022c
003a029b0055022c003a02d20058014d004302d20058014d004002d20058
014d002402d20058014d000c029b002f01f40020029b002f01f40020029b
002f01f40020029b002f01f40020029b002f01f40020026300100116000b
026300100116000b026300100116fff1026300100116fff402d20053022c
003e02d20053022c003e02d20053022c003e02d20053022c003e02d20053
022c003e029b001901f40005029b001901f4000503b0001202d2000903b0
001202d20009029b001501f40005029b001501f40005029b001501f4000a
0263001701f400190263001701f400190263001701f40019022c00400116
000802d2000901f4000a0116000e029b0003022c0024029b0003022c0024
029b0003022c0024029b0003022c0024029b0003022c0024029b0003022c
0024029b0003022c0024029b0002022c0024029b0002022c0024029b0002
022c0024029b0002022c0024029b0003022c0024029b0063022c0024029b
0063022c0024029b0063022c0024029b0063022c0024029b0063022c0024
029b0063022c0024029b0063022c0024029b0063022c00240116004f0116
004d0116005b00de0041030a002f022c001b030a002f022c001b030a002f
022c001b030a002f022c001b030a002f022c001b030a002f022c001b030a
002f022c001b0379002602a400240379002602a400240379002602a40024
0379002602a400240379002602a4002402d2004a022c004002d2004a022c
0040035e004a02ba003e035e004a02ba003e035e004a02ba003e035e004a
02ba003e035e004a02ba003e029b000b01f40008029b000b01f40008029b
000b01f4000802de002f01fd0011010bffe3010b00050000fe9501160056
00b2004200b200420000fe870000fe8700b20042015d000d0152000d0179
004201800042010b0016010b00170186004201a700360190004201a70036
0300002e030afff8022c00740342004c03420074022cffeb02d2fff9022c
00400341004001ec004c0223004b01c8002c0217002d030a0027014d000f
03cc001203cc00120000fca50000fd170000fd170000fd150000fd1502ef
002f022c00270318002602350025022c0012022c001d025b0040025f001b
022c00380250001b025d001e022c003f025d003f010b004103b0002301b9
0042014d0041025b001d024e00180286001803a3001b02a0000b0210000b
02d6000e02530043024e004300d0004300d0004300de005300bf003b014d
005e014d001c00bf003b014d0004014d005e014d001c00d0004300d00043
014d000f014dfffc0116002001160020006ffff700a7002200a7002100dd
00210169000400fa00050116002601160027012400070124000701240012
01240012014d002a01240016012400160124001600fa001000fa0003006f
00210124001c0116000401240012012400120124000701240007014d003b
011600270000fe700000fe5b0000fe5b0000febf0000febf0000fe300000
fe300000fddc0000fe5b0000fe300000fe700000fe460000fe6b00000000
0116000000000000000000000000000001850026018500260358005e03cc
00120116006f0458004c03cc001203790066036c000d0116003e0116003e
000000000000000000000000000000000000000000000000032a001c030a
0030022c004c022c004c029b001502ee00170395000803cd002b0342002c
02d2002c029b002b026400370337000e029b0055022c003a029b0055022c
003a02630001030a00270254004f011a001101aa000802d2002701550011
0193ffff022c004c022c004c00de001500de0015022c001e0263002c0263
002c0263002c0263002c0263002c0263002c0263002c0263002c02cf002c
02c8002c03a0004203a5004203a5004203b0004203ce003603b90036022c
003a022c003a022c003a022c003a022c003a022c003a034d0042034d0042
04210042042b004204140042041b00420263001d0263001d0263001d0263
001d0263001d0263001d0263001d0263001d038400420384004204580042
04620042044c004204520042047900360479003601160056011600560116
00200116001c0116001e0116001e011600110116001101c8004201c80042
029b004202a60042028f00420296004202bd003602bd0036026300360263
00360263003602630036026300360263003603bc004203bc0042048f0042
049a004204830042048a00420263005a0263005a0263005a0263005a0263
005a0263005a0263005a0263005a034d0042042b0042041b004204420036
02f6003402f6003402f6003402f6003402f6003402f6003402f6003402f6
003403b2004203b200420486004204900042047a00420480004204a70036
04a700360263002c0263002c022c003a022c003a0263001d0263001d0116
00560116005602630036026300360263005a0263005a02f6003402f60034
0263002c0263002c0263002c0263002c0263002c0263002c0263002c0263
002c03f0002c03ee002c04ac004204ce004204a3004204b1004204cc0036
04ca00360263001d0263001d0263001d0263001d0263001d0263001d0263
001d0263001d049a0042049a0042056e0042057800420561004205680042
058f0036058f003602f6003402f6003402f6003402f6003402f6003402f6
003402f6003402f6003404c8004204c80042059c004205a60042058f0042
0596004205bd003605bd00360263002c0263002c0263002c0263002c0263
002c0263002c0263002c029b000d029b000d03200016031d001703be000d
0263001d0263001d0263001d0263001d0263001d03420016034000170355
001603490017040000560116ffe80116ffe80116ffe70116ffed0116ffee
0116ffe30116fff10116fff701980016019a00170263005a0263005a0263
005a0263005a02630053026300530263005a0263005a029b0014029b0014
0344001603740017034d004202f6003402f6003402f6003402f6003402f6
00340397001603ae001703b2001603be00170423002e0248001202660088
026d004f0171000d0155001102d2002c030a002700de0010029b005502d2
004f0000fea102990033022c001b03a3002c038600220342001e0342001e
0342001c03f9006602df00430340003e02d20046029b000f01f4000503b6
006602d60043025e001b015d001202db000b02b3001b02d20058022c0028
01860000025e004f01ea004f0312004f02590040029b004c01f4003e0263
001701f40019026d001501fd001c025e005c01b40047038e001c02b90013
038e001c02b9001303a3002302c8001b02de005402350047022c00280298
0054029800540412002102de0013029b0019024d000501f4001d02980038
01f9002302e70013024000120116005c02a6001601fd0012029b0019029b
000f02d2002c01f4001d022cfff40263001000de001e0155001102630010
029b0055022c004c022c004c029b0055022c0023021e001100deffed02d2
005300d0001000d00010014d0019014d0019014d001c014dfff50116006f
014d001d014d001d02af002c02480012024800390116006f0248001202ae
0025024800390116006f0116006f030a003701fd001f01fd001f029b0055
022c003e02d2002c0341004a02dd004a02bd002202d2002c02d2002c02d2
002c01f4001d01f4001d01f4001d022c001b02d40017034f0016030d0017
0186000d0304000c0266001802360022014d005d014d005d014d005d014d
005d0134001d0134001d019c0000019c0000019c0000019c0000019c0000
0236000901f0000f02220029020e0040020e00400176002d019e00090339
001c0318001e028500170000fc49035c00110266001000ea002500ef0025
00aa001200aa000500c8001500c700090175000b0179000b012c00090124
000901240009015c002500e6000300e6000303dd001c04a20025047d0024
047d0001009a0025021e001102b4000202b400060251000a0214000c00e6
000300e6000301f3001e01f3001e01f6001c01ad00050226001d0000fdc9
0000fe6a0000fe100000fe4f0000fe4f0000fd420000fe790000ff4f0000
fe510000fe340000fd170000fe5a0225001a0225001101f4001901f40012
03a5000b0219000d01e9000e027e0019031700180256001901f6000a02e1
000a02e1000a02e1000a03e8fff603e8fff603e801cf03e801bb03e801cf
03e801bb03e8fff503e8fff503e801cf03e801bb03e8fff503e8fff503e8
0000006f002001160014011600120116000f00fa00030116001202d2002c
030a003002d2002c022b00110299001402630010029b000f025a001402d0
0026025e002602d2002c0341004002d70018031f001b03fe001a02990033
0299003301c3001f01b5001d01c3001f01b5001d01c3002901b6001d01c3
002901b6001d016d0029016900290169002901690029016d0029016d0004
016900000169000001690000016d000401a7002901a7002901a7002901a7
002901a7002901380000018e002201ce001301d6000502760018033a0014
01bd003e0000fe330000fe330000fe2c0000fe2c0000fe2c0000fe2c0000
fe0c0000fe0c0000feaa0225001101f4001204fe00270420001d020e0040
020e0040020e0040018b001c018b001c01a1001402770019018b0029018b
0014018b0019018b00190172001c0172001c018b0015009e002e0163002c
024f002e018b002e018b001501630014018b0013018b0015018b002900c5
0008018b002c01af001b024f002e0163000401b2003e018b000601b20024
025f00260306001502510019022c001c022c001d0264001b0262001c026e
001c03a1001e018b0005009e002e00ec002f018b002c0163000401b2003e
018b000601b2003b018b00050209002802d1000800de0040022200290370
00160351001a025c000d026e000d016300060266000d018e000601640005
0165000600de0053014d0026028f003c0256000e017f004602aa004a0446
0011022c001f01670019022c001f022c0018022c0019022c0020022c0026
020b0015022c0020022c002401db000401db000401db0004018e001b02ac
0023030e0023023f001b029f000e03110005020900080282001c03f3002c
0296001403ad001701e5001b025f001b045f001403e6ffec02a700270281
00100307002b03c6001b0229001d0379fffe0369002b0377001b02960010
02f7fff10323002b023f000a0323002b03e7001802c50014026100180294
00080357002b02be001104e7002b0363001003ef0000045b002b022d0024
034e001c047700200267001502b1001b0225000002b7001002ce001c0209
001c03e200020261002f02e4000703320010033200100311000502310025
037f002602f90010028b001b028b001b02e1002b02c7000a039a0005025d
001c02e5002b0375000a030b0014030d001b02b000200349002b036b002b
049b00140323002b039700230265002b0265002b04e3002702d2ffff0359
000602c50014035a002b0293001c0315001c02ce001c02b3000c02ea001b
0400002b0288fffa02d2004a029b000f015e00490208001b01d00034023e
0037024a002703b50024020000340220002a02d9002503be002102510025
01e4001d0496002401f1002a02000026036200240204001f021b0027033e
002401ee00260307002f03480023030d0021020000250320002201d4001e
0212001e01df00280234002101fd002401ff0022023e001c01f1002b0315
001601db002e02a0002a023d00180222002a01e9001e02240029034d0024
0216007801f3007e0225004e022c0020027100660118004101180041022c
00250230006c0244fffa023200410282002a0288004a0202004a01f6004a
02ad003202ae004a00f7004e00f6ffc3025c004001f7004a033c004c02ae
004902bc00250217003602d400250262004a020e001702230002028b003c
024400000333000202440000022f00020244001500c800460146003b00cd
003200c600320286003003ec001a019c00100191000f030300130282002a
0282002a0202004a0202004a0202004a0202004a0202004a0202004a0202
004a01fd0017028b003c028b003c028b003c028b003c022f0002022f0002
022f0002020200400370fffa03be001a0288fffa0263004e02f8002602fc
003508b101060444011404c1010605990106057500e6022c0017022c0020
0202004a02a3000201e4004602920026020e001700e6004600e6ffe900ef
ffc30389000a03810046029700010262004602a60046022efffd028b0046
0244fffa022700410237004601e4004602a1000901fe004602fb0000021b
001b02a6004602a600460262004602a3000a0330004602a7004602bc0025
02a70046022700460282002a02230002022efffd02c7001e0244000002aa
00460262002f0393004603b6004602c40002032400460246004602920026
03a4004602380000027b00000307003f02be0025029b000001ee00460000
ffad0000ff9c0000ff4f04be001604be0037000000000000009000000090
000000900000009000000090000000900000009000000090000000900000
009000000090000000900000009000000090000000900000009000000090
000000900000009000000090000000900000009000000090000000900000
009000000090000000900000009000000090000000900000009000000090
000000900000009000000090000000900000009000000090000000900000
009000000090000000900000009000000090000000900000009000000090
000000900000009000000090000000900000009000000090000000900000
009000000090000000900000009000000090000000900000009000000090
000000900000009000000090000000900000009000000090000000900000
009000000090000000900000009000000090000000900000009000000090
000000900000009000000134000001880000018800000188000001880000
018800000218000003580000035800000358000003b4000003b4000003b4
000003b4000003b4000003b4000003b4000003b4000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
000003fc000003fc000003fc000003fc000003fc000003fc000003fc0000
03fc000003fc000003fc000003fc000003fc000003fc000003fc000003fc
0001000008db0096000900680004000200000000001e0000020004280003
00010000002601ce0001000000000000021200000001000000000001000e
021200010000000000020007022000010000000000030024022700010000
00000004000e024b0001000000000005000802590001000000000006000d
0261000100000000000700e4026e00010000000000090016035200010000
0000000a01330368000100000000000b0018049b000100000000000c0025
04b30001000000000100001604d80001000000000101001504ee00010000
000001020009050300010000000001030010050c00010000000001040012
051c00010000000001050009052e0001000000000106000e053700010000
00000107001405450003000104040002000605590003000104060002000e
055f0003000104070002000c056d00030001040900000424057900030001
04090002000e099d00030001040b0002001009ab00030001040c0002000c
09bb0003000104100002001009c70003000104110002000a09d700030001
04120002000609e10003000104130002001009e70003000104140002000c
09f70003000104160002000c0a030003000104190002000e0a0f00030001
041d0002000c0a1d000300010804000200060a29000300010c0100020008
0a2f000300010c0a0002000c0a37436f7079726967687420286329203139
38312c20313938322c20313938332c203139383920616e6420313939332c
204c696e6f74797065204c69627261727920476d6248206f722069747320
616666696c6961746564204c696e6f747970652d48656c6c20636f6d7061
6e6965732e20416c6c207269676874732072657365727665642e0a0a5468
65206469676974616c6c7920656e636f646564206d616368696e65207265
616461626c6520736f66747761726520666f722070726f647563696e6720
74686520547970656661636573206c6963656e73656420746f20796f7520
6973206e6f77207468652070726f7065727479206f662048656964656c62
657267657220447275636b6d61736368696e656e20414720616e64206974
73206c6963656e736f72732c20616e64206d6179206e6f74206265207265
70726f64756365642c20757365642c20646973706c617965642c206d6f64
69666965642c20646973636c6f736564206f72207472616e736665727265
6420776974686f7574207468652065787072657373207772697474656e20
617070726f76616c206f662048656964656c62657267657220447275636b
6d61736368696e656e2041472e0a0a436f70797269676874202863292031
3938382c20313939302c20313939332041646f62652053797374656d7320
496e636f72706f72617465642e20416c6c20526967687473205265736572
7665642e48656c766574696361204e657565526567756c617248656c7665
74696361204e6575653b2031332e30643365313b20323031382d30392d31
3448656c766574696361204e65756531332e306433653148656c76657469
63614e6575652248656c766574696361204e657565222069732061207472
6164656d61726b206f662048656964656c62657267657220447275636b6d
61736368696e656e2041472c207768696368206d61792062652072656769
73746572656420696e206365727461696e206a7572697364696374696f6e
732c206578636c757369766c79206c6963656e736564207468726f756768
204c696e6f74797065204c69627261727920476d62482c20612077686f6c
6c79206f776e65642073756273696469617279206f662048656964656c62
657267657220447275636b6d61736368696e656e2041472e4c696e6f7479
70652044657369676e2053747564696f48656c76657469636120284c6174
696e20666f72205377697373292068617320746865206f626a6563746976
6520616e642066756e6374696f6e616c207374796c652077686963682077
6173206173736f6369617465642077697468205377697373207479706f67
726170687920696e2074686520313935307320616e642031393630732e20
4974206973207065726665637420666f7220696e7465726e6174696f6e61
6c20636f72726573706f6e64656e63653a206e6f206f726e616d656e742c
206e6f20656d6f74696f6e2c206a75737420636c6561722070726573656e
746174696f6e206f6620696e666f726d6174696f6e2e2048656c76657469
6361206973207374696c6c206f6e65206f66207468652062657374207365
6c6c696e672073616e732d736572696620666f6e74732e687474703a2f2f
7777772e4c696e6f747970652e636f6d2f687474703a2f2f7777772e6c69
6e6f747970652e636f6d2f666f6e7464657369676e657273436861726163
74657220416c7465726e617469766573416c7465726e6174652050756e63
74756174696f6e4c6967617475726573436f6d6d6f6e204c696761747572
65734f7074696f6e616c204c69676174757265734e6f204368616e67654e
756d6265722053706163696e6750726f706f7274696f6e616c204e756d62
6572736a196e969ad4004f007200640069006e00e60072004e006f007200
6d0061006c0043006f007000790072006900670068007400200028006300
2900200031003900380031002c00200031003900380032002c0020003100
3900380033002c0020003100390038003900200061006e00640020003100
3900390033002c0020004c0069006e006f00740079007000650020004c00
690062007200610072007900200047006d006200480020006f0072002000
690074007300200061006600660069006c00690061007400650064002000
4c0069006e006f0074007900700065002d00480065006c006c0020006300
6f006d00700061006e006900650073002e00200041006c006c0020007200
690067006800740073002000720065007300650072007600650064002e00
0a000a0054006800650020006400690067006900740061006c006c007900
200065006e0063006f0064006500640020006d0061006300680069006e00
650020007200650061006400610062006c006500200073006f0066007400
7700610072006500200066006f0072002000700072006f00640075006300
69006e006700200074006800650020005400790070006500660061006300
6500730020006c006900630065006e00730065006400200074006f002000
79006f00750020006900730020006e006f00770020007400680065002000
700072006f007000650072007400790020006f0066002000480065006900
640065006c00620065007200670065007200200044007200750063006b00
6d00610073006300680069006e0065006e00200041004700200061006e00
6400200069007400730020006c006900630065006e0073006f0072007300
2c00200061006e00640020006d006100790020006e006f00740020006200
6500200072006500700072006f00640075006300650064002c0020007500
7300650064002c00200064006900730070006c0061007900650064002c00
20006d006f006400690066006900650064002c0020006400690073006300
6c006f0073006500640020006f00720020007400720061006e0073006600
65007200720065006400200077006900740068006f007500740020007400
680065002000650078007000720065007300730020007700720069007400
740065006e00200061007000700072006f00760061006c0020006f006600
2000480065006900640065006c0062006500720067006500720020004400
7200750063006b006d00610073006300680069006e0065006e0020004100
47002e000a000a0043006f00700079007200690067006800740020002800
63002900200031003900380038002c00200031003900390030002c002000
31003900390033002000410064006f006200650020005300790073007400
65006d007300200049006e0063006f00720070006f007200610074006500
64002e00200041006c006c00200052006900670068007400730020005200
65007300650072007600650064002e0052006500670075006c0061007200
4e006f0072006d00610061006c0069004e006f0072006d0061006c005200
650067006f006c00610072006530ec30ae30e530e930fcc77cbc18ccb400
52006500670075006c006900650072004e006f0072006d0061006c004e00
6f0072006d0061006c041e0431044b0447043d044b0439004e006f007200
6d0061006c5e3889c44f5306390627062f064a004e006f0072006d006100
6c000000b800142b01ba0002000200162b01bf0003003e0037002b001f00
130000001c2b00bf0002004a0037002b001f00130000001c2b00ba000400
04001b2bb8000120457d691844b8000a2bb800002b00000000>
[1021 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 144 79 <00010040000001ec02ca001a0051ba001a000000032bb8001a10ba000e00
0b00032bb8000e10b8001a10b80002d0b8001a10b80018d0b800182f00b8
00002fb800012fb8000c2fba0013000800032bb8001310ba001900010000
111239303113113311343e0233321615113311342e0223220e0207231140
5513263927313855112a443317312d240a0202cafd360124233b2c183830
fea201542a45321c0a1521180111>DLGQMX+HelveticaNeue AddT42Char 
1 308 80 <000200450000009a02ca00030007002fba0001000200032bb8000110b800
0210b80004d0b8000110b80006d000b800052fba0001000000032bb80001
1030311335231d011133119a5555026268685dfdfb020500>DLGQMX+HelveticaNeue AddT42Char 
1 392 85 <00010040000001ec021100170045ba0003000000032bb8000310ba000e00
0b00032bb8000e10b8000310b80015d0b800152fba001600000003111239
00b800012fb8000c2fba0013000800032bb8001310303113113311343e02
33321615113311342e022322072335405513263927313855112a44337335
020205fdfb0124233b2c183830fea201542a45321c5e5200>DLGQMX+HelveticaNeue AddT42Char 
1 536 86 <00020024fff5021a02110013002700cbb800282fb800292fb8002810b800
14d0b800142fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8002910b8001edcb800
0adc410500da000a00ea000a00025d411b0009000a0019000a0029000a00
39000a0049000a0059000a0069000a0079000a0089000a0099000a00a900
0a00b9000a00c9000a000d5d00ba000f001900032bb8000f10ba00230005
00032bb8002310303113343e0233321e0215140e0223222e0227141e0233
323e0235342e0223220e027e192c3b21213b2c19192c3b21213b2c195a20
405e3d3e5d402020405d3e3d5e402001022f49321a1a32492f2f49311a1a
31492f39624929294962393963492a2a49630000>DLGQMX+HelveticaNeue AddT42Char 
1 856 89 <0001003d0000014d0213000e0027ba0003000100032bb8000310b8000dd0
b8000d2f00b800012fba0009000800032bb8000910303113113335343e02
333526060723353d55142c4833455a1f020205fdfbe6324d361c5a023c3f
6d00>DLGQMX+HelveticaNeue AddT42Char 
1 948 97 <00010016000001ca02050009001b00ba0004000100032bb8000410ba0007
000800032bb80007103031371521352101352115211601b4feb6013cfe6e
012441414b01803a4b000000>DLGQMX+HelveticaNeue AddT42Char 
1 0 0 <00020033000101cc02c8000300070065b800142bb800082fb800002fb800
0810b80006d0b800062fb900020003f4b8000010b900040003f4b80009dc
00b800014558b800042f1bb90004000a3e59b800014558b800052f1bb900
0500043e59b8000410b900000002f4b8000510b900020002f43031012111
21131121110199fecd013333fe67029afd950299fd3902c7>DLGQMX+HelveticaNeue AddT42Char 
DLGQMX+HelveticaNeue /CharStrings get begin
/h 79 def
/i 80 def
/n 85 def
/o 86 def
/r 89 def
/z 97 def
end
DLGQMX+HelveticaNeue /Encoding get
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 122 /z put
pop
end
%ADOEndSubsetFont
reset_gvm
/EDMWMA+HelveticaNeue /DLGQMX+HelveticaNeue findfont ct_VMDictPut/EDMWMA+HelveticaNeue*1 [104{/.notdef}rp /h /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r 7{/.notdef}rp /z 133{/.notdef}rp]EDMWMA+HelveticaNeue nfEDMWMA+HelveticaNeue*1 [0 -24 -24 0 0 0 ]msf243 127.54 mo(horizon)[-13.344 -13.7761 -7.99182 -5.328 -11.5199 -13.7761 0 ]yshtrue set_gvm
%ADOBeginSubsetFont: UPEAAA+GillSans-Light Initial
ct_T42Dict begin
-0.527 -0.367 1.348 1.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /UPEAAA+GillSans-Light
Type42DictBegin
[<00010000000c000c000c000c4f532f3276c6e04f000000cc000000606376
74206faf71670000012c0000019e6670676d402d6d54000002cc000009ad
676c796607eeee7500002b70000001a068656164e7613f2700000c7c0000
0036686865610dc208dd00000cb400000024686d747882d4c5f500000cd8
00000f246c6f63617bc77c9600001bfc000007946d617870073d0aa70000
2390000000206e616d65583ad500000023b0000003c470726570e1716349
00002774000003fa6764697200000000000000000000000000040422012c
00050006059a053300000079059a0533000001a8006602120802020b0302
020104020203800002670000000000000000000000004d4f4e4f00400000
fb020587fe290131072f01e2200001f7cffe000003a1057e000000200000
750500000000750514000000000000000000ffffffffffffffffffffffff
9803140000000000ecff00000000ecff000000000000000029fe00000000
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffff42006a004e0041025000
5a0094029402510083026902000000080000000000000000000000000000
00000000000000000000000000000000000000005c006600b400b5004f00
3d00f7015801d20187017a025302ac02fc029901cc01ffffffffffffffff
fffffffffffffffffffffffffffffffff3018f0100000000000000000000
000060024703ffffffff750000006c0000006c0000006800580062000000
6200000000000000000000000000000000000000640000005a0000006000
000050000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000008500c700000000000000
0000a200a200680068007f007f00560056006802a2022a00002a005a0050
00640062006c007500000012fe2900000398001205750012000040393837
363534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c01b01843
58b119072b1b212121592d2c01b0184358b11a072b1b212121592d2c01b0
184358b0032510f221b000121b212121592d2c01b0184358b11b072b1b21
2121592d2c01b0184358b11c072b1b212121592d2c01b0184358b11d072b
1b212121592d2c01b0184358b11e072b1b212121592d2c4eb00014b04623
4344b0032510b10046e6b00013b00114b00010f221b001134db000122d2c
01b018435845646a234569b01943646060b0462344231020b046f02fb000
121b21212121592d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0462370b101463e01b0462370b10246453ab10200080d2d2cb0122bb0
022545b00225456ab0408b60b0022523442121212d2cb0132bb0022545b0
0225456ab8ffc08c60b0022523442121212d2cb000b0122b2121212d2cb0
00b0132b2121212d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2cb1000325456854
58b0032545b0032545606820b004252344b0042523441bb0032520456820
8a2344b00325456860b003252344592d2cb00325204568208a2344b00325
456860b0032523442d2cb00943588721c01bb01243588745b0112bb04723
44b0477ae41b038a45186920b04723448a8a8720b0a05158b0112bb04723
44b0477ae41b21b0477ae4595959182d2c208a4523456860442d2c456a42
2d2c01182f2d2c01b00425b004254964234564696120b080626ab00225b0
0225618cb0462344218a10b046f6212d2c01b0022545b002254564606ab0
0325456a6120b00425456a208a8b65b0042523448cb00325234421212d2c
01456823456961b00325456a6120b00425456a208a8b65b0042523448cb0
0325234421212d2c018a8a45642345646164422d2c01b0022543b04054b0
022543b000545a58b003252045b040614459b0022543b00054b0022543b0
40545a58b004252045b040604459212121212d2c014b525843b002254523
61441b2121592d2c014b525843b00225452360441b2121592d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c4b505845441b2121592d
2c01b005251023208af500b0016023edec2d2c01b005251023208af500b0
016123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a60
8a61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8ffba8b
1bb0468c59b0106068013a2d2c2045b003254652583f1b2111592d2c2045
b003254650583f1b2111592d2c00b00743b006430b2d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558591bb040545820
43b0005458591b2043b00054581bb00325b8ffc03859595959212121212d
2c4b52584365381b2121592d2c4b525843381b2121592d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2cb4000100000015b00826b00826b00826b0
08260f10161345683ab001162d2cb4000100000015b00826b00826b00826
b008260f1016134568653ab001162d2cb0134358031b02592d2cb0134358
021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a102320d023b0102b
b00558c01b3c59201011b00012012d2c4b53234b515a5820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5358b00425b00425496423
456469b0408b6120b080626ab00225b00225618cb0462344218a10b046f6
211b218a11231220392f592db800392c4bb800095058b101018e59b801ff
85b844001db9000900035f5e2db8003a2c2020456944b001602db8003b2c
b8003a2a212db8003c2c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db8003d2c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db8003e2c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db8003f2c2020456944b001602020457d691844b001602db800402c
b8003f2a2db800412c4b20b003265358b0801bb040598a8a20b003265358
b0022621b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b80003265358b0032545b8014050582321b8014023211bb0032545232123
21591b2159442db800422c4b535845441b2121592db800432c4bb8000850
58b101018e59b801ff85b800441db9000800035f5e2db800442c20204569
44b001602db800452cb800442a212db800462c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db80047
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db800482c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800492c2020456944b001602020457d6918
44b001602db8004a2cb800492a2db8004b2c4b20b003265358b0401bb000
598a8a20b0032653582321b0808a8a1b8a235920b0032653582321b800c0
8a8a1b8a235920b0032653582321b801008a8a1b8a235920b00326535823
21b801408a8a1b8a235920b80003265358b0032545b8018050582321b801
8023211bb003254523212321591b2159442db8004c2c4b535845441b2121
592db8004d2c4bb800085058b101018e59b801ff85b800441db900080003
5f5e2db8004e2c2020456944b001602db8004f2cb8004e2a212db800502c
2046b003254652582359208a208a49648a204620686164b0042546206861
64525823658a592f20b00053586920b000545821b040591b6920b0005458
21b0406559593a2db800512c2046b00425465258238a592046206a6164b0
042546206a61645258238a592ffd2db800522c4b20b0032650585158b080
441bb04044591b21212045b0c05058b0c0441b2159592db800532c202045
6944b001602020457d691844b001602db800542cb800532a2db800552c4b
20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a2359
20b0032653582321b800c08a8a1b8a235920b0032653582321b801008a8a
1b8a235920b0032653582321b801408a8a1b8a235920b80003265358b003
2545b8018050582321b8018023211bb003254523212321591b2159442db8
00562c4b535845441b2121592d00000000010000000100003665e6db5f0f
3cf5011b080000000000ab38d00000000000d56a242efbc1fd0f0acf08ed
00000008000100000000000000010000072ffe1800000b00fbc1fbfb0acf
0001000000000000000000000000000003c9080001000000000002390000
0239000000000000016a00730239004c0548009e042b00480596002704ec
003501c700a002aa00a402aa000e03c100420548008b016a00730281004e
016a0073023f000604000042040001cb0400004c0400008b0400001d0400
00540400007d0400003b0400007304000042016a0073016a00730548008b
0548008b0548008b023f00330666fffc05560008043f00a4056a006405ec
00a203ec00a4038100a005c1006605c100a201aa00a001aaffa4043f009c
03c100a2063f009e062b00a006960068041400a006960068049600a203c1
005e049600080596008304c10006083ffffe0581000004aa000005140012
026a008d023f0019026a000e054800e30400fff402aa009e036a004a0414
007f035600560414005403d5005201ec0017036a002503ec007f0181008f
0181ffc7036a00790181008f062b007b03ec007f04560056041400810414
004c02aa008102d50054026affd903ec007f036a000005aa000003d5000c
0356000c032b001402aa006401c700b002aa006005480089055600080556
0008056a006403ec00a4062b00a00696006805960083036a004a036a004a
036a004a036a004a036a004a036a004a0356005603d5005203d5005203d5
005203d500520181008f0181ffbc0181ffab0181ffb603ec007f04560056
0456005604560056045600560456005603ec007f03ec007f03ec007f03ec
007f03ec00330333007d03560056046a00c1032b00350400010605330064
0400007f0666003706660037078500cd02aa013902aa0046054800e706ec
ffe30696006805c9006d0548008b054800e7054800e704730004044c005c
04b6002f055600b004b4003503b20089023f002b02d50033055600440456
0056023f002d016a00730548008b03b0004e0473000e054800cf04000027
0400002708000112055600080556000806960068072b005406aa00540400
fff40800fff4032b0073032b0073016a0073016a00730548008b04210071
0356000c04aa00000115fe4804790021023f0021023f002103d5001903d5
001b03d50035016a0073032b0077086a00210556000803ec00a405560008
03ec00a403ec00a401aa00a001aaffc101aaffcc01aaffd2069600680696
0068069600680596008305960083059600830181008f02aa003b02aa0006
02aa003d02aa00fa02aa00a402aa00d902aa008902aa00c702aa003b0473
00cf055c00660479002b023900000114fe48023f00b202aa004403c1005e
02d5005205140012032b001401c700b00281004e0400fff505ecffd10479
004e04aa00000356000c041400a00414008105480108028101140281003d
0281005a06aa008006aa008006aa0086027f001702ab0224047300600239
0000023900000000000000000000055c0066065200500000fd190000fd19
0000fd3f0000fcd40000fbc10000fcd90000fdc90000fcc70000fd730000
fd1b0000fd170000fd860000fdb80000fcc6000000000548008b03c1ffaa
0181ffc703ec00a4055c000a03a800a0056a006403c1005e01aa00a001aa
ffc701aaffa406ee0006086800a205df000a046000a204c1000605c300a2
05560008046f00a4045c00a403a200a0056f001403ec00a406db002d0400
003b05c100a205c100a2046000a205560008063f009e05c100a206960068
05c100a2041400a0056a00640496000804c100060621002d0581000005d1
00a204a8005607a800a207b800a204fe000a062d00a4046f00a4056a0023
080200a204c30000036a004a042b00560364007f02db008f03df001403d5
005204f60033032b004203fc007f03fc007f03350081036a000004d5006f
03fc007f0456005603fc007f041400810356005603b800100356000c052f
005603d5000c03fa007f038f003d0548007f0558007f03c9000a04aa007f
035a007f0356003d057f008f03a2000c03d5005203d9000002dd008f0356
005602d500540181008f0181ffb20181ffc704d9000005d3007f03ec0000
033500810356000c03fc007f04d7000203c9000a069600680456005604c1
0004036a000c03a200a002db008f03a2001402db001406db002d04f60033
046000a20335008105d100a2040c007f04aa0000036a000004aa0000036a
00000581000003d5000c04b8005603a0003d04a800a203d3007f01aa00a0
0181008f05cb007103d5005205c100a203fc007f069600680456005604c1
00060356000c05560008036a004a056a00640356005603ec00a403d50052
062b00a003ec007f03c1005e02d5005405140012032b001405140012032b
00140400003308e500a00456005600000000000000000000000000000000
0000fdec0000fd560000fdd00000fe770000fe960000fd560000fd560000
fe960000fd560000fd560000fd560000000001c700b0038e00b000000000
000000000000000000000000089d007d06b4007d043f009c0556000801aa
00a0035400a004fe00a0066b00a004c10006066b00060815000609bf0006
072b00a005810000072b000008d5000003c100a2056a006405ec00a2063f
009e0181008f0302008f0483008f04eb008f036a000004eb0000066c0000
07ed00000556008f03d5000c0556000c06d7000c0181008f035600560414
0054062b007b05ecffd101aaffbf0181ffa901aa007d035400a00302008f
01aaffa405560073016a00730b0000a2091700a2073f0054056b00a20542
00a20302008f07d500a007ac00a0056d007f05560008036a004a01aaffbd
0181ffa706960068045600560596008303ec007f0596008303ecffea0596
008303ec007f0596008303ec007f0596008303ec007f05560008036affca
05560008036affca06ecffe30556004405c10066036a0025043f009c036a
00790696006804560056069600680456001f0b0000a2091700a2073f0054
05c10066036a0025062b00a003ec007f05560008036a004a06ecffe30556
0044069600680456005605560008036a004a05560008036a004a03ec00a4
03d5005203ec00a403d5005201aaffba0181ffa401aaffbe0181ffa80696
0068045600560696006804560056049600a202aa0081049600a202aa0081
0596008303ec007f0596008303ec007f03c1005e02d5005404960008026a
ffd905c100a203ec007f05560008036a004a03ec00a403d5005206960068
0456001f069600680456001f0696006804560056069600680456001f04aa
00000356ffad016a0073016a0073032b007305560008036a004a043f00a4
0414007f043f00a40414007f043f005004140018056a00640356005605ec
00a20414005405ec00a20414005405ec00a20414ffec05ec00a204140054
05ec00a20414005403ec001e03d5ffe603ec001e03d5ffe603ec00a403d5
005203ec00a403d5005203ec00a403d50052038100a001ec001705c10066
036affb305c100a203ec007f05c100a203ec007f05c100a203ec007f05c1
00a203ec007f05c100a203ec007f01aaff860181ff7001aaffc80181ffb2
043f009c036a0079043f009c036a0079043f0079036a000b03c100a20181
006703c100260181feb603c100260181feb603c100a20181ffa7063f009e
062b007b063f009e062b007b063f009e062b007b062b00a003ec007f062b
00a003ec007f062b00a003ecffea062b00a003ec007f0696006804560056
0696006804560056069600680456001f069600680456001f041400a00414
0081041400a004140081049600a202aa0081049600a202aa0081049600a2
02aaffb4049600a202aaffb403c1005e02d5005403c1005e02d5005403c1
005e02d5005403c1005e02d5005403c1005e02d5005404960008026affd9
04960008026affd904960008026aff1404960008026affd90596008303ec
007f0596008303ec007f0596008303ec007f0596008303ec007f05960083
03ecffea04c10006036a000004c10006036a0000083ffffe05aa0000083f
fffe05aa0000083ffffe05aa0000083ffffe05aa0000083ffffe05aa0000
0581000003d5000c0581000003d5000c04aa00000356000c05140012032b
001405140012032b001405140012032bff8a03ecffea026affd905aa0000
0356000c05560008036a004a05560008036a004a05560008036a004a0556
ffb1036afeda05560008036a004a05560008036a004a05560008036a004a
05560008036a004a05560008036a004a05560008036a004a05560008036a
004a05560008036a004a03ec00a403d5005203ec00a403d5005203ec00a4
03d5005203ec00a403d5005203ecff2f03d5fef603ec00a403d5005203ec
00a403d5005203ec00a403d5005201aa00480181003201aa007d01810067
069600680456005606960068045600560696006804560056069600510456
ff3006960068045600560696006804560056069600680456005605960083
03ec007f0596008303ec007f04aa00000356000c04aa00000356000c04aa
00000356000c04aa00000356000c03ec001e03d5ffe603ec00a403d50052
03ec00a405c100a203d5005203fc007f04c10004036a000c06db002d04f6
003305560008036a004a05560008036a004a03ec00a403d5005205cb0071
03d5005206db002d04f600330400003b032b004205c100a203fc007f0696
0068045600560696006804560056056a00230356003d04c100060356000c
04c100060356000c04a80056038f003d062d00a404aa007f06ecffe30556
004405560008036affd105560008036a004a056a006403560056056a0064
03560056056a00640356005605ec00a2057e005403ec002603d5ffed03ec
00a403d5005203ec00a403d5005203ec00a403d5005205c10066036a0025
05c10066036a002505c10066036a002505c1006605c100a203ec007f01aa
ff9e0181ff8801aafed30181febd01aa004c01810036043f009c036a0079
03c100a20181000203c100a20181007d03c100a20181ffb6062b00a003ec
007f062b00a003ec007f0696006804560027069600680456005606960068
04560056049600a202aa0081049600a202aa0081049600a202aa008103c1
005e02d5005403c1005e02d5005404960008026affd90496000803d4ffd9
0596008303ec007f0596008303ecfff10596008303ec007f0596008303ec
007f0596008303ec007f0596008303ec007f083ffffe05aa000004aa0000
0356000c0000fd190000fd190000fcc7016a007302aa004602ab02240556
0008036affd1036a004a01aafed30181febd018100020596008303ecfff1
03d5000c063f009e062b007b049600a202aa0081016a0076016a0076016a
0076016a0076023f00360800039c080003df040001df040001cd040001cd
02aafdf202aafd5b02aafda002aafd9d026afdd8026afd59000000220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
00220022002200220022002200a000a000a000a000a000a000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0
00d000d000d000d000d000d000d00001000003c9005a0007006e00070002
0010002f0057000002fa09ad000400010000001f017a0001000000000000
0052000000010000000000010009005200010000000000020005005b0001
000000000003002500600001000000000004000f00850001000000000005
000800940001000000000006000e009c0001000000000007009700aa0001
00000000000900090141000100000000000b001b014a000100000000000c
0038016500010000000000100009019d0001000000000011000501a60001
000000000102000901ab0001000000000103001001b40003000104040002
000401c40003000104060002000a01c80003000104070002000801d20003
000104090002000a01da00030001040b0002000801e400030001040c0002
000601ec0003000104100002000e01f20003000104110002000602000003
000104120002000602060003000104130002000a020c0003000104140002
0008021600030001041600020008021e0003000104190002000e02260003
0001041d0002000a023400030001080400020004023e000300010c0a0002
000802424469676974697a6564206461746120636f707972696768742054
6865204d6f6e6f7479706520436f72706f726174696f6e20313939312d32
3030312e20416c6c207269676874732072657365727665642e2047696c6c
2053616e734c6967687447696c6c2053616e73204c696768743b2031332e
30643165343b20323031372d30362d313747696c6c2053616e73204c6967
687431332e306431653447696c6c53616e732d4c6967687447696c6c2053
616e73aa20697320612074726164656d61726b206f6620546865204d6f6e
6f7479706520436f72706f726174696f6e20526567697374657265642069
6e2074686520552e532e20506174656e7420616e642054726164656d6172
6b204f666669636520616e64206d61792062652072656769737465726564
20696e206365727461696e206a7572697364696374696f6e734572696320
47696c6c687474703a2f2f7777772e616766616d6f6e6f747970652e636f
6d687474703a2f2f7777772e616766616d6f6e6f747970652e636f6d2f68
746d6c2f64657369676e65722f6465735f696e6465782e68746d6c47696c
6c2053616e734c696768744c6967617475726573436f6d6d6f6e204c6967
6174757265737d309ad4004d0061006700650072004600650069006e004c
0069006700680074004f00680075007400460069006e004c006500670067
00650072006f30e930a430c8ac00b294ccb4004c00690063006800740054
0079006e006e004c0065007600650421043204350442043b044b0439004d
00610067006500727ec64f5300460069006e0061b8004d2b01ba000400c3
004f2b01bf00c400730063004500330020000000552bbf00c50069005600
4500330020000000552bbf00c600610056004500330020000000552b00bf
00c1007e0063005500330020000000552bbf00c2008d0074005500400020
000000552bbf00c300710056004500330020000000552b00ba00c7000400
542bb800c020457d691844b800432bb800392b407c007a207a0200793079
02007220723072036071012071df71024064506402306440647064ff6404
70630140638063020063406350639063042061506160618061b061052060
c06002005f305f605f03405d705d02205d305d705d03005c105c205c605c
04205b01205b0160410160409040c040033f39641f393b641fb8ffc0b3bd
1d1d36b8ffc0b3bd191a36b8ffc0b3bd0f1036b8ffc04064bd090d360fbb
0fbc2fb72fb83fb73fb84fb74fb80800b900bb02ffb9ffba0200b900bb1f
bb2fbb040900b901085985501f9795291f4f955f956f950384552f1f5593
2f1faf7f321f9193491f937f501f8785641f817f641f8385961f857f3c1f
7d7f961fb8ffc040187f4348361e78161d77161c76161b75161a74161973
167016b8080040181d6c6f16171c6c6f171b6c6f196b6e161b6b6e7f721a
6a14b8080040ff1d666914151c6669151b6669196568141b656885711a99
43fa219743fa219343fa219143fa218d43fa218b43fa218943fa218743fa
218543fa218343fa218143fa217f43fa217d43fa2132995c081f975d081f
955d081f935c081f915c081f8d57081f8b57081f8957081f8758081f8558
081f8358081f8157081f7f57081f7d57081f6361081f6261081f325d5b08
1f5c5b081f5856081f5756081f6155081f6055081f325b55081f5655081f
1234150f33150c3215093115063015032f15002e152c2d0f2a2b0e28290f
26270e24250f22230e20210f1e1f0e1b1c1d0d18191a0d1516170d121314
0d0f10110c0c0d0e0c090a0b0c0607080c0304050c00401501020c1b3b08
1f0f3a081f0339081f0038081f503301b0124b004b5442b013014b004b53
42b0332b4bb8080052b0322b4bb008505b58b101018e59b0332bb00288b8
010054b00488b8020054b012435a5b58b80119b101018e851bb0124358b1
0401b80180858d8d1bb10401b80180858d8d59592b1db0644b5358b0701d
59b0324b5358b0901d59002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b012b002b2b2b2b012b2b002b2b2b2b2b012b2b2b
2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b
2b2b2b2b2b2b2b2b2bb018b0324b53422b2b2b2b2b2bb109322b4bb06452
422b2b2b2b2b2b2b2b2b2b2b742b2b5e735e737374742b2b2b2b2b2b7373
737473737473737373747573747374737373000000>
[417 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 68 38 <000300a4000004120575000c0013001b00994033eb10eb12ef17eb1a046c
17db10db12db1a041603010614930f0e5f0e6f0e030e401112370e0e0c0d
93000315930c1276040108b8ffecb3090a3704b8ffecb3090a3708b8fff6
b60e1037117d0604b8ffec401f1113370440080a370604060802f604f608
020404197d08b81d0e157f0cb51c10f6fd3c10feed392f5d712b2b33ed2b
2b2b5d003fed3fed12392f2b5ded39313001715d5d132132161514070411
14062321131133201110210311213236351021a40123e5ecc90143fdd8fe
676c96017dfe7f920121b3bafe640575c0a9ca6d46fee4aac9051bfdd301
160117fd78fdc79a81011e00>UPEAAA+GillSans-Light AddT42Char 
1 320 44 <000100a20000051f0575000b002e401704930909060b08030206120a027f
01b60d09057f06b50c10f6fd3c10fefd3c003f3c3f3c7c12392f18ed3130
011123112111231133112111051f6dfc5c6c6c03a40575fa8b0296fd6a05
75fd7b028500>UPEAAA+GillSans-Light AddT42Char 
1 0 0 <0002010000000700060000030007001b400b070104010005030904000810
decd10decd002f33cd2fcd3130211121112521112101000600fa800500fb
000600fa00800500>UPEAAA+GillSans-Light AddT42Char 
UPEAAA+GillSans-Light /CharStrings get begin
/B 38 def
/H 44 def
end
UPEAAA+GillSans-Light /Encoding get
dup 66 /B put
dup 72 /H put
pop
end
%ADOEndSubsetFont
reset_gvm
/EDMWMB+GillSans-Light /UPEAAA+GillSans-Light findfont ct_VMDictPut/EDMWMB+GillSans-Light*1 [66{/.notdef}rp /B 5{/.notdef}rp /H 183{/.notdef}rp]EDMWMB+GillSans-Light nfEDMWMB+GillSans-Light*1 [42 0 0 -42 0 0 ]msf122.016 53 mo(BH)[22.3022 0 ]xshgsave
102 748 mo
497 748 li
497 336 li
102 336 li
cp
clp
1.852 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
102.926 757.995 mo
105.055 439.788 li
104.633 415.341 130.13 370.183 171.087 357.842 cv
233.546 339.022 326.599 340.788 357.461 338.685 cv
404.322 335.493 496.977 337.622 496.977 337.622 cv
0.988 0.835 0 0 cmyk
@
grestore
3 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
433.06 538.94 mo
431.999 540 li
338.999 633 li
@
434.333 547.001 mo
439 533 li
425 537.667 li
432 540 li
cp
f
471.31 634 mo
469.81 634 li
338.289 634 li
@
466.511 640.6 mo
479.711 634 li
466.511 627.4 li
469.811 634 li
cp
f
0 0 0 1 cmyk
true set_gvm
%ADOBeginSubsetFont: CMKQMX+MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /CMKQMX+MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /r putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/r <1C60D8A8C9B825FA276057E42F8B6B56BE61CF56C49E848F1F8C0DBB4CC355A060580D0A93A5AC675863E967C6888348BB6A0307CAE2C7E5A0C04CCE8153CABABF82A896EFF75F39B554C74CA1E2126AA0E73BE8B772EBBEE30A71972C630D7D24526AEEFC04035142C31FA6B3B108962236> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
reset_gvm
/EDMWMC+MyriadPro-Regular /CMKQMX+MyriadPro-Regular findfont ct_VMDictPut/EDMWMC+MyriadPro-Regular*1 [114{/.notdef}rp /r 141{/.notdef}rp]EDMWMC+MyriadPro-Regular nfEDMWMC+MyriadPro-Regular*1 [30 0 0 -30 0 0 ]msf486 641.89 mo(r)sh66.438 57.645 mo
78.517 57.645 li
78.517 705.339 li
66.438 705.339 li
cp
/1 
[/DeviceCMYK] /CSA add_res
level3{
gsave
clp
[0.18396 0 0 6.53473 65.949 53.0406 ]ct
/0 
<<
/ShadingType 2 
/BBox [2.6582 0.704603 68.3192 99.8203 ] 
/ColorSpace /1 /CSA get_res
/Coords [0 0 100 0 ]
/Domain [0 1 ]
/Extend[ false false]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Ul^X:W0<'8Wf`*6XHnK8YEj`6Z'Kl5[$l;5\!hS6\XRe6]qB@5^S,R5_4kg5`2765a/<T7af/i5bcG86
cE1J5dB6b3e$<15f!JO4fX+[2gp^65hRQK4hmuT2j1\/2jM+;2k.jM1kJ9S-lGQ%/m)D:-mDhC,nB!a,
n]Nm)n]<^&o?B'%oZ]*#p<G<"psCSuq9^YuqU$\sqpQeqrR2qprmW"ns4/.ms4/%is48%gs48"fs4.kc
s4.hbs4.hbs4._^s4.Y\s4.PYs47PXs47MWs47DSs4@MVs47>Qs4.2Ns4.2Ns4%)Ls4%)Lrm^uKr7(cI
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[0.18396 0 0 6.53473 65.949 53.0406 ]ct
clp
/0 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~USO``Vl6PnWN)u!X/rG+Y-5%5Yd(L>Za@-J[^W`U\@K2_]Y2"m^;%Fu^qmk(_o0L4`lH-@aN;QHbKS2T
c-=P[d*U1fdaHUoe^`7%f@S[.g=tE<h;-rEhVR/JiSrnXj5]4]jlPXek2tjikiqBtlg*p(m-O-,mdKZ7
nF5r:nF5r;nac8BoCMSGo_%nNp@n=Vq"XX[q>'j_qYL'cqu$BjrVc]orr2oss8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!rr2orrVcZl
~>
<~O-#KeP*1ujOckomQ'IW"Q'IW"Q'Rc(R@0J2R@9S5R[]h=T:hjMTV8'QTq\<XV5C,eVPg>jW2ZbrX/rD(
XK8P+Xf\b0Yd(L>Za7!EZa7$H[^NZS\@B)[\[f;`]Y2%n^:q@s^V@S"^qde&_Sa=1`Poj:`l?'>aN2KF
ai_cKb/qcIb0/#Qbfn;Uc-=MYcd:%cd*U.dd*U.edF-IkdaHRme'ldqeCE+"e^`4$f%/F'f%/F'f%/F&
e^`4#e^`4#e^`4#e^`4#e^`4#f%/F'f%/F'f%/F'f@SX+f@SX+f%/F'e^`4#e^`4#eC<!teC<!teC<!t
~>
<~NfB!TM26tDLk^V:K7\]+JUi9#IsuclH?jd]H$FRXGBS(LEH#l8Df0H1DJa3*BkV0nBP1siARo=]@UW\Q
?sm>J?!U]?>?b96=BJX+<`W4#<)cdo;Gg7e:JX_[9M7uM8kMZH84Z6@7R]^56UO1,5sRY!5!D+m4?GSb
3B/uW2`EZR2)I*E1,1L;0J>(3/M&D%.Olns.4?Sl-7'o^,9e<T+<VaI*ZZ4>)]BS2(`*u(()@Z#'bh>q
',)#m&eYfi&ePZd%hB-[%1EUP$47(G#RC\A#6kA9"U,&5"U"r1!WiB'zzzz!!!!!~>
<~;c?Rk;,C(c:esk_:JX_[9h\5S9M8#N8kDTG8OuBC84Q-<6pj=/6UF+*5sR\"5<_7p5!;%k4$#D_3B/uW
2`EWP1c.!E1,:R<0/"q1/M/M).k<)!.4HYn-RU5e,U4KW+sJ0R+<VaJ*ZZ4?)]K\6)&O/+(Ddi&'bqDs
'+toi&J5Te&.]9]%LrsX%1EXQ$4."E#RC\A#RC\@#6tJ<"pP88"U,&4"9\i0!s8W,!WiE(!<E3%!<E3%
!<E3%!<E3%!<E3%zzzzzzzzzzzz!!!!!~>
]
>>
0 0 100 0 [2.6582 0.704603 68.3192 99.8203 ]false false []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
[9 9 ] 0 dsh
256 51 mo
256 709 li
0.749 0.678 0.671 0.902 cmyk
@
1.852 lw
[] 0 dsh
77 297 mo
77 278.76 264.404 264 496 264 cv
0.988 0.835 0 0 cmyk
@
77 195 mo
491 192 li
@
0 0 0 1 cmyk
true set_gvm
%ADOBeginSubsetFont: CMKQMX+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginEDMWMC+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B896187A> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F872B2DD35BA9F526AA31403949B904F2FBFFA219269CB793CC5D4E2B92EAFFDD1A748A3F84A703B249550493724F424782ACE69D75F53E9659B9B2838FB0059CC29141042064D2E7FC418574> |-/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC915E5C8F246730235E0969B06AB4DFB6CD5E100F262B534390FC7CA7055C28ED1E42C84B636867D8A31D300B2F5F2294ED82992DF7233E5C523837B149A4D365755830345623E9A4E055720FE49A232DC2065A07388CBE9EB02B9DD8FF5931F0EA71B8534F17457D88BEF90224252D97A481A1378A56A9E08907> |-/a <1C60D8A8C9B75946039FC5B56ED6A5087B2F0B1630F4B839ECBCEEA44E703DC4106323B0FE7E2AB642908C4D63FEEE93FCF9AFDA709EC76B2A6B438866EA54711295464BD953D3EBDCF028F138C8DA98583AEFEA07E0E3D9318DCAA5235C81F8CAE77869F7E7DB4FE2A895A8751E9713E402E5F56B8D9F8A85A4E816A3F5736139BBC6E35318419585355BABA3365F9437068F54844360043E93A0587094DC5B241D2351AD29DD00EC> |-/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C7596B2C0CA5D427D1A2992AF5BF4D94EE82845832F4DD4400321814ECD5D3CE66072F7E5E7C5430EC469D5F7161571A32A96A021C1AB03ECA050447FC0A> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6AE0C2DA4B5701EEA600446C4909FC3F4672ADE87F21B90EA46B653B923660515A1F0669DD61FD45BFFE5F30C06F25F4918DC3BDE9DA8749DE48AB2064D02996B1992D92D740E924FC0328428444D7F57E818435DFAAB95E4B5> |-/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F5CDF5AA27A54E9CADF1B0D48AFADD31B7AC744861D428C2E9828C64107AC3C1F370E77D657249E67D01B32CA8DE47286033022B7FE2ADAB5880B8BA15ADAB506E67E787503255249A5C18EAB3949583AC294D57039D73A57012E800A5F1DE0015B558B76663CAEA443CC43AB1C7D0EA581DBA077AAE05CC1ABFBCB18987F40F7D67565C854506C79470414AF94EA3318EB3473654AC76A1F02E1D426F218B7D2A89976E745CD03CE15AD5DAD800440564510FEC150DF1BF6> |-/h <1C60D8A8C9B790A816BA887E1EEB5E8F3559B4B8B5AF3C1F8CE7A16D3E22CB112738E5F8A1CE5D2620C4575F3210C0FAB8897CBBEEEBEDB653A75B1382B689444B1091E64895264926A7E71A69D151CC5CB184DF1BCC2A12C3> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A550BE990A2B15CF4B9FA0C60C03D9F761CF6CBFF51A513DE> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/s <1C60D8A8C9B70FAD6F31E6985339BF1E83F7AE60D35F00D12D254421A910254A631180139D8657646BEFE6F4E230D67403BE5D54183419D174C6F3CC672FE0922A5983FC4713FC0C33086E01CB29AB5EA82B559EB0CB9E6675519A48B6C99CE7F0B78BC22FE4480BA1B895> |-/t <1C60D8A8C9B821B35E7D138AF8799F79BEF170B4854FD4064F6438DB12B96A336B1B646B9C985443CCD47885AEB163F96326A737220357369BBCF971367AB24D31D50A9A11CBCBD128D32F4EE4E3175171904BA0C5> |-/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62DD6E8467166462C4D4F8F41F04B52D63863D672C5433416D6DF2E3C32BCEEA94FF3BC9046373D2B57D2890F7578E8913662C9F65FD95A5790251E118509816817E1CD6A7C5BE0B48DC194> |-systemdict /gcheck known {setglobal} if end {end} ifendEDMWMC+MyriadPro-Regular /Encoding getdup 32 /space putdup 78 /N putdup 83 /S putdup 97 /a putdup 99 /c putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
reset_gvm
/EDMWMC+MyriadPro-Regular*1 [32{/.notdef}rp /space 45{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /u 138{/.notdef}rp]EDMWMC+MyriadPro-Regular nfEDMWMC+MyriadPro-Regular*1 [18 0 0 -18 0 0 ]msf418 329 mo(Nice slice)[12.0241 4.21188 7.95596 9.01813 3.8161 7.12793 4.24786 4.21188 7.95596 0 ]xsh401.998 256.928 mo(Natural slice)[11.8441 8.60391 5.95789 9.91791 5.79593 8.6759 4.24786 3.8161 7.12793 4.24786 4.21188 7.95596 0 ]xsh394.006 184.928 mo(Straight slice)[8.81995 5.95789 5.7959 8.6759 4.21188 10.0621 9.91788 5.95789 3.8161 7.12793 4.24786 4.21188 7.95596 0 ]xsh52.3416 449.192 mo
52.8116 449.287 53.539 449.479 53.703 449.479 cv
54.2664 449.479 54.5486 449.05 54.5486 448.549 cv
54.5486 448.168 54.2902 447.597 53.6563 447.359 cv
53.539 447.31 49.2423 446.215 48.6559 446.097 cv
47.6225 445.834 45.3917 445.239 44.547 445.048 cv
44.1475 444.929 42.645 444.024 41.9405 443.262 cv
41.7289 443 40.9071 442.071 40.9071 440.69 cv
40.9071 439.856 41.2827 439.379 41.2827 439.332 cv
41.4476 440.309 42.1989 441 43.0207 441 cv
43.5374 441 44.1475 440.667 44.1475 439.785 cv
44.1475 438.927 43.3963 438.023 42.2694 438.023 cv
41.1655 438.023 40.2035 439.047 40.2035 440.69 cv
40.2035 442.786 41.7527 444.191 42.645 444.811 cv
41.2131 445.048 40.2035 446.215 40.2035 447.716 cv
40.2035 449.192 41.4476 449.812 42.0111 450.098 cv
43.0912 450.669 44.9931 451.098 45.0866 451.098 cv
45.3917 451.098 45.3917 450.764 45.3917 450.717 cv
45.3917 450.383 45.3687 450.36 44.6642 450.169 cv
42.4334 449.621 40.9071 448.979 40.9071 447.811 cv
40.9071 447.263 41.1655 446.835 42.3629 446.835 cv
43.0207 446.835 43.3725 446.929 45.0161 447.335 cv
52.3416 449.192 li
/2 
[/DeviceGray] /CSA add_res
0 gry
f
43.8424 405.727 mo
43.8424 405.227 43.8424 404.631 43.2084 404.631 cv
42.5744 404.631 42.5744 405.227 42.5744 405.68 cv
42.5744 424.923 li
42.5744 425.376 42.5744 425.995 43.2084 425.995 cv
43.8424 425.995 43.8424 425.376 43.8424 424.899 cv
cp
49.9934 405.68 mo
49.9934 405.227 49.9934 404.631 49.3594 404.631 cv
48.7263 404.631 48.7263 405.227 48.7263 405.727 cv
48.7263 424.899 li
48.7263 425.376 48.7263 425.995 49.3594 425.995 cv
49.9934 425.995 49.9934 425.376 49.9934 424.923 cv
49.9934 405.68 li
f
44.0772 379.124 mo
41.5413 379.124 39.0054 379.267 36.6582 380.387 cv
33.6294 381.887 33.1127 384.506 33.1127 385.864 cv
33.1127 387.793 33.9345 390.127 36.8927 391.437 cv
39.0759 392.485 41.5413 392.628 44.0772 392.628 cv
46.4482 392.628 49.2892 392.509 51.7078 391.199 cv
54.2666 389.818 54.9006 387.46 54.9006 385.887 cv
54.9006 384.149 54.2437 381.719 51.2378 380.291 cv
49.0546 379.267 46.5654 379.124 44.0772 379.124 cv
54.1961 385.887 mo
54.1961 387.15 53.4219 389.031 50.3693 389.627 cv
48.4674 389.961 45.5567 389.961 43.7015 389.961 cv
41.6585 389.961 39.5697 389.961 37.8556 389.722 cv
34.0985 389.103 33.8172 386.698 33.8172 385.887 cv
33.8172 384.84 34.3806 382.72 37.5267 382.101 cv
39.2875 381.768 41.7062 381.768 43.7015 381.768 cv
46.0726 381.768 48.2328 381.768 50.252 382.125 cv
53.257 382.625 54.1961 384.435 54.1961 385.887 cv
f
gsave
109.676 670.774 mo
138.224 670.774 li
138.224 568.689 li
109.676 568.689 li
cp
clp
130.947 668.755 mo
131.453 668.857 132.236 669.059 132.412 669.059 cv
133.018 669.059 133.322 668.579 133.322 668.075 cv
133.322 667.671 133.07 667.065 132.387 666.813 cv
132.236 666.738 127.612 665.603 127.006 665.451 cv
125.869 665.174 123.495 664.568 122.56 664.366 cv
122.13 664.24 120.513 663.282 119.78 662.475 cv
119.529 662.197 118.643 661.214 118.643 659.75 cv
118.643 658.867 119.048 658.338 119.048 658.313 cv
119.225 659.322 120.033 660.078 120.942 660.078 cv
121.473 660.078 122.13 659.7 122.13 658.792 cv
122.13 657.858 121.346 656.925 120.109 656.925 cv
118.921 656.925 117.911 658.01 117.911 659.75 cv
117.911 661.945 119.579 663.458 120.513 664.089 cv
118.997 664.366 117.911 665.603 117.911 667.192 cv
117.911 668.755 119.225 669.412 119.831 669.714 cv
120.994 670.319 123.04 670.773 123.141 670.773 cv
123.495 670.773 123.495 670.421 123.495 670.37 cv
123.495 670.017 123.444 669.992 122.711 669.79 cv
120.286 669.21 118.643 668.529 118.643 667.293 cv
118.643 666.712 118.921 666.233 120.21 666.233 cv
120.942 666.233 121.296 666.334 123.065 666.789 cv
130.947 668.755 li
f
121.827 622.619 mo
121.827 622.09 121.827 621.459 121.145 621.459 cv
120.463 621.459 120.463 622.09 120.463 622.569 cv
120.463 642.951 li
120.463 643.43 120.463 644.086 121.145 644.086 cv
121.827 644.086 121.827 643.43 121.827 642.925 cv
cp
128.421 622.569 mo
128.421 622.09 128.421 621.459 127.739 621.459 cv
127.057 621.459 127.057 622.09 127.057 622.619 cv
127.057 642.925 li
127.057 643.43 127.057 644.086 127.739 644.086 cv
128.421 644.086 128.421 643.43 128.421 642.951 cv
128.421 622.569 li
f
112.025 597.42 mo
111.216 597.218 110.888 597.117 110.787 596.461 cv
110.736 596.159 110.736 595.073 110.736 594.392 cv
110.736 591.971 110.736 588.187 114.122 588.187 cv
115.284 588.187 117.633 588.742 118.947 590.079 cv
119.831 590.962 120.942 592.753 120.942 595.83 cv
120.942 599.64 li
cp
121.372 592.526 mo
120.614 589.07 118.239 585.035 114.804 585.035 cv
111.873 585.035 109.676 588.087 109.676 592.552 cv
109.676 602.238 li
109.676 602.918 109.676 603.247 110.358 603.247 cv
110.736 603.247 110.736 602.918 110.736 602.288 cv
110.736 602.213 110.736 601.557 110.812 601.002 cv
110.888 600.371 110.913 600.069 111.343 600.069 cv
111.494 600.069 111.595 600.093 111.999 600.22 cv
130.291 604.76 li
131.629 605.113 131.907 605.163 131.907 607.863 cv
131.907 608.469 131.907 608.771 132.589 608.771 cv
132.968 608.771 132.968 608.367 132.968 608.317 cv
132.968 607.358 132.867 604.962 132.867 604.029 cv
132.867 603.07 132.968 600.648 132.968 599.69 cv
132.968 599.438 132.968 599.01 132.286 599.01 cv
131.907 599.01 131.907 599.312 131.907 599.967 cv
131.907 601.228 131.907 602.187 131.301 602.187 cv
131.073 602.187 130.922 602.111 130.719 602.087 cv
121.676 599.841 li
121.676 595.78 li
121.676 592.678 123.595 592.071 124.783 592.071 cv
125.288 592.071 126.349 592.35 127.132 592.552 cv
128.092 592.778 129.355 593.106 130.037 593.106 cv
133.701 593.106 133.701 589.02 133.701 588.566 cv
133.701 585.69 130.265 584.48 129.785 584.48 cv
129.381 584.48 129.381 584.858 129.381 584.909 cv
129.381 585.211 129.608 585.262 129.861 585.337 cv
132.387 586.195 132.968 587.658 132.968 588.439 cv
132.968 589.55 132.21 589.802 130.871 589.802 cv
129.835 589.802 128.092 589.6 127.006 589.448 cv
126.526 589.398 125.869 589.323 125.389 589.323 cv
122.762 589.323 121.726 591.593 121.372 592.526 cv
f
136.48 581.427 mo
136.808 581.503 137.39 581.654 137.465 581.654 cv
137.996 581.654 138.223 581.225 138.223 580.847 cv
138.223 580.418 137.92 580.04 137.692 579.913 cv
137.49 579.813 136.732 579.611 136.227 579.485 cv
135.772 579.384 134.686 579.106 134.079 578.98 cv
133.575 578.83 133.044 578.678 132.488 578.577 cv
131.528 578.299 131.326 578.249 130.366 577.568 cv
129.406 576.912 128.169 575.802 128.169 574.011 cv
128.169 572.624 129.381 572.598 129.836 572.598 cv
131.25 572.598 133.903 573.632 134.888 574.011 cv
135.57 574.263 135.772 574.365 136.176 574.365 cv
137.44 574.365 138.223 573.33 138.223 572.119 cv
138.223 569.748 134.939 568.688 134.585 568.688 cv
134.282 568.688 134.282 568.991 134.282 569.066 cv
134.282 569.395 134.408 569.42 134.686 569.521 cv
136.58 570.076 137.566 571.085 137.566 572.044 cv
137.566 572.548 137.238 572.624 136.732 572.624 cv
136.176 572.624 135.874 572.523 134.813 572.094 cv
134.055 571.791 131.554 570.833 130.214 570.833 cv
127.915 570.833 127.511 572.649 127.511 573.91 cv
127.511 575.878 128.724 577.215 129.659 577.921 cv
128.017 578.097 127.511 579.485 127.511 580.468 cv
127.511 581.477 128.244 582.032 128.775 582.335 cv
129.659 582.865 131.022 583.193 131.15 583.193 cv
131.452 583.193 131.452 582.865 131.452 582.789 cv
131.452 582.462 131.376 582.437 130.745 582.284 cv
129.33 581.906 128.169 581.453 128.169 580.544 cv
128.169 579.913 128.699 579.763 129.33 579.763 cv
129.785 579.763 130.67 579.963 131.3 580.141 cv
131.958 580.292 132.917 580.544 133.449 580.67 cv
136.48 581.427 li
f
grestore
gsave
260 748 mo
655 748 li
655 415 li
260 415 li
cp
clp
260.926 836.995 mo
263.055 518.788 li
262.633 494.341 288.13 449.183 329.087 436.842 cv
391.546 418.021 484.599 419.789 515.461 417.685 cv
562.322 414.492 654.977 416.622 654.977 416.622 cv
0.988 0.835 0 0 cmyk
@
grestore
0 0 0 1 cmyk
true set_gvm
%ADOBeginSubsetFont: CMKQMX+MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginEDMWMC+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/d <1C60D8A8C9B7E7C1D822193538A56B13640F1C3EE80C415BBD7C96E2BF73396DB0D9C9230D7704B1D4903E1B0E823160B234020A503047A686661C34B5004CDCF7754772CF263A11D6B8FC7868BB12CD6A915ACD880C8B0638C394417FA37BE535ADC2EFE334704B66B55FC93ABE48255DC988A5DFABA294BF5BF2E02BE2314DCE6531FAA5DCB4D56DF6C62A6139D41B024DA04272B4B444C44FEBCD2F65888A63654699808BEDAA> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADC71D2D61D78D40F7491649EB6D9D0DC1C64B5ED89A2BADD> |-/z <1C60D8A8C9B76F05D40D9AF06FCC0CB6A4BA81599D57D9D37D4BF9C14F15A8D32D2E3D42B45C7B783234200EF0002FF66CA55EC2249D32D7696A11C435D25A2DCE4A5C1B80D4> |-systemdict /gcheck known {setglobal} if end {end} ifendEDMWMC+MyriadPro-Regular /Encoding getdup 100 /d putdup 119 /w putdup 122 /z putpop%ADOEndSubsetFont
reset_gvm
/EDMWMC+MyriadPro-Regular*1 [32{/.notdef}rp /space 45{/.notdef}rp /N 4{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l 5{/.notdef}rp /r /s /t /u /.notdef /w 2{/.notdef}rp /z 133{/.notdef}rp]EDMWMC+MyriadPro-Regular nfEDMWMC+MyriadPro-Regular*1 [18 0 0 -18 0 0 ]msf356 412 mo(Schwarzschild slice)[8.98193 8.06396 9.75586 13.1759 8.6759 6.04794 7.70386 7.12793 8.06396 9.98987 4.21191 4.24786 10.1519 3.8161 7.12793 4.24786 4.21185 7.95599 0 ]xsh241.876 669.645 mo
242.343 669.742 243.066 669.937 243.229 669.937 cv
243.789 669.937 244.069 669.474 244.069 668.987 cv
244.069 668.597 243.813 667.988 243.182 667.769 cv
243.066 667.696 238.795 666.575 238.212 666.452 cv
237.184 666.185 234.967 665.599 234.127 665.405 cv
233.73 665.258 232.237 664.357 231.536 663.553 cv
231.326 663.309 230.509 662.335 230.509 660.921 cv
230.509 660.068 230.882 659.581 230.882 659.556 cv
231.046 660.531 231.793 661.262 232.61 661.262 cv
233.124 661.262 233.73 660.896 233.73 660.019 cv
233.73 659.118 232.983 658.216 231.863 658.216 cv
230.766 658.216 229.81 659.264 229.81 660.921 cv
229.81 663.066 231.35 664.503 232.237 665.137 cv
230.813 665.405 229.81 666.575 229.81 668.134 cv
229.81 669.645 231.046 670.254 231.606 670.571 cv
232.68 671.156 234.571 671.571 234.664 671.571 cv
234.967 671.571 234.967 671.253 234.967 671.181 cv
234.967 670.863 234.944 670.815 234.244 670.62 cv
232.026 670.06 230.509 669.401 230.509 668.231 cv
230.509 667.671 230.766 667.208 231.956 667.208 cv
232.61 667.208 232.96 667.306 234.594 667.745 cv
241.876 669.645 li
0 gry
f
233.427 625.148 mo
233.427 624.66 233.427 624.027 232.797 624.027 cv
232.166 624.027 232.166 624.66 232.166 625.123 cv
232.166 644.813 li
232.166 645.276 232.166 645.886 232.797 645.886 cv
233.427 645.886 233.427 645.276 233.427 644.765 cv
cp
239.541 625.123 mo
239.541 624.66 239.541 624.027 238.911 624.027 cv
238.281 624.027 238.281 624.66 238.281 625.148 cv
238.281 644.765 li
238.281 645.276 238.281 645.886 238.911 645.886 cv
239.541 645.886 239.541 645.276 239.541 644.813 cv
239.541 625.123 li
f
224.395 600.73 mo
223.648 600.535 223.321 600.437 223.228 599.804 cv
223.204 599.512 223.204 598.463 223.204 597.805 cv
223.204 595.466 223.204 591.811 226.332 591.811 cv
227.382 591.811 229.553 592.347 230.79 593.615 cv
231.606 594.468 232.61 596.222 232.61 599.171 cv
232.61 602.85 li
cp
233.03 595.978 mo
232.33 592.664 230.136 588.765 226.962 588.765 cv
224.231 588.765 222.224 591.714 222.224 596.027 cv
222.224 605.385 li
222.224 606.043 222.224 606.335 222.855 606.335 cv
223.204 606.335 223.204 606.043 223.204 605.433 cv
223.204 605.36 223.204 604.727 223.274 604.167 cv
223.321 603.581 223.367 603.288 223.764 603.288 cv
223.905 603.288 223.997 603.314 224.371 603.411 cv
241.269 607.821 li
242.506 608.138 242.763 608.211 242.763 610.819 cv
242.763 611.404 242.763 611.696 243.393 611.696 cv
243.719 611.696 243.719 611.306 243.719 611.233 cv
243.719 610.332 243.626 608.017 243.626 607.091 cv
243.626 606.189 243.719 603.849 243.719 602.924 cv
243.719 602.656 243.719 602.266 243.089 602.266 cv
242.763 602.266 242.763 602.558 242.763 603.191 cv
242.763 604.409 242.763 605.336 242.179 605.336 cv
241.992 605.336 241.829 605.263 241.643 605.214 cv
233.31 603.045 li
233.31 599.146 li
233.31 596.149 235.061 595.564 236.181 595.564 cv
236.647 595.564 237.628 595.832 238.351 596.027 cv
239.238 596.246 240.382 596.539 241.012 596.539 cv
244.419 596.539 244.419 592.615 244.419 592.177 cv
244.419 589.375 241.245 588.229 240.802 588.229 cv
240.429 588.229 240.429 588.595 240.429 588.619 cv
240.429 588.911 240.639 588.985 240.872 589.057 cv
243.183 589.886 243.719 591.299 243.719 592.055 cv
243.719 593.127 243.042 593.37 241.806 593.37 cv
240.826 593.37 239.238 593.151 238.211 593.03 cv
237.767 592.957 237.185 592.908 236.741 592.908 cv
234.314 592.908 233.333 595.101 233.03 595.978 cv
f
458.416 524.324 mo
458.606 523.439 459.342 520.277 461.573 520.277 cv
461.738 520.277 462.498 520.277 463.186 520.732 cv
462.284 520.909 461.644 521.744 461.644 522.579 cv
461.644 523.11 462 523.767 462.854 523.767 cv
463.566 523.767 464.587 523.16 464.587 521.794 cv
464.587 520.023 462.688 519.543 461.62 519.543 cv
459.745 519.543 458.63 521.339 458.25 522.123 cv
457.444 519.872 455.711 519.543 454.785 519.543 cv
451.463 519.543 449.636 523.945 449.636 524.779 cv
449.636 525.134 449.969 525.134 450.016 525.134 cv
450.277 525.134 450.371 525.058 450.443 524.755 cv
451.534 521.137 453.646 520.277 454.738 520.277 cv
455.332 520.277 456.447 520.606 456.447 522.579 cv
456.447 523.641 455.924 525.918 454.738 530.699 cv
454.216 532.798 453.1 534.24 451.677 534.24 cv
451.487 534.24 450.751 534.24 450.087 533.81 cv
450.894 533.633 451.582 532.925 451.582 531.964 cv
451.582 531.027 450.894 530.775 450.419 530.775 cv
449.446 530.775 448.64 531.66 448.64 532.748 cv
448.64 534.316 450.253 534.999 451.653 534.999 cv
453.765 534.999 454.928 532.596 455.022 532.394 cv
455.402 533.659 456.565 534.999 458.463 534.999 cv
461.762 534.999 463.589 530.598 463.589 529.737 cv
463.589 529.409 463.304 529.409 463.21 529.409 cv
462.925 529.409 462.854 529.535 462.806 529.763 cv
461.738 533.431 459.555 534.24 458.535 534.24 cv
457.3 534.24 456.779 533.153 456.779 531.989 cv
456.779 531.23 456.969 530.496 457.324 528.978 cv
458.416 524.324 li
f
476.332 515.091 mo
483.167 515.091 li
483.451 515.091 483.997 515.091 483.997 514.509 cv
483.997 513.927 483.475 513.927 483.167 513.927 cv
476.332 513.927 li
476.332 506.617 li
476.332 506.287 476.332 505.732 475.787 505.732 cv
475.241 505.732 475.241 506.263 475.241 506.617 cv
475.241 513.927 li
468.384 513.927 li
468.098 513.927 467.552 513.927 467.552 514.484 cv
467.552 515.091 468.074 515.091 468.384 515.091 cv
475.241 515.091 li
475.241 522.401 li
475.241 522.705 475.241 523.262 475.763 523.262 cv
476.332 523.262 476.332 522.73 476.332 522.401 cv
476.332 515.091 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 /2 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
