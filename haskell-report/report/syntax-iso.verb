%
% $Header: /home/cvs/root/haskell-report/report/syntax-iso.verb,v 1.12 2003/01/13 13:08:56 simonpj Exp $
%
%**<title>Haskell 98 Syntax</title>
%**~header
\section{Syntax Reference}
\label{syntax}
\index{syntax}

\subsection{Notational Conventions}

These notational conventions are used for presenting syntax:

\[\ba{cl}
"[pattern]"		& \tr{optional} \\
"\{pattern\}"		& \tr{zero or more repetitions} \\
"(pattern)"		& \tr{grouping} \\
"pat_1 | pat_2"		& \tr{choice} \\
"pat_{\langle{}pat'\rangle{}}"	& \tr{difference---elements generated by "pat"} \\
			& \tr{except those generated by "pat'"} \\
"@fibonacci@"		& \tr{terminal syntax in typewriter font}
\ea\]

BNF-like syntax is used throughout, with productions having the form:
@@@
nonterm		-> alt_1 | alt_2 | ... | alt_n
@@@

In both the lexical and the context-free syntax, there are some
ambiguities that are to be resolved by making grammatical phrases as
long as possible, proceeding from left to right (in shift-reduce
parsing, resolving shift/reduce conflicts by shifting).  In the lexical
syntax, this is the ``maximal munch'' rule\index{maximal munch rule}.  In the
context-free syntax, this means that conditionals, let-expressions, and
lambda abstractions extend to the right as far as possible.

% here we input a list of the main changes in version 1.1
% \input{syntax-changes-11}

%*anchor on
\subsection{Lexical Syntax}

% This covers only part of the lexical syntax.  The rest is directly
% included since it is much more scattered.

\input{syntax-lexical}

@@@
varid	-> (small \{small | large | digit | @'@ \})_{\langle{}reservedid\rangle{}}
conid		-> large \{small | large | digit | @'@ \} 
reservedid -> @case@ | @class@ | @data@ | @default@ | @deriving@ | @do@ | @else@
	| \hprime{@foreign@} | @if@ | @import@ | @in@ | @infix@ | @infixl@
        | @infixr@ | @instance@ | @let@ | @module@ | @newtype@ | @of@
        | @then@ | @type@ | @where@ | @_@

varsym		-> ( \hprime{symbol_{\langle{}@:@\rangle} \{symbol\}} )_{\langle{}reservedop | dashes\rangle{}}
consym		-> ( \hprime{@:@ \{symbol\}})_{\langle{}reservedop\rangle{}}
reservedop	-> @..@ | @:@ | @::@ | @=@ | @\@ | @|@ | @<-@ | @->@ | {\tt @@} | @~@ | @=>@

varid			&& (\tr{variables})
conid			&& (\tr{constructors})
tyvar	->  varid	& (\tr{type variables})
tycon	->  conid 	& (\tr{type constructors})
tycls	->  conid 	& (\tr{type classes})
modid   ->  \hprime{\{conid @.@\}} conid	& (\tr{modules})

qvarid   -> [ modid @.@ ] varid
qconid   -> [ modid @.@ ] conid
qtycon   -> [ modid @.@ ] tycon
qtycls   -> [ modid @.@ ] tycls
qvarsym  -> [ modid @.@ ] varsym
qconsym  -> [ modid @.@ ] consym

decimal		-> digit\{digit\}
octal		-> octit\{octit\}
hexadecimal	-> hexit\{hexit\}

integer		-> decimal
                |  @0o@ octal | @0O@ octal
                |  @0x@ hexadecimal | @0X@ hexadecimal
float		-> decimal @.@ decimal [exponent]
	        |  decimal exponent
exponent	-> (@e@ | @E@) [@+@ | @-@] decimal

char    ->  @'@ (graphic_{\langle{}@'@ | @\@\rangle{}} | space | escape_{\langle{}@\&@\rangle{}}) @'@
string  ->  @"@ \{graphic_{\langle{}@"@  | @\@\rangle{}} | space | escape | gap\} @"@
escape  ->  @\@ ( charesc | ascii | decimal | @o@ octal | @x@ hexadecimal )
charesc -> @a@ | @b@ | @f@ | @n@ | @r@ | @t@ | @v@ | @\@ | @"@ | @'@ | @&@
ascii   -> @^@cntrl | @NUL@ | @SOH@ | @STX@ | @ETX@ | @EOT@ | @ENQ@ | @ACK@ 
       | @BEL@ | @BS@ | @HT@ | @LF@ | @VT@ | @FF@ | @CR@ | @SO@ | @SI@ | @DLE@ 
       | @DC1@ | @DC2@ | @DC3@ | @DC4@ | @NAK@ | @SYN@ | @ETB@ | @CAN@ 
       | @EM@ | @SUB@ | @ESC@ | @FS@ | @GS@ | @RS@ | @US@ | @SP@ | @DEL@
cntrl   -> ascLarge | @@ | @[@ | @\@ | @]@ | @^@ | @_@
gap     ->  @\@ whitechar \{whitechar\} @\@
@@@
\indexsyn{varid}%
\indexsyn{conid}%
\indexsyn{reservedid}%
\indexsyn{varsym}%
\indexsyn{consym}%
\indexsyn{symbol}%
\indexsyn{reservedop}%
\indexsyn{tyvar}%
\indexsyn{tycon}%
\indexsyn{tycls}%
\indexsyn{modid}%
\indexsyn{qvarid}%
\indexsyn{qconid}%
\indexsyn{qtycon}%
\indexsyn{qtycls}%
\indexsyn{qvarsym}%
\indexsyn{qconsym}%
\indexsyn{decimal}%
\indexsyn{octal}%
\indexsyn{hexadecimal}%
\indexsyn{char}%
\indexsyn{string}%
\indexsyn{escape}%
\indexsyn{charesc}%
\indexsyn{ascii}%
\indexsyn{cntrl}%
\indexsyn{gap}%


\subsection{Layout}
\label{layout}
\index{layout}

Section~\ref{lexemes-layout} gives an informal discussion of the layout
rule. This section defines it more precisely.

The meaning of a Haskell program may depend on its {\em layout}.
The effect of layout on its meaning can be completely described by adding
braces and semicolons in places determined by the layout.  The meaning of
this augmented program is now layout insensitive.

The effect of layout is specified in this section by describing
how to add braces and semicolons to a laid-out program.  The specification
takes the form of a function "L" that performs the translation.
The input to "L" is:
\begin{itemize}
\item 
A stream of lexemes as specified by the lexical syntax in the Haskell report,
with the following additional tokens: 
\begin{itemize}
\item If a @let@, @where@, @do@, or @of@ keyword is not followed by the lexeme @{@, 
the token "\{n\}" is inserted after the keyword, where "n" is the indentation of the 
next lexeme if there is one, or "0" if the end of file has been reached.
\item If the first lexeme of a module is not @{@ or @module@, 
then it is preceded by "\{n\}" where "n" is the indentation of the lexeme. 
\item Where the start of a lexeme is preceded only by white space on the
   same line, this lexeme is preceded by "<n>" where "n"
   is the indentation of the lexeme, provided that it is not,
   as a consequence of the first two rules, preceded by "\{n\}".
   (NB: a string literal may span multiple lines -- Section~\ref{lexemes-char}.  So in the fragment
\bprog
@
  f = ("Hello \
          \Bill", "Jake")
@
\eprog
There is no "<n>" inserted before the "@\Bill@", because it is not the beginning of
a complete lexeme; nor before the "@,@", because it is not preceded only by white space.)
\end{itemize}

\item A stack of ``layout contexts'', in which each element is either:
\begin{itemize}
\item Zero, indicating that the enclosing context is explicit (i.e. the programmer 
supplied the opening brace). 
If the innermost context is 0, then no layout tokens will be inserted 
until either the enclosing context ends or a new context is pushed. 
\item A positive integer, which is the indentation column of the enclosing layout context. 
\end{itemize}
\end{itemize}

The ``indentation'' of a lexeme is the column number
of the first character of that lexeme; the indentation of a line is the
indentation of its leftmost lexeme.  To determine the column number,
assume a fixed-width font with the following conventions:
\begin{itemize}
\item The characters "newline", "return", "linefeed", and "formfeed", all start a new line.
\item The first column is designated column 1, not 0.
\item Tab stops are 8 characters apart.
\item A tab character causes the insertion of
enough spaces to align the current position with the next tab stop.
\end{itemize}
For the purposes of the layout rule, Unicode characters in a source program
are considered to be of the same, fixed, width as an ASCII character.
However, to avoid visual confusion, programmers should avoid writing programs in which 
the meaning of implicit layout depends on the width of non-space characters.

The application
\[
L~tokens~[]
\]
delivers a layout-insensitive translation of "tokens", where "tokens"
is the result of lexically analysing a module and adding column-number
indicators to it as described above.
The definition of "L" is as follows, where we use ``":"'' as a stream
construction operator, and ``"\emptystr"'' for the empty stream.
% \begin{center}
% \[\ba{lcll}
%      L~ (<n>:ts)~ (m:ms)   & = & @;@ ~:~ (L~ ts~(m:ms))           &\mbox{if}~ m = n \\
%                            & = & @}@ ~:~ (L~ (<n>:ts)~ ms)       & \mbox{if}~ n < m \\
%                            & = & L~ ts~(m:ms)                   & \mbox{otherwise} \\
% \\
%      L~ (\{n\}:ts)~ (m:ms)   & = & @{@ ~:~ (L~ ts~(n:m:ms))         & \mbox{if}~n > m~   (Note~ 1)\\
% 			     & = & @{@ ~:~ @}@ ~:~  (L~ ts~(<n>:m:ms))	& \mbox{otherwise}~   (Note~ 2)\\
% \\
%      L~ (t:ts)~ (m:ms)       & = & @}@ ~:~ (L~ (t:ts)~ ms)           & \mbox{if}~ m /= 0 ~\mbox{and}~ \mbox{parse-error}(t) \\
% 			    &&& (Note~ 3) \\
% \\
%      L~ (@}@:ts)~ (0:ms)     & = & @}@ ~:~ (L~ ts~ms)     &                       (Note~ 4) \\
% \\
%      L~ (@{@:ts)~ ms         & = & @{@ ~:~ (L~ ts~(0:ms))                   &     (Note~ 5)\\
% \\
%      L~ (t:ts)~ ms           & = & t ~:~ (L~ ts~ms)\\
% \\
%      L~ \emptystr~ [0]		   & = & \emptystr\\
%      L~ \emptystr~ (m:ms)	   & = & @}@ ~:~ L~ \emptystr~ ms	   & \mbox{if}~m \neq 0~  (Note~ 6)
% \ea\]
% \end{center}
\begin{center}
\[\ba{lcll}
     L~ (<n>:ts)~ (m:ms)   & = & @;@ ~:~ (L~ ts~(m:ms))           &\mbox{if}~ m = n \\
                           & = & @}@ ~:~ (L~ (<n>:ts)~ ms)       & \mbox{if}~ n < m \\
     L~ (<n>:ts)~ms        & = & L~ ts~ms \\
\\
     L~ (\{n\}:ts)~ (m:ms)   & = & @{@ ~:~ (L~ ts~(n:m:ms))      & \mbox{if}~n > m~   (Note~ 1)\\
     L~ (\{n\}:ts)~ []       & = & @{@ ~:~ (L~ ts~[n])           & \mbox{if}~n > 0~   (Note~ 1)\\
     L~ (\{n\}:ts)~ ms 	     & = & @{@ ~:~ @}@ ~:~  (L~ (<n>:ts)~ms) & (Note~ 2)\\
\\
     L~ (@}@:ts)~ (0:ms)     & = & @}@ ~:~ (L~ ts~ms)     	& (Note~ 3) \\
     L~ (@}@:ts)~ ms         & = & \mbox{parse-error}	 	& (Note~ 3) \\
     
\\
     L~ (@{@:ts)~ ms         & = & @{@ ~:~ (L~ ts~(0:ms))       &     (Note~ 4)\\
\\
     L~ (t:ts)~ (m:ms)       & = & @}@ ~:~ (L~ (t:ts)~ ms)      & \mbox{if}~ m /= 0 ~\mbox{and}~ \mbox{parse-error}(t) \\
								    &&& (Note~ 5) \\
     L~ (t:ts)~ ms           & = & t ~:~ (L~ ts~ms)\\
\\
     L~ \emptystr~ []		   & = & \emptystr\\
     L~ \emptystr~ (m:ms)	   & = & @}@ ~:~ L~ \emptystr~ ms	   & \mbox{if}~m \neq 0~  (Note~ 6)
\ea\]
\end{center}
\begin{description}
\item[Note 1.] A nested context must be further indented 
than the enclosing context ("n>m"). If not, "L" fails, and the compiler should indicate a
layout error.  An example is:
\bprog
@
  f x = let
           h y = let
    p z = z
                 in p
        in h
@
\eprog
Here, the definition of @p@ is indented less than the indentation of
the enclosing context, which is set in this case by the definition of @h@.

\item[Note 2.] If the first token after a @where@ (say) is not indented more
than the enclosing layout context, then the block must be empty, so empty
braces are inserted.  The $\{n\}$ token is replaced by $<n>$, to mimic the
situation if the empty braces had been explicit.

\item[Note 3.] By matching against 0 for the current layout context, 
we ensure that an explicit close brace can only match an explicit open brace. 
A parse error results if an explicit close brace matches an implicit open brace.

\item[Note 4.] This clause means that all brace pairs are treated as explicit layout 
contexts, including labelled construction and update (Section~\ref{field-ops}). 
This is a difference between this formulation and Haskell 1.4.

\item[Note 5.] The side condition "\mbox{parse-error}(t)" is to be interpreted as follows: 
if the tokens generated so far by "L" together with the next token "t" 
represent an invalid prefix of the Haskell grammar, and the 
tokens generated so far by "L" followed by the token ``@}@''
represent a valid prefix of the Haskell grammar, then "\mbox{parse-error}(t)" is true. 

The test $m /= 0$ checks that an implicitly-added closing brace would match
an implicit open brace.

\item[Note 6.] At the end of the input, any pending close-braces are inserted. 
It is an error at this point to be within a non-layout context (i.e.~ "m = 0"). 
\end{description}

If none of the rules given above matches, then the algorithm fails. It
can fail for instance when the end of the input is reached, and a
non-layout context is active, since the close brace is missing. Some
error conditions are not detected by the algorithm, although they
could be: for example @let }@.

Note 1 implements the feature that layout processing can be stopped
prematurely by a parse error.  For example
\bprog
@
        let x = e; y = x in e'
@
\eprog
is valid, because it translates to 
\bprog
@
        let { x = e; y = x } in e'
@
\eprog
The close brace is inserted due to the parse error rule above.

\startnewsection
\subsection{Literate comments}
\label{literate}
\index{literate comments}

The ``literate comment''
convention, first developed by Richard Bird and Philip Wadler for
Orwell, and inspired in turn by Donald Knuth's ``literate
programming'', is an alternative style for encoding \Haskell{} source
code. 
The literate style encourages comments by making them the default.  A
line in which ``@>@'' is the first character is treated as part of the
program; all other lines are comments.

The program text is recovered
by taking only those lines beginning with ``@>@'', 
and replacing the leading ``@>@'' with a space.
Layout and comments apply
exactly as described in Chapter~\ref{syntax} in the resulting text.

To capture some cases where one omits an ``@>@'' by mistake, it is an
error for a program line to appear adjacent to a non-blank comment line,
where a line is taken as blank if it consists only of whitespace.

By convention, the style of comment is indicated by the file
extension, with ``@.hs@'' indicating a usual Haskell file and
``@.lhs@'' indicating a literate Haskell file.  Using this style, a
simple factorial program would be:
\bprog
@
   This literate program prompts the user for a number
   and prints the factorial of that number:

> main :: IO ()

> main = do putStr "Enter a number: "
>           l <- readLine
>           putStr "n!= "
>           print (fact (read l))
          
  This is the factorial function.

> fact :: Integer -> Integer
> fact 0 = 1
> fact n = n * fact (n-1)
@
\eprog


An alternative style of literate programming is particularly
suitable for use with the LaTeX text processing system.
In this convention, only those parts of the literate program that are
entirely enclosed between @\begin{code}@$\ldots$@\end{code}@ delimiters are
treated as program text; all other lines are comments.  More precisely:
\begin{itemize}
\item Program code begins on the first line following a line that begins @\begin{code}@.
\item Program code ends just before a subsequent line that begins @\end{code}@ (ignoring
string literals, of course).
\end{itemize}
It is not necessary
to insert additional blank lines before or after these delimiters, though
it may be stylistically desirable.  For example,
\bprog
@
\documentstyle{article}

\begin{document}

\section{Introduction}

This is a trivial program that prints the first 20 factorials.

\begin{code}
main :: IO ()
main =  print [ (n, product [1..n]) | n <- [1..20]]
\end{code}

\end{document}
@
\eprog
This style uses the same file extension.  It is not advisable to mix
these two styles in the same file.

\startnewsection
\subsection{Context-Free Syntax}
\label{bnf}
@@@
module -> @module@ modid [exports] @where@ body \indexsyn{module}
       |  body\indexsyn{modid}
body   -> @{@ impdecls @;@ topdecls @}@\indexsyn{body}
	| @{@ impdecls  @}@
	| @{@ topdecls  @}@

impdecls     -> impdecl_1 @;@ ... @;@ impdecl_n 	&  (n>=1)\indexsyn{impdecls}

\indexsyn{exports}exports	 -> @(@ export_1 @,@ ... @,@ export_n [ @,@ ] @)@ & (n>=0)

\indexsyn{export}export   -> qvar
	 |  qtycon [@(..)@ | @(@ cname_1 @,@ ... @,@ cname_n @)@] & (n>=0)
	 |  qtycls [@(..)@ | @(@ qvar_1 @,@ ... @,@ qvar_n @)@] & (n>=0)
         |  @module@ modid

\indexsyn{impdecl}impdecl   -> @import@ [@qualified@] modid [@as@ modid] [impspec]
	  | 	& (\tr{empty declaration})

\indexsyn{impspec}impspec   -> @(@ import_1 @,@ ... @,@ import_n [ @,@ ] @)@ & (n>=0)
             |  @hiding@ @(@ import_1 @,@ ... @,@ import_n [ @,@ ] @)@ &  (n>=0)

\indexsyn{import}import    -> var
	  |  tycon [ @(..)@ | @(@ cname_1 @,@ ... @,@ cname_n @)@] & (n>=0)
	  |  tycls [@(..)@ | @(@ var_1 @,@ ... @,@ var_n @)@] & (n>=0)
\indexsyn{cname}cname     -> var | con

\indexsyn{topdecls}topdecls -> topdecl_1 @;@ ... @;@ topdecl_n 	&  (n>=0)
\indexsyn{topdecl}topdecl	-> @type@ simpletype @=@ type
	|  @data@ [context @=>@] simpletype \hprime{[}@=@ constrs\hprime{]} [deriving]
        |  @newtype@ [context @=>@] simpletype @=@ newconstr [deriving]
	|  @class@ [scontext @=>@] tycls tyvar [@where@ cdecls]
	|  @instance@ [scontext @=>@] qtycls inst [@where@ idecls]
	|  @default@ @(@type_1 @,@ ... @,@ type_n@)@ & (n>=0)
        |  @foreign@ fdecl
	|  decl

\indexsyn{decls}decls	-> @{@ decl_1 @;@ ... @;@ decl_n  @}@		&  (n>=0)
\indexsyn{decl}decl	-> gendecl
	|  (funlhs | \hprime{pat}) rhs

\indexsyn{cdecls}cdecls	-> @{@ cdecl_1 @;@ ... @;@ cdecl_n  @}@		&  (n>=0)
\indexsyn{cdecl}cdecl	-> gendecl
	|  (funlhs | var) rhs

\indexsyn{idecls}idecls	-> @{@ idecl_1 @;@ ... @;@ idecl_n  @}@		&  (n>=0)
\indexsyn{idecl}idecl	-> (funlhs | var) rhs
	|						& (\tr{empty})

\indexsyn{gendecl}gendecl	-> vars @::@ [context @=>@] type	& (\tr{type signature})
	|  fixity [integer] ops			& (\tr{fixity declaration})
	|					& (\tr{empty declaration})

\indexsyn{ops}ops	-> op_1 @,@ ... @,@ op_n		& (n>=1)
\indexsyn{vars}vars	-> var_1 @,@ ...@,@ var_n		& (n>=1)
\indexsyn{fixity}fixity	-> @infixl@ | @infixr@ | @infix@

\indexsyn{type}type      -> btype [@->@ type]                    & (\tr{function type})

\indexsyn{btype}btype    ->  [btype] atype                        & (\tr{type application})

\indexsyn{atype}atype    ->  gtycon
          |  tyvar
          |  @(@ type_1 @,@ ... @,@ type_k @)@ & (\tr{tuple type}, k>=2)
          |  @[@ type @]@                      & (\tr{list type})
          |  @(@ type @)@                      & (\tr{parenthesized constructor})

\indexsyn{gtycon}gtycon    -> qtycon
          |  @()@                              & (\tr{unit type})
          |  @[]@                              & (\tr{list constructor})
          |  @(->)@                            & (\tr{function constructor})
          |  @(,@\{@,@\}@)@                    & (\tr{tupling constructors})

\indexsyn{context}context -> class
        |  @(@ class_1 @,@ ... @,@ class_n @)@		&  (n>=0)
\indexsyn{class}class	-> qtycls tyvar			
	|  qtycls @(@ tyvar atype_1 ...  atype_n @)@ &  (n>=1)
\indexsyn{scontext}scontext -> simpleclass
        |  @(@ simpleclass_1 @,@ ... @,@ simpleclass_n @)@		&  (n>=0)
\indexsyn{simpleclass}simpleclass -> qtycls tyvar			

\indexsyn{simpletype}simpletype -> tycon tyvar_1 ... tyvar_k &  (k>=0)
\indexsyn{constrs}constrs	   -> constr_1 @|@ ... @|@ constr_n	&  (n>=1)
\indexsyn{constr}constr	   -> con [@!@] atype_1 ... [@!@] atype_k	& (\tr{arity} con = k, k>=0)
           |  (btype | @!@ atype) conop (btype | @!@ atype) & (\tr{infix} conop)
           |  con @{@ fielddecl_1 @,@ ... @,@ fielddecl_n @}@ &  (n>=0)
\indexsyn{newconstr}newconstr  -> con atype
	   |  con @{@ var @::@ type @}@ 
\indexsyn{fielddecl}fielddecl  -> vars @::@ (type | @!@ atype)
\indexsyn{deriving}deriving   -> @deriving@ (dclass | @(@dclass_1@,@ ... @,@ dclass_n@)@)&  (n>=0)
\indexsyn{dclass}dclass     -> qtycls

\indexsyn{inst}inst	-> gtycon
	|  @(@ gtycon tyvar_1 ... tyvar_k @)@	& (k>=0, tyvars \tr{distinct})
	|  @(@ tyvar_1 @,@ ... @,@ tyvar_k @)@	& (k>=2, tyvars \tr{distinct})
	|  @[@ tyvar @]@
	|  @(@ tyvar_1 @->@ tyvar_2 @)@		& tyvar_1 \tr{and} tyvar_2 \tr{distinct}

\indexsyn{fdecl}fdecl    -> @import@ callconv [safety] impent var @::@ ftype & (\tr{define variable})
         |  @export@ callconv expent var @::@ ftype & (\tr{expose variable})
callconv -> @ccall@ | @stdcall@ | @cplusplus@  & (\tr{calling convention})
         | @jvm@ | @dotnet@
         |  \mbox{\bf system-specific calling conventions}
\indexsyn{impent}impent   -> [string] & (\tr{see Section~\ref{sec:ccall}})
\indexsyn{expent}expent   -> [string] & (\tr{see Section~\ref{sec:ccall}})
\indexsyn{safety}safety   -> @unsafe@ | @safe@

\indexsyn{ftype}ftype -> frtype
      |  fatype \rightarrow ftype
\indexsyn{frtype}frtype -> fatype
       | @()@
\indexsyn{fatype}fatype -> qtycon atype_1 \ldots atype_k & (k \geq 0)

\indexsyn{funlhs}funlhs	->  var apat \{ apat \}
        |   \hprime{pat varop pat}
	|   @(@ funlhs @)@  apat \{ apat \}

\indexsyn{rhs}rhs	->  @=@ exp [@where@ decls]
	|   gdrhs [@where@ decls]

\indexsyn{gdrhs}gdrhs	->  \hprime{guards @=@ exp [gdrhs]}

\indexsyn{guards}\hprime{guards}	->  \hprime{@|@ guard_1, ..., guard_n}             & \hprime{(n>=1)}
\indexsyn{guard}\hprime{guard}	-> \hprime{pat @<-@ infixexp} 	& (\hprime{\tr{pattern guard}})
         | \hprime{@let@ decls}		& (\hprime{\tr{local declaration}})
         | infixexp		& (\tr{boolean guard})

\indexsyn{exp}exp     ->  \hprime{infixexp @::@ [context @=>@] type}   & (\tr{expression type signature})
        |   \hprime{infixexp}

\indexsyn{infixexp}\hprime{infixexp} -> \hprime{lexp qop infixexp} & (\tr{infix operator application})
            | \hprime{@-@ infixexp}             & (\tr{prefix negation})
            | \hprime{lexp}

\indexsyn{lexp}\hprime{lexp}    ->  @\@ apat_1 ... apat_n @->@ exp	& (\tr{lambda abstraction}, n>=1)
	|   @let@ decls @in@ exp	        & ({\tr{let expression}})
	|   @if@ exp \hprime{[@;@]} @then@ exp \hprime{[@;@]} @else@ exp	& (\tr{conditional})
	|   @case@ exp @of@ @{@ alts @}@	& (\tr{case expression})
        |   @do@ @{@ stmts  @}@            & (\tr{do expression})
	|   fexp
\indexsyn{fexp}fexp	->  [fexp] aexp				& (\tr{function application})

\indexsyn{aexp}aexp 	->  qvar				& (\tr{variable})
	|   gcon				& (\tr{general constructor})
	|   literal				
	|   @(@ exp @)@			      & (\tr{parenthesized expression})
	|   @(@ exp_1 @,@ ... @,@ exp_k @)@	& (\tr{tuple}, k>=2)
	|   @[@ exp_1 @,@ ... @,@ exp_k @]@	& (\tr{list}, k>=1)
	|   @[@ exp_1 [@,@ exp_2] @..@ [exp_3] @]@ & (\tr{arithmetic sequence})
	|   @[@ exp @|@ qual_1 @,@ ... @,@ qual_n @]@	& (\tr{list comprehension}, n>=1)
	|   @(@ \hprime{infixexp qop} @)@        & (\tr{left section})
        |   @(@ \hprime{qop_{\langle@-@\rangle} infixexp} @)@        & (\tr{right section})
        |   qcon @{@ fbind_1 @,@ ... @,@ fbind_n @}@ & (\tr{labeled construction}, n>=0)
        |   aexp_{\langle{}qcon\rangle{}} @{@ fbind_1 @,@ ... @,@ fbind_n @}@ & (\tr{labeled update}, n >= 1)

\indexsyn{qual}qual	-> pat @<-@ exp 	& (\tr{generator})
         | @let@ decls		& (\tr{local declaration})
         | exp 			& (\tr{guard})

\indexsyn{alts}alts	->  alt_1 @;@ ... @;@ alt_n 		&  (n>=1)
\indexsyn{alt}alt	->  pat @->@ exp [@where@ decls]
	|   pat gdpat [@where@ decls]
	|					& (empty alternative)

\indexsyn{gdpat}gdpat   ->  \hprime{guards} @->@ exp [ gdpat ]

\indexsyn{stmts}stmts -> stmt_1 ... stmt_n exp [@;@]  &  (n>=0)
\indexsyn{stmt}stmt -> exp @;@
      | pat @<-@ exp @;@
      | @let@ decls @;@
      | @;@			& (empty statement)

\indexsyn{fbind}fbind   ->  qvar @=@ exp
        
\indexsyn{pat}pat     -> \hprime{lpat qconop pat} & (\tr{infix constructor})
        | \hprime{lpat}

\indexsyn{lpat}\hprime{lpat} ->  apat
        | \hprime{@-@ (integer | float)} & (\tr{negative literal})
	|   gcon apat_1 ... apat_k		& (\tr{arity} gcon = k, k>=1)

\indexsyn{apat}apat	->  var [{\tt @@} apat]			& (\tr{as pattern})
	|   gcon				& (\tr{arity} gcon = 0) 
        |   qcon @{@ fpat_1 @,@ ... @,@ fpat_k @}@ & (\tr{labeled pattern}, k>=0)
	|   literal
	|   @_@					& (\tr{wildcard})
	|   @(@ pat @)@				& (\tr{parenthesized pattern})
	|   @(@ pat_1 @,@ ... @,@ pat_k @)@	& (\tr{tuple pattern}, k>=2)
	|   @[@ pat_1 @,@ ... @,@ pat_k @]@	& (\tr{list pattern}, k>=1) 
	|   @~@ apat				& (\tr{irrefutable pattern})

\indexsyn{fpat}fpat    ->  qvar @=@ pat

\indexsyn{gcon}gcon    ->  @()@
        |   @[]@
        |   @(,@\{@,@\}@)@
        |   qcon

\indexsyn{var}var	->  varid | @(@ varsym @)@		& (\tr{variable})
\indexsyn{qvar}qvar	->  qvarid | @(@ qvarsym @)@		& (\tr{qualified variable})
\indexsyn{con}con	->  conid | @(@ consym @)@		& (\tr{constructor})
\indexsyn{qcon}qcon	->  qconid | @(@ gconsym @)@		& (\tr{qualified constructor})
\indexsyn{varop}varop	->  varsym | \bkqB varid \bkqA		& (\tr{variable operator})
\indexsyn{qvarop}qvarop	->  qvarsym | \bkqB qvarid \bkqA	& (\tr{qualified variable operator})
\indexsyn{conop}conop	->  consym | \bkqB conid \bkqA		& (\tr{constructor operator})
\indexsyn{qconop}qconop	->  gconsym | \bkqB qconid \bkqA	& (\tr{qualified constructor operator})
\indexsyn{op}op	->  varop | conop 			& (\tr{operator})
\indexsyn{qop}qop     ->  qvarop | qconop			& (\tr{qualified operator})
\indexsyn{gconsym}gconsym ->  @:@ | qconsym
@@@

%*anchor off
% Local Variables: 
% mode: latex
% End:
%**~footer

