Haskell Report Sources
~~~~~~~~~~~~~~~~~~~~~~

.verb files
~~~~~~~~~~~

.verb files are converted to .tex by the preprocessor "verbatim" in
../tools.  When generating HTML via tex4ht, we use a slightly
different version of the preprocesor, in ../tools/verb-tex4ht.


make targets
~~~~~~~~~~~~

   all       make both HTML and PDF versions
   html      make the HTML version
   pdf       make the PDF version
   clean     remove generated files
   haddock   re-generate the library documentation using Haddock
             (see Makefile for instructions)


Re-generating the library documentation using Haddock
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The documentation for library modules is generated automatically by
Haddock (http://www.haskell.org/haddock) from the library source code.
You don't need Haddock to build the report though - the generated .tex
files have been checked into the repository.

The library specifications generated for the Haskell 2010 report were
generated using libraries from these repositories:

  base        (http://darcs.haskell.org/packages/base)
  ghc-prim    (http://darcs.haskell.org/packages/ghc-prim)
  integer-gmp (http://darcs.haskell.org/packages/integer-gmp)
  array       (http://darcs.haskell.org/packages/array)
  haskell2010 (http://darcs.haskell.org/packages/haskell2010)

each of the repositories was tagged with

  "Haskell 2010 report generated"

at the point the libray module documentation was generated, so you
should be able to reproduce exactly what is checked into the
repository.

Right now, the only practical way to re-generate the library module
documentation is to have a GHC build.  Fortunately building GHC isn't
that hard these days: go to 

  http://hackage.haskell.org/trac/ghc/wiki/Building

and follow the instructions.  Make sure you don't disable
documentation building, i.e. don't set HADDOCK_DOCS=NO in your
mk/build.mk configuration file.

When you have built GHC

To update the library documentation see the Makefile, in the section
"Haddock-generated library docs".


Roadmap
~~~~~~~

haskell.verb  -- Top level of the report

Sections of the report:
intro.verb
lexemes.verb
exps.verb
decls.verb
modules.verb
basic.verb
io-13.verb
ffi.verb
standard-prelude.verb
syntax-iso.verb
fixity.verb
derived.verb
pragmas.verb
haskell.bib

Library documentation, generated by Haddock:

libs/*.verb       -- documentation for each library module
haddck.sty        -- definitions for macros used by Haddock

Extra .verb files:
iso-chars.verb    -- Some bogus definitions for ISO chars.  Probably not 
                  -- needed since I removed them from the syntax. 
index-extra.verb  -- extra stuff to get indexed (see also's)
index-intro.verb  -- header for index

Haskell source files:

Prelude.hs
PreludeList.hs
PreludeIO.hs
PreludeText.hs

Figures:

classes.ppt       --  The original class figure (Powerpoint)
classes.eps (*)   --  Postscript version of class-fig
classes.gif (*)   --  For html version
cover.cdr         --  A nice looking cover for the report
cover.eps (*)

Html support:

ht/haskell.cfg     -- tex4ht configuration file
ht/haddock.sty     -- customised Haddock style for HTML output

index.html         -- (unused now) Top level of the html report (hand generated)
lambda.gif         -- (unused now) background for title page

Other files:

Makefile         -- Lots of extra cruft no longer used. 

Report any problems to the most recent editor, or failing that, one of
the past editors of the report.


Making figures
~~~~~~~~~~~~~~
The classes.eps files, which contains the classes hierarchy figure,
is made in Powerpoint, from classses.ppt.  To get the .eps file,
do the following:

* Open classes.ppt
* Print..
* Check the print-to-file box, and save as classes.prn
* Edit classes.prn
	Kill the .prn header and footer (before % PS-Adobe), and after %EOF
	Kill the entire setup code (from BeginSetup to EndSetup)
	Kill the showpage near the end
* Save as classes.eps
* Open with Ghostview
* Note the coords of the bottom LH and top RH corner, as reported by
  Ghostview
* Re-edit classes.eps, and put those coords in the
	%BoundingBox line

You also need to do
	Save As.. 
in Powerpoint, and save the thing as classes.gif, for the HTML version




