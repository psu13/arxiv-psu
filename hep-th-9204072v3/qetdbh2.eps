%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: qetdbh2.pdf
%%Creator: Adobe Acrobat 8.0
%%For: giddings
%%CreationDate: 11/26/09, 9:30:47 PM
%%BoundingBox: 0 0 468 319
%%HiResBoundingBox: 0 0 468 319
%%CropBox: 0 0 468 319
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 50042 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.398116, Tue Aug 04 2009 14:24:30">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xapG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xap:CreatorTool="Adobe Illustrator CS3"
   xap:CreateDate="2009-11-26T17:16:10+01:00"
   xap:ModifyDate="2009-11-26T17:16:10+01:00"
   xap:MetadataDate="2009-11-26T17:16:10+01:00"
   xapMM:DocumentID="uuid:74A9420F38DCDE11B49B813F86B4FFF6"
   xapMM:InstanceID="uuid:b4202a76-f451-aa48-aa39-2ff4f2a130b6"
   xapTPg:NPages="1"
   xapTPg:HasVisibleTransparency="False"
   xapTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">qetdbh2-new</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:width="188"
      xapGImg:height="256"
      xapGImg:format="JPEG"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxXzHrPnqz1yCDRdCXU9J4W7XM4ljjlDPOVmCCWWFDwg&#xA;XkPcjriqT23nz8zLqyN1B+XkoHNwqTalBA5jQSAtwkjWQMWjAClADyBBpWirJ4NT8wy6jpCPppt7&#xA;O8tHm1MOVdrWfihWH1FejHkxXZCDStR0Kqd4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUo0nSNLk0yyl&#xA;lsoDKYI+TGNWPxKpO5HemFUUND0YUpYW/wAJLD90nU1qenucCuGh6KF4/ULfjy5U9JOvLlXp44q4&#xA;6HoxDg2FvST7Y9JN9qeHhirf6G0fkW+o2/IgAn0k6CtO3virSaHoqBAthbjgvFf3SbDbbp7Yq4aH&#xA;owpSwt/hJYfuk6mtT09zirjoeileP1C348uVPSTry5V6eOKuOh6MQ4Nhb0k+2PSTfanh4YqhtVg8&#xA;u6Vpt7q13ZQLbWVvJcXLLEhPpQI0jU2HQA4q8+8w+b4tKudSeLS7H0tIGrpHEYgTImnabDeJXp1d&#xA;+Jp2woZ3pI8r6o12LOyhYafcm3kYwoAZTEkpZDTcFZxvilH/AKD0bjx+oW9K8qeknWvKvTxwK46H&#xA;opDg2FuRJ9sekm+wXw8Birf6G0fkW+o2/IgAn0k6CtO3virS6Hoy8aWFuOA4r+6TYbbdPbFXDQ9F&#xA;FKWFvsxYfuk6tWp6f5RxVx0PRjWthb/EQx/dJ1FKHp7DFXNoeisrqbC3pJ9v90m9RTw8MVb/AENo&#xA;/It9Rt+RABPpJ0FadvfFWl0PRl40sLccBxX90mw226e2KoSh/wAH04rX9H04V+H+46Vp0+jCqZX3&#xA;136lcfUfT+u+m/1X1+XperxPD1OPxceVOVN6YFSSzHnh73STqAtIoY43Gr/VJGeKVzbx0MaSxLKl&#xA;LgyBf3h+AAtUtRFU00MEaNYgqqEQR/CpqKcRTsMVRuKuxV2KuxV2KuxV2KuxV5N+b3miG4sNR0yz&#xA;uZAqaZ5htr6AclR5INKWahHRuHrrQ+NaYVYHrV39Zh8w0+zDF5niXan2PL1hX/hq4lQyry75rTRt&#xA;duLia4kj0qO91a51AITxaKw0exdqp3KsDT+3FD2vAl2KuxV2KuxV2KuxV2KuatDxALU2B2FfxxVJ&#xA;uP8Azp3Hgv8Axzqen+z/AHHTp0+jCqc4FdiqC0QU0exHEL/o8Xwr0+wPYYqjcVdirsVdirsVdirs&#xA;VSnzdrEuieVNa1mFFkm0ywubyNHBKs1vC0gDAFTQlfEYq+f/ADtrUUt35huesMz+Z4I/FfU8v2Lb&#xA;/J9jhVK9dvHtbTX+Cgme48zQknsH0KxqfuxVMdWkRLLWlY7yL5tVPn+g7Vv1KcSoe7+Stdu9Wtb9&#xA;bkLXT7pbSNxy5OotYJeTliasWmOJVkWBXYq7FXYq7FXYq7FXYqk3H/nTuPBf+OdT0/2f7jp06fRh&#xA;VNp54beGSeeRYoIlLyyuQqKiirMzHYADck4FUYNU0ydbVoLuGVb6My2RSRGE0YAYvFQ/GtGBqvji&#xA;qnogpo9iOIX/AEeL4V6fYHsMVRuKuxV2KuxV2KuxV2KvK/zx1aeKzOnw3TR29xovmL65Ar0R2i02&#xA;sauoO5BlDKD88VeVauFM18poQdT8w1B7j9C2GFCFkHKzfluDe67UHetdC0/riretGU6Awj5GR38w&#xA;qONSSW0S0Wm2+9cVei/lxrt7B5tks/rJXT7nWdWa5Bb4CkGmae6VJNKKXJxV7bgS7FXYq7FXYq7F&#xA;XYq7FUm4/wDOnceC/wDHOp6f7P8AcdOnT6MKptPBDcQyQTxrLBKpSWJwGRkYUZWU7EEbEHAqAtvL&#xA;Hlu2nt7i20mzguLSptJo7eJHiLQpbn02VQUrDEke37ChegGKquhoE0axUKqD0IzxXpUqCewxVG4q&#xA;7FXYq7FXYq7FUPqWoWem6ddajfSiGysoZLi6mIJCRRKXdiFBOyqTtir5v8738d9rmpyI3KEap5gS&#xA;KoG6rotjX6CxJwoSOYlV9MfZaXWJv9k2kW0Z+ikQwq6WpiicbLK2tvw7ck0+OAt8yIR+GKq6Suy2&#xA;IJ+Fpdbfj/lCyjhr9KwriqjNefVtF1JtzHKfM0LUoa8/Ltko6+D0rgS+ofL+sWup2NYZvWmtSkF6&#xA;eJXjP6SSMu4FfhkU1G2+BUyxV2KuxV2KuxV2KuZQwKsAVIoQehGKpNx/507jwX/jnU9P9n+46dOn&#xA;0YVThXRwSjBgCVNDWhGxH0YFbxVBaIKaPYjiF/0eL4V6fYHsMVQOsedfK+keqt9qESSQpcvJGhMj&#xA;L9TtxdTqwSvFkgYPxahoRiqtp/mry/qFw1tZ3qSXCzNbmKjKxlSGO4ZVDBeVIp0Y08cVTXFWNeZ/&#xA;Pel6He2unEifU7i506A2lShWLUrv6ok3IqVbiyOeI3+Htirymz/NjzHfXuju920SX7aMsyIFEa89&#xA;buYLosaCnK1RA1O2FXoH5Z/mK3mSytbXUFC6s1iuoTSKFWJkkvbm0VVFa8gbXf54qofnN5nj0/y7&#xA;c+XzAXfzFpmqwJccqCL0rXclafFUSeI6YFeIXk7zO8hpxubjW7k02HNtLt4n4+wMFPvySFOSn1ey&#xA;/mkfW0HizNbiNB+oYq6T+409B1ll1mFfAGWIRgn5csVVI2oNLFKmSfWYh85Igi/i2KqNxHHJp9vC&#xA;4/dyjXw69K8rXifpoMVepfk15tEN7caPOpll1zV76WKfkF4/VNPsWeiU3DOz9OhBwFL0/wAw+ZbH&#xA;Q47JrkF2vr610+JFIqJLyX0kZq9q1wK8a0j80/NWqaloqyXgi+utoKTpGAqu02oXkdyFXfjzjRVc&#xA;f5PbCrNfIn5t2us21imrKttNc2tkyXChuMl3d3E9v6Pp0LIQYEO+3xEGnHGlejYFS/WPMOiaLC02&#xA;q3sVnGsM1x+8ahMVuoaVlX7TcARWgxVAr578pm4mt31KKF7d7mOVpqxRg2SRy3J9RwE4xpMrE1pT&#xA;5HFU+xVJuP8Azp3Hgv8Axzqen+z/AHHTp0+jCqWeTNQ8t3Ou+abbR7KSC5tL8Lqt27B0uLhk5MYy&#xA;HkoE+yRRaGopWuBU8vb3V4tY021ttN+s6dcif9Iaj66R/VTGgMI9Fhzl9ViV+H7NKnFWCfmJ+nE8&#xA;l6PHY3L21tfquj31tbqGLjVIfqsEgk48kMczodh39tyrxa2nm1F9PkuXd21WO7e6WrAkanH+h13Y&#xA;nkG+qmreAI7CpQssnmuxpoMhDanFdpMF+Ej9Kx/oZOterQHceFOwqq9W8oeafzVPk46ubCK8skT6&#xA;6JZW/frb2ZMEtjBboOck0gti4dyADJ+2fhAS8yQ6lHq2mJqrSPfWTzQX7yks/LS3bUlQE7rT60BQ&#xA;iowoQ+kj6t+gvVHpLbG4+uR9/wDQGa/XoNqibtiqr5ei1CObQ47KCV7y3MsjWkKlpXfSJTqyRoq/&#xA;aMnMLx3qffbFWR+eLnzLqHmqwsPMTLBdSyTyi3RvVFpa6vbrbx26OUi5en9WepKj4ztXAFYzpJS9&#xA;k8upKu091eNPHvT07khR9Dem4+g4Va0Wl3/hpZjzMt5eevTY/veHWnTlQ0xVrRh9dXy4krEmS7u/&#xA;XYbEevxAI2pvwbFXaQZL0aADRXa7ui57VuKUoPb0zirWnH9I/oVEHEyXd313H+k7AE+3p4qiNC1C&#xA;/wDrGiS6bO1lezXF5Ba3IHJo31blZwyKDtVZdh2rirIvO175pXzZZarrlmbK8juYY/TBd7aU6Chu&#xA;luYi6Rl4WlvC4PEdCOq1IViums9g2jTp8b2t7MLeU9FaxZ5hyoduJmVvpwqqaW7WI0Wf4nisdQll&#xA;BNQpGkubwK4HXgZVenvir1PyXcfmwfJp0u1tV5QMdNh1C5cx3cfNvUF+olDxTxLFMoC7EFduXTAr&#xA;zG5vNQ8w3MCXKMJtavrhmib92xi8wKLWKP4qcVb6gPlv7YqhYPU1lbS0Q+o+rX12hdaIzprqi1Wp&#xA;O3FvqK8T2ofAYVeqfkZresahe3oLM1lcJcasxaoR/rsscFnQkHjRbCb/AIL6SCr0vj/zp3Hgv/HO&#xA;p6f7P9x06dPoxSj7PSdLsZriays4LWa8f1buSGNI2lcknnIVALtVianxwKisVQWiCmj2I4hf9Hi+&#xA;Fen2B7DFUjvvy08o3d3DdCzFtLbtZtEIOKKBY3jX0aBaFeLTSNz23BxVR0L8rPKWji3KQvdyW0UM&#xA;UMlyVYqLe8lv4mHFUAKTzkj5DwxVl+KsI87flzZ6na6he6XEserva6i0Mf2Vmvb20jtkkdiaLT6v&#xA;GPoxV5Lq3kDzDbz3tuljPNPEdeWyYIeUhbQrYW/pAA8+VzzUeJFMKvTPIP5YR6RfHVNRLG9tr2a5&#xA;00hl/urqwtraRZBSuzwvQV2r3riqr+aXlu1um0fVIbflfvrGi215Mpfk1nHfH4KA0AX6y5r1369M&#xA;CvCvL1Vl8uyEbJ6HIDf+8vbuMUr/AJTjJId5aHG58uAbBnRyP8oz3ak/8Ci4q7yv8M3l5OvOdZgR&#xA;/lSXEdPvixV3lj4Z/LydecyzA/60tzHT/klX6cVb8sqVu/LEY+zPdWqknor3V5Paqdt6cuGKs4/I&#xA;7yxbajdwXOo231i1tdMs7uxclwI7hNVvirbFasGtwab+/XAUvTPzK8hxeatFuTCWGsQafqFtpR5h&#xA;I/VvYQn7yoO3KNdx03wK8h8z+Q9egj1W1t7S4Yo/mW4s1jifi/qaZZpEYuIJPqMjhAOrEjthVnvl&#xA;z8noBd3EutxobUXepNHYrRkkt9TtLW3cBlKmKn1dum9d9sVeoKqqoVQFVRRVGwAHYYFSjVfKOgan&#xA;exX91bA3sU1pOLhTxctYSPLbhj3VXlfb3xVItI/KHybpbWjRRTStZJYrbmSTZW06WaaFwFC78rhu&#xA;Q+zQDbrVVl1jY2dhaRWdlClvawLxhhjAVFXwAGKpbx/507jwX/jnU9P9n+46dOn0YVTnArsVQWiC&#xA;mj2I4hf9Hi+Fen2B7DFUbirsVdirsVdirsVdir5kk8s32ha35e0nUE9C5jk0FbmHkrn/AEzW7pH+&#xA;NCy7xxg7dKnDapL5fqG8vyj7Uf1agP8AxZf3MR/CQ4ULvLisbjy64HwoIix8A13eIP8AhmGKteXA&#xA;Td+V6dXnsYN+31rU7i25f7H1uXvSmKrvKQaWXyk4FWWXy5NJ7tc6vLI1PYGM4Evo/wDLrRdQ0TyV&#xA;pelaggjvLWNlmRWDgEyM32hsdjgVkeKuxV2KuxV2KuxV2KpNx/507jwX/jnU9P8AZ/uOnTp9GFUZ&#xA;q+iaRrNm1nqlpFeWzV+CVQeJKleSH7SNRjRlII7YFQFj5K8u2E+mTWsM0baPGYNNQ3V00cUTQpbl&#xA;BG0pRh6cS/aU/F8X2iTiqP0NAmjWKhVQehGeK9KlQT2GKo3FXYq7FXYq7FXYq7FXmP5neVy2v6X5&#xA;j9UkvqfluzW3Ar/vNqskjMfouvwxV435aQtdeV6qeKXmiEkjYiXXZwtPH+5bCUKvkxQ2oeWVpULc&#xA;aZ6o6geprE9Af9bi2FVHyv8AHd+WSOkN7ofKvf1tdn40/wCRRrgKWb/lv5V+valpkUZWB7fSNC1M&#xA;kjkKW+q3rhVp9ktElBir3zArsVdirsVdirsVdirmUMCrAFSKEHoRiqTcf+dO48F/451PT/Z/uOnT&#xA;p9GFU5wK7FUFogpo9iOIX/R4vhXp9gewxVG4q7FXYq7FXYq7FXYqgtW0e01SK3iueQW2uYLyPgaH&#xA;1LaQSpWoO3Jd8VfNunKyXXlKNhQxv5ZjNdvseYNQWv00wqhvJUMkd9oDMKLLPoLp7ga1qCfrU4oV&#xA;PLelzRXXlwxky+pL5aunoKcFOvXwPc1pTril7r+Wnl4af5f06+nikh1ObTLOxuopNgqWjzyRjiRs&#xA;eV09T32wFWX4q7FXYq7FXYq7FXYq7FUm4/8AOnceC/8AHOp6f7P9x06dPowqjNXuNXt7NpdLsor+&#xA;5Wp+rSzm25AKTRH9OVeRNAA3EeLDAqV2mseaJ77SI7jRmsYbiJ21YO8U6wyCBJFWOaKX4qSuY94v&#xA;i4kigpyVTTQwRo1iCqoRBH8KmopxFOwxVG4q7FXYq7FXYq7FXYq7FXmPnnyr6fma11dUWGxe58t2&#xA;ltHGFA9S21ea4k+EdP75O3c4Vec6BEzXflh+now+W2YHrvrt+n63xVN/y/0XUNTuNJNnGHFppug3&#xA;E5LBaRw63qEr9ep4RscVe+4FdirsVdirsVdirsVdirmrQ8QC1NgdhX8cVSbj/wA6dx4L/wAc6np/&#xA;s/3HTp0+jCqc4FdiqC0Wi6RYJRVb6vGQgPYIOnTxxVGc02+IbkqN+pFaj8MVaEkZHIMONeNa7Vrx&#xA;p867Yq2XQBiWACfbNem1d/oxVvkKlajkBUjvQ/7WKrVkjYKVYMHHJSDWo23HtvirfNNviG5KjfqR&#xA;Wo/DFWjJGByLDjXjWu1a8afOu2Ktl0AYlgAn2zXptXf6MVQ1/p9hqCxw3cYlEE0V1GtSCssLiSJ/&#xA;hIOzp8jiry//AJV7q9leWfpIt4YW0DjPGygGO01i6u7plDMCVjjuYydvlhVnPk3yva6BpkETGN9Q&#xA;9IW09xGTR0immmjjAP8AvtriTtgVkHNKV5CleNa960p9+2KtepHRjyFE+3v9nau/hsa4qu5CpWo5&#xA;AVI70P8AtYq0HQ0owPIcloeo8R9+KtCSM0owNSVFD3Faj5ihxVvmm/xDYhTv0JpQfjirRkjVWYsA&#xA;qfbJOwoK7+G2KruQqVqOQFSO9D/tYq0HQ0owPIcloeo8R9+KpPx/507jwX/jnU9P9n+46dOn0YVT&#xA;nArsVQn6H0itfqNvXx9JO/0YqoXfl/TJ7Z4ooY7SRt1uIYYC6GtSVEscqb9N1OKpHo3ki+tden1D&#xA;VL+DUbR4ZIobJbRLeNOVy08TFFZ0aRI39IvQFgqnrUk2rIv0No9CPqNvRvtfuk37b7YFQOr+WIbu&#xA;3YafJHpt0I5FilS2tpkLspEbSpLGWZUb4uKutfHFUP5b8q3NhbTprdza6xcPKXglSwhs1iiKIPRV&#xA;EMlRzUtVmrvTtiqbfobR9v8AQbfY1H7pOp+jFUk82eSl1fS5LbTLr9EXBHwSQQwcWbkrAuSnqj7P&#xA;+63XrvXDap0mi6UIwr2VszED1CIUAY0oTShwKu/Q+kVr9Rt6nv6Sf0xVLj5ZH6fjvVe3XSEtWgbS&#xA;fqcO85kDCf16cxRBw4Up3xVMP0No+3+g2+xqP3SdT9GKu/Q2j0p9Rt6VrT0k61r4eOKpTpXlCGz1&#xA;XWLq5aK7s9RljktLSSJSLcLGEdFPTixFaAffXDapv+h9IrX6jb1Pf0k/pgVB6t5ehuNMuINLS10+&#xA;/eMpa3rWsc6wsejekSganhXFVDQfLD2drMmry22q3D3Es0My2UNsI4pGrHCETnX0wacyanviqZfo&#xA;bR9/9Bt9zU/uk6j6MVSbzT5Rm1TT/qukXFvpDSeqt1MLSOV5I5IJIgqNyQxOjusiuK7qNiKgqpjp&#xA;vl+wttPtYLi3guLmGGOKa4MS1kdFAZzWp+I1O5xVEDRtHFKWNuKCg/dJsPuxVE+hD6PoemvoceHp&#xA;UHDhSnHj0pTtiq/FXYq7FXYq7FXYq7FXYq7FXYq7FUBr+lSato15psd7cac91GY1vrN/TniJ/bjf&#xA;9lhirCZPyguyyRRedNfhsnkmnvFjuVjuJZJWV14zxLHxRSDWqMxFAGVRQqsx8taJNoulLYTald6s&#xA;6vI/1y+cSTn1GLcSwA2WtB4DbFU0xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;v//Z"/>
    </rdf:Alt>
   </xap:Thumbnails>
   <xapMM:DerivedFrom rdf:parseType="Resource"/>
   <xapTPg:MaxPageSize
    stDim:w="468.000000"
    stDim:h="648.000000"
    stDim:unit="Points"/>
   <xapTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="Courier"
      stFnt:fontFamily="Courier"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="6.0d7e1"
      stFnt:composite="False"
      stFnt:fontFileName="Courier.dfont"/>
    </rdf:Bag>
   </xapTPg:Fonts>
   <xapTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xapTPg:PlateNames>
   <xapTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xapG:groupName="Default Swatch Group"
      xapG:groupType="0"/>
    </rdf:Seq>
   </xapTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -319 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 319 li
468 319 li
468 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0.851 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
85.8428 283.304 mo
85.8428 280.644 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier Initial
ct_T42Dict begin
-0.652 -0.406 0.762 1.086
 256 array 0 1 255 {1 index exch /.notdef put} for  /GZFBAA+Courier
Type42DictBegin
[<00010000000b000b000b000b63767420f78470aa000000bc000002906670
676d6117704c0000034c0000008d676c79661528af92000039e8000012d8
68656164c5a1b8ee000003dc000000366868656106ec0414000004140000
0024686d74784bf8ac0600000438000013b06c6f6361005c6628000017e8
000014986d6178700d400cef00002c80000000206e616d65a9716d9a0000
2ca0000002a670726570787ac61a00002f4800000a9d6764697200000000
00000000000000000000009800ba005a00c800cd009800a6000a021b0248
007b007d00b40098009c00ac00c5020a019600d5013f01b80093018901c1
0164018900cd009800cd00000014032f0010000c01c1040802ec009800ae
00000089008700cd01e304d900db004a008d00db039a0079033f00000079
00ae015a0342001d007104140000007900a400db00d500000439033b0096
010a01bc01d901db018b00a601c7019c00ac035800f200890089039c03b6
005a0089041900f2033303020098009600cd01a800000079000000790419
0098030201a201dd01ee00b60017016601ae010c00a802980079007701fa
007500960089012d00910091013f0060006204a000750081005800580058
00f000f20098008d01cb007d008d007d00c1034c009600ae018901cd011b
019c00cd00b4017100640308018100fc00fe01fa030e031700910091009e
0087008700930098028301460191021d00df00000089008d0000000004f6
04a204a204a204a20000001f016401ee0075008d002104ee04ee04ee050e
0075021b006204a204a2008d008d0614065601c7022d01b801c700930164
0217028d016d00c3000000190164002104ee030a008d0091024e037f008d
03d1021900bc008d00810081017b04a202a40266008d000c00f2008f0198
025a00000096023b0052007b0614040a039c039c039c039c0000008d0098
008d024805cd053d051d008d0196039c018f039c00be01060019039c007b
009e0396068501fa007701aa0079007d008900890071013f006404a004a2
006f006f0071006f007b00000058006a00f00068006f0308005e00cd016d
00c3021702170064030a018100fc01fa0071030e0321007b057100be0073
02d10073007302d1009302830179007f00df008d000000007fff00980098
008200304007060504030201002c2010b002254964b040515820c859212d
2cb002254964b040515820c859212d2c20100720b00050b00d7920b8ffff
5058041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff50
58041b0559b0051cb0032508e12d2c4b505820b80143454459212d2cb002
254560442d2c4b5358b00225b0022545445921212d2c45442d0000000001
000000010000c290f6005f0f3cf50111080000000000a380978000000000
c11bd700fac3fcbb061e08b7000000060001000100000000000100000608
fe0800000696fac3fac2061e0001000000000000000000000000000004b3
04cd00660000000004cd000004cd000004cd01ac04cd015804cd000604cd
00c704cd00cd04cd00b404cd020804cd019c04cd019a04cd00d104cd0062
04cd016d04cd009a04cd01a204cd00e704cd00cd04cd010404cd00a204cd
00b604cd00b204cd00ac04cd00cd04cd00cf04cd00cf04cd00c904cd01a2
04cd016d04cd004404cd006604cd004204cd00fa04cd00dd04cdfffe04cd
005404cd004e04cd006204cd004204cd005c04cd004404cd006204cd00be
04cd006d04cd004804cd003904cd000c04cd002104cd004a04cd005804cd
004a04cd003b04cd008f04cd005c04cd003d04cd000e04cd000204cd0056
04cd004c04cd00b604cd019c04cd00c904cd019c04cd010204cdffee04cd
00fe04cd008704cd004404cd006004cd005804cd006604cd00bc04cd0085
04cd006404cd00a604cd00e904cd006804cd00ba04cdfffe04cd006804cd
005a04cd004204cd004e04cd006d04cd00b204cd005804cd004804cd0029
04cdffec04cd005204cd003904cd00c704cd011b04cd022904cd011b04cd
008304cdfffe04cdfffe04cd004e04cd004204cd002104cd004a04cd003d
04cd008704cd008704cd008704cd008704cd008704cd008704cd006004cd
006604cd006604cd006604cd006604cd00a604cd00a604cd00a604cd00a6
04cd006804cd005a04cd005a04cd005a04cd005a04cd005a04cd004804cd
004804cd004804cd004804cd00f60333005804cd00be04cd010204cd009a
04cd012704cd00c104cd002904cd001704cd001704cd007304cd018f04cd
00ee04cdfffe04cd004a05b4009a046400a2046400660464006204cd004c
049c002b069600e90464005c04cd00ee04cd00c10625010e04cd002504cd
006004cd00f204cd01ac04cd006204cd002104e5001b04cd012f04cd012f
04cd003d04cd000004cdfffe04cdfffe04cd004a04cd004404cd004604cd
ffd304cdffd304cd00db04cd00f804cd01ae04cd01b60464003503f40033
04cd003904cd004c04cd007904cd000b04cd01d904cd01d904cdfffc04cd
fffc04cd00f604cd01a604cd019804cd00e904cdffa404cdfffe04cd0042
04cdfffe04cd004204cd004204cd00be04cd00be04cd00be04cd00be04cd
004a04cd004a0652007104cd004a04cd003d04cd003d04cd003d04cd00a6
04cd010e04cd00fc04cd010804cd00e704cd01e704cd016a04cd016a04cd
015804cd01fa04cd010e04cd003904cd00ba04cd008f04cd00b204cd00b6
04cd00c704cd022904cd002904cd005a04cd004c04cd003904cd007104cd
004204cd006204cd00d904cd015004cd012904cd011f04cd007904cd0079
04cd007904cd000004cd004404cd008504cd00be04cd008f04cd00b204cd
004e04cd006004cd004e04cd006004cd005804cdfffe04cd008704cdfffe
04cd008704cdfffe04cd008704cd004e04cd006004cd004e04cd006004cd
006204cd005804cd004204cd006604cd004204cd006604cd004204cd0066
04cd004204cd006604cd004204cd006604cd004404cd008504cd004404cd
008504cd004404cd008504cd008504cd006204cd006404cdffd604cd0019
04cd00be04cd00a604cd00be04cd00a604cd00be04cd00a604cd005f04cd
005304cd006d04cd00e904cd004804cd006804cd003904cd00ba04cd0039
04cd00ba04cd003904cd00ba04cd003904cd00ba04cd002104cd006804cd
001f04cd006804cd002104cd006804cdffdb04cd004a04cd005a04cd004a
04cd005a04cd004a04cd005a04cd003b04cd006d04cd003b04cd006d04cd
003b04cd006d04cd008f04cd00b204cd008f04cd00b204cd005c04cd0058
04cd005c04cd005804cd005c04cd005804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd000204cdffec04cd004c04cd003904cd00b604cd00c704cd
00b604cd00c704cd008f04cd00b204cd005c04cd005804cd00790000fc7c
0000fc7b0000fc430000fc310000fc3e0000fc1c0000fd1c0000fc240000
fc9e0000fc250000fc430000fc990000fcdd0000fc0d04cd002904cd0044
04cd008504cd003904cd00ba04cd004804cd006804cd002104cd003b04cd
006d04cd0068046400330464003303f4001b03f4fff205b400a605b40071
0231feb20231feb20464ff680464ffae0464004d0464005004cd02290000
0000000000000000000004cd004804cdfffe04cd00be04cd00a604cd00e9
04cd01ac04cdfffe04cd008704cd00be04cd00a604cd004a04cd005a04cd
003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd0048
04cd003d04cd004804cdfffe04cd008704cdfffe04cd008704cdfffe04cd
002504cd004404cd008504cd004804cd006804cd004a04cd005a04cd004a
04cd005a04cd00e904cd004404cd002104cd006804cdfffe04cd008704cd
fffe04cd002504cd004a04cd006004cd006204cd006404cdfffe04cd0087
04cd004204cd006604cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd004a04cd005a04cd004c04cd003904cd00f804cd00be04cdfffe
04cd008704cd005404cd004404cd005404cd004404cd005404cd004404cd
004e04cd006004cd006204cd005804cd006204cd005804cd006204cd0058
04cd006204cd005804cd006204cd005804cd004204cd006604cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd005c
04cd00bc04cd004404cd008504cd006204cd006404cd006204cd006404cd
006204cd006404cd006204cd006404cd006204cd006404cd00be04cd00a6
04cd00be04cd00a604cd004804cd006804cd004804cd006804cd004804cd
006804cd003904cd00ba04cd003904cd00ba04cd003904cd00ba04cd0039
04cd00ba04cd000c04cdfffe04cd000c04cdfffe04cd000c04cdfffe04cd
002104cd006804cd002104cd006804cd002104cd006804cd002104cd0068
04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd
005a04cd005804cd004204cd005804cd004204cd003b04cd006d04cd003b
04cd006d04cd003b04cd006d04cd003b04cd006d04cd008f04cd00b204cd
008f04cd00b204cd008f04cd00b204cd008f04cd00b204cd008f04cd00b2
04cd005c04cd005804cd005c04cd005804cd005c04cd005804cd005c04cd
005804cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d
04cd004804cd003d04cd004804cd000e04cd002904cd000e04cd002904cd
000204cdffec04cd000204cdffec04cd000204cdffec04cd000204cdffec
04cd000204cdffec04cd005604cd005204cd005604cd005204cd004c04cd
003904cd00b604cd00c704cd00b604cd00c704cd00b604cd00c704cd0064
04cd005804cdffec04cd003904cdfffe04cd008704cdfffe04cd008704cd
fffe04cd008704cdfffe04cd008704cdfffe04cd008704cdfffe04cd0087
04cdfffe04cd008704cdfffe04cd008704cdfffe04cd008704cd004204cd
006604cd004204cd006604cd004204cd006604cd004204cd006604cd0042
04cd006604cd004204cd006604cd00be04cd00a604cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd004c04cd003904cd004c04cd003904cd004c04cd
003904cd004204cd006604cd004204cd006604cdfffe04cd002504cd000c
04cdfffe0000fd1c0000fc240000fc9e0000fc430000fc1c0000fc310000
fc3e04cd009a04cd006804cd002104cd006804cd00bc04cd004e04cd0029
04cd004204cd00e704cd00be04cd00ba04cdfeb004cd006804cd004a04cd
004a04cd005a04cd008f04cd00b204cd001804cd00b604cd00c704cd00a2
04cd015604cd006604cd005004cd004804cd004604cd001d04cd005b04cd
007b04cd001704cd005504cd006604cd006604cd005004cd004804cd0046
04cdfffe04cd008704cdfffe04cd008704cd004204cd006604cd004204cd
006604cd00be04cd00a604cd00be04cd00a604cd004a04cd005a04cd004a
04cd005a04cd003b04cd006d04cd003b04cd006d04cd003d04cd004804cd
003d04cd004804cd00b604cd00c704cd005c04cd003604cdfffe04cd004e
04cd003404cd007d04cd008704cd005a04cd005a04cd004604cd006004cd
005804cd005804cd006604cd006604cd004f04cd00bc04cd008504cd0085
04cd006404cd006604cd006604cd006604cd00e704cd00be04cd008304cd
00e704cdfffe04cdfffe04cdfffe04cdfee404cd006804cd005a04cd005a
04cd006d04cd006d04cd006d04cd006d04cd009a04cd00a604cd00a604cd
000004cd000004cd000004cd005804cd005804cd004804cd002904cdffec
04cd003904cd00fa04cd00fa04cd00fa04cd004a04cd006804cd004e04cd
006604cd00ca04cd002804cd003204cd002c04cd003f04cd00b204cd00c4
04cd012d04cd00fc04cd006a04cdffe004cd01ae04cd01b604cd00f304cd
00f404cd017204cd00fa04cd00fa04cd009b04cd00aa04cd00dd04cd01b6
04cd00f804cd01b604cd01e704cd01e704cd015d04cd015d04cd00f404cd
00f404cd010c04cd010c04cd022b04cd010904cd014904cd014704cd022b
04cd010904cd014904cd014704cd01a404cd01a404cd01e704cd01e704cd
00f804cd00f804cd00f804cd011f04cd00da04cd014e04cd012704cd0132
04cd00e704cd015d04cd010c04cd010c04cd010c04cd010c04cd010c04cd
015804cd015804cd010204cd010904cd017004cd017004cd015f04cd015f
04cd016a04cd014704cd00f004cd015804cd00fc04cd01a204cd016004cd
016004cd016004cd016004cd00fc04cd00ca04cd007b0000fb100000fcb5
0000fd5e0000fcc80000fc230000fc1e0000fc1a0000fce10000fce10000
fce10000fce10000fc7e0000fc7d0000fcc30000fcc30000fdc70000fe18
0000fd1a0000fc2b0000fc2b0000fc2b0000fc400000fd7a0000fd7a0000
fd5e0000fc930000fbda0000fc410000fc1a0000fb100000fb100000fc33
0000fc400000fb100000fc0b0000fd1a0000fc930000fc930000fb3d0000
fc800000fd350000fb100000fc7e0000fc7d0000fc330000fce10000fc24
0000fca80000fc930000fc3c0000fcc80000fc930000fc2f0000fc2f0000
fc2f0000fba80000fc84000000000000fc270000fd1a0000fc1a0000fc80
0000fc270000fc270000fad50000fd1a0000fe520000fc7a0000fc010000
fc780000fd020000fd020000faed0000faed0000fd2b0000fd020000fac3
0000fbff0000fc040000fc220000fbf60000fbef0000fc140000fbe50000
fbf70000fba30000fbff0000fbfb0000fbef0000fbea04cd016d04cd01a6
04cd00ef0625010e04cd008704cd00bc04cdfffe04cd008704cdfffe04cd
008704cdfffe04cd008704cd004204cd006604cd004204cd006604cd00be
04cd00a604cd004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd
004a04cd005a04cd004a04cd005a04cd004a04cd005a04cd004a04cd005a
04cd003d04cd004804cd003d04cd004804cd003d04cd004804cd003d04cd
004804cd003d04cd004804cd003d04cd004804cd004c04cd003904cd0000
04cd000004cd000004cd000004cd000004cd000004cd000004cd000004cd
000004cd000004cd0000000000000000000004cd009a04cd009a04cdffd3
04cdffd304cd015604cdffdd04cd01b604cd00f804cd016204cd01d904cd
003d04cd01c7000000000000000000000000000000000000000000000000
0000000004cd000004cd005e04cd01b604cd00f804cd002c04cd01b604cd
00f804cd002c04cd010204cd005704cd007104cd00fa04cdffdd04cd0006
04cd000604cd009804cdffe604cd009a04cd019c04cd019c04cd001704cd
ffe704cd000f04cd008b04cd00c104cd013c04cd013c04cd00d104cd016d
04cd000604cd00d104cd00d904cd008304cd000604cd006204cd002804cd
009504cd005704cd00ce04cd01d904cd005704cd005504cd01d904cd01d9
04cd00000000000000000000000000000000000000000000000000000000
000000000000000000000000000004cd016904cd014304cd016504cd015d
04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd012904cd
01e904cd01e804cd012204cd016904cd017b04cd016404cd016304cd0165
04cd015d04cd016a04cd016f04cd016a04cd016a04cd012604cd014904cd
012904cd01e904cd01e804cd001c04cd001f04cd004e04cd010204cdfffe
04cd005004cd003304cd003c04cd005004cd005804cd003404cd005c04cd
005004cd004404cdfffe04cd006604cd004e04cd002604cd002604cd0062
04cd003004cd003004cd005f04cd006d04cd006d04cd005104cd001704cd
002704cd002404cd006204cd00e704cd009804cd005c04cd008e04cd003b
04cd002304cd00b404cd00be04cd002804cdfffd04cd000e04cd005604cd
003904cd004e04cd006204cd000c04cd00a604cd002e04cdffdb04cd0029
04cd005204cd00ba04cd006004cd005804cdfffe04cdffee04cd004e04cd
000e04cd00d604cd007e04cd007e04cd001104cd005c04cd003d04cd0048
04cd00620000fce604cd00660066fffe0087008700420066004200660042
006600be00a600a60050004a005a004a005a004a005a008f00b2003d0048
0052003b003d006d00480058004400580044ff0a0004003e003e00b3ffc0
ffc0fee800d900d60066fffe00390062004400210044003b004c003b00d1
0062005400580044008500600068005c0058004401a2004400e700e700d1
012501bc022900830083006601f100b200780078ff78ff78022a0202022a
0202ff78ff78022a0202ff78ff78000004cd00e704cd00c904cd019804cd
01c504cd01b604cd01a604cd00e904cd00f604cd00f804cd00e804cd00e7
000000000000004400000044000000440000004400000044000000440000
004400000044000000440000004400000044000000440000004400000044
00000044000000440000009c000000dc000000dc000001a40000024c0000
036c0000036c0000036c0000045c0000045c0000045c0000045c0000045c
0000045c0000045c0000045c0000045c0000045c0000045c0000045c0000
045c0000045c0000045c0000045c0000045c000005780000057800000578
000005780000057800000578000005780000057800000578000005780000
057800000578000006d8000006d8000006d8000006d8000006d8000006d8
000006d8000006d8000006d8000006d8000006d8000006d8000006d80000
06d8000006d8000007f0000007f0000007f0000007f00000092400000924
00000aac00000aac00000b9c00000b9c00000b9c00000b9c00000d880000
0d8800000d8800000d8800000d8800000e840000109000001090000011c0
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d8000012d8000012d8
000012d8000012d8000012d8000012d8000012d8000012d8000012d80000
12d8000012d8000012d8000012d8000012d8000012d80001000005250191
0009007a00050002001000400011000007e80aa100030001000000190132
0001000000000000005e0007000100000000000100070065000100000000
00020007006c0001000000000003001c007300010000000000040007008f
000100000000000500070000000100000000000600070096000100000000
01020009009d0001000000000103001000a60003000104040002000600b6
0003000104060002000e00bc0003000104070002000c00ca000300010409
0002000e00d600030001040b0002001000e400030001040c0002000c00f4
0003000104100002001001000003000104110002000a0110000300010412
00020006011a0003000104130002001001200003000104140002000c0130
0003000104160002000c013c0003000104190002000e014800030001041d
0002000c0156000300010804000200060162000300010c0a0002000c0168
362e3064376531436f7079726967687420a920313939302d393120627920
42697473747265616d20496e632e20436f7079726967687420a920313939
302d32303037206279204170706c6520496e632e20416c6c207269676874
732072657365727665642e436f7572696572526567756c6172436f757269
65723b20362e30643765313b20323030372d30372d3132436f7572696572
436f75726965724c6967617475726573436f6d6d6f6e204c696761747572
65736a196e969ad4004f007200640069006e00e60072004e006f0072006d
0061006c0052006500670075006c00610072004e006f0072006d00610061
006c0069004e006f0072006d0061006c005200650067006f006c00610072
006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c0069
00650072004e006f0072006d0061006c004e006f0072006d0061006c041e
0431044b0447043d044b0439004e006f0072006d0061006c5e3889c44f53
004e006f0072006d0061006c000041ff02800141001300030140000c0003
013e00fe0003013d00fe0003013a003e0003013900bb0003013800fe0003
013700bb00030136005d0003013500960003013400fe0003013300bb0003
013200640003013000fe0003012d00fe0003012c012400fe0005012a00fe
00030129006b00030128003500030127006b00030126000c0003012500fe
0003012400fe00030123009600030120011f00220005012000fe0003011f
00220003011e000c0003011d011c00530005011d00960003011c00530003
011b004c0003011a00530003011900fe00030118011700fe0005011700fe
0003011600c100fe0005011400fe00030113003500030112004700030111
011000fa0005011100fe0003011000fa0003010f00fe0003010c00fe0003
010b00fe0003010a0109001d00050109001d0003010800f3000a00050108
00100003010700d200470005010700440003010600fe0003010500fe0003
010400f3000a0005010400fe0003010300fe00030102003e00030101002e
000301000096000300ff00fe000e000500ff00fe000300fe00fd00090005
00fe000e000300fd0009000300fc002e000300fb00fe000300fa00f9007d
000500fa00fe000300f9007d000300f80012000300f700f60094000500f7
00fe000300f700c0000400f600f50061000500f60094000300f600800004
00f500f4002e000500f50061000300f541ff0040000400f400f3000a0005
00f4002e000300f3000a000300f00015000300ef00fe000300ee00ed000b
000500ee00fe000300ed000b000300ec00e60017000500ec00fe000300eb
00ea000b000500eb00fe000300ea000b000300e9001e000300e800a60003
00e70039000300e600e50008000500e60017000300e50008000300e400af
000a000500e400fe000300e300fe000300e2005d000300e100fe000300e0
00af000300df00fe000300de00fe000300db00fe000300da0014000300d9
00d8007d000500d900fe000300d8007d000300d70014000300d600fe0003
00d500b40041000500d500fe000300d400fe000300d300d20047000500d3
0096000300d20047000300d100fe000300d000fe000300cf001a000300ce
0014000300cd001a000300cc00fe000300cb00ca0047000500cb00fe0003
00ca0047000300c900c80014000500c900fe000300c80014000300c700c6
0014000500c60014000300c5006b000300c400bb000300c300c200140005
00c30025000300c3ffc0000400c200af000a000500c20014000300c100fe
000300be00bd008c000500be00fe000300be00c0000400bd00bc00590005
00bd008c000300bd0080000400bc00bb0026000500bc0059000300bc0040
000400bb0026000300ba00b40041000500ba0032000300b9007d000300b8
00fe000300b700fe000300b6001a000300b541ff00b40041000500b500fe
000300b5ffd0000400b40041000300b300b2008c000500b300fe000300b3
00c0000400b200b10059000500b2008c000300b20080000400b100b00026
000500b10059000300b10040000400b000af000a000500b00026000300af
000a000301450028000301440028000300ae00af000300ad00fe000300ac
00fe000300ab00fe000300aa0008000300a800fe000300a700fe000300a6
00fe000300a400a300fa000500a300fa000300a200fa000300a1004b0003
00a0009f0053000500a000bb0003009f00530003009e00fe0003009d009c
007d0005009c007d0003009a009900fe0005009900fe0003009800fe0003
0095007d000300940006003a00050094004b00030093000c0003009200fe
000300910090000b00050090000b0003008f003e0003008e008d00290005
008e002e0003008d00290003008c00fe0003008b00fe0003008a00fe0003
00890088003e00050089007d00030088003e0003008700fe00030086005d
00030085006b00030084008300fe0005008300fe0003008200fe00030081
003a0003008000220003007f007e00460005007f00aa0003007e00460003
0079005d00030078007d0003007700fe000300760075003a0005007600fe
00030075003a0003007100fe0003006e00fe0003006d006c000f0005006d
00330003006c000f0003006b00fe0003006a00fe41ff0003006900680010
0005006900af00030068001000030067003700030066005a000a00050066
004400030065007d00030064005400100005006400fa000300630062000c
0005006300fe00030062000c000300610060000d00050061002d00030060
000d0003005e005d00140005005d00140003005b005a000a0005005b00fe
0003005a000a0003005900fe000300580054001000050058002900030057
001f00090005005700fe00030056007d00030055005400100005005500fe
0003005400100003005300fe000300520036000b0005005200fe00030051
00290003005000fe0003004e001a0003004d007d0003004c007d0003004b
00380003004a00fe0003004900640003004800fe00030047009600030046
00a60003004500fe00030043001e000300420036000b0005004200780003
0041002900030040003e000a0005004000640003003f003e000a0005003f
00960003003e000a0003003d000a0003003c00fe0003003b00fe0003003a
00fe0003003900fe00030038003700180005003800fa000300370036000b
00050037001800030036000b0003003400960003003300fe0003003200fe
0003003100fe0003003000fa0003002f002c0003002e00fe0003002d00fe
0003002c00fe0003002b00fe0003002a00fa000300290007000300280006
003a00050028007d0003002700bb0003002600fe00034196002500960003
00240018001400050024003e0003002300fe0003002200fe0003002100fe
0003002000fe0003001f00090003001e000400140005001e00440003001d
004a0003001c000400140005001c00fe0003001b001a00280005001b00fe
0003001a002800030019001800140005001900fe00030018001400030017
00fe0003001600fe0003001400fe00030013001200080005001200080003
0011001000290005001000290003000f000e004c0005000f00fa0003000e
004c0003000d0006003a0005000d00fe0003000c000b00fe0005000b00fe
0003000a000900160005000900160003000800fe000300070006003a0005
000700bb00030006003a000300050004001400050005004b000300040014
0003000300fe00030001001a000300000012000300010118858d012b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
1d00000000>
[4825 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 68 16 <0001009a016d0433022f000f002140120c0b04030407d100d0100f080700
040b031010d4c41739310010f4e41739301322263d013436332132161d01
140623c514171714033d171a1e13016d19166a131616136a121d0000>GZFBAA+Courier AddT42Char 
1 420 20 <00010104000003fa050800210041402421100a090005030dbe1f11c4180a
20181215100019091f04200615101d20060f1c011c2210d45dc4d4fcc411
12173911123939123931002fec32fcc4173930010e012322263534363725
3e013332161511333216151406232122263534363b011101770d0d051f27
222001290b150b1316a059302828fdaa28283059a604310202231d182409
500303231efbc61d2824242424281d03d100>GZFBAA+Courier AddT42Char 
1 876 24 <000100acffdf040204ee002a0077404f1f2922001e033f1b4f1b5f1b031b
18b90f030103d712b9500f010f0929c422d609d52b6b176c136b087b177c
1394199011a419a01109221e2923001507260f060106001d6f0c7f0c020c
601e011e2b10d45dc45decd45dc4ec1139391239315d0010e4fcec10c65d
eef65dfec45d12393911123930013e013332161514042322263534363332
163332363534262322062322263511343633213216151406232101854270
33afe9fefec9a8e32a1c0bd55b86a79e785aad121e19293301fa3030322e
fe3b030e1817f3b4bff85b411a294da17f7ca55a2c3a01f2211d27272529
>GZFBAA+Courier AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/hyphen 16 def
/one 20 def
/five 24 def
end
GZFBAA+Courier /Encoding get
dup 45 /hyphen put
dup 49 /one put
dup 53 /five put
pop
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier /GZFBAA+Courier findfont ct_VMDictPut/VVUGZQ+Courier*1 [45{/.notdef}rp /hyphen 3{/.notdef}rp /one 3{/.notdef}rp /five 202{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf76.1216 292.705 mo(-15)[6.00006 6.00006 0 ]xsh142.147 283.304 mo
142.147 280.644 li
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GZFBAA+Courier gcheck setglobal} if
1 220 19 <000200cdffdf0400050e000b0017006c405b06b90c00b912be0cd5183b0b
3b07340134054b0b4b07440144055b115b0d54136b116b0d64139b0b9b07
94019405a90ba907a601a605b90bb907b601b605c601c605d711d70dd813
d817e711e70de813e8172409071503070f1c1810f4ecd4ec315d0010e4fc
ec10ee300122021514123332123534020322021110123332121110020266
7380807374808074bcddddbcbcdede047ffef0f8f9feef0111f9f80110fb
600163013501340163fe9cfecdfecdfe9b000000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/zero 19 def
end
GZFBAA+Courier /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf132.425 292.845 mo(-10)[6.00006 6.00006 0 ]xsh198.447 283.304 mo
198.447 280.644 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf191.726 292.525 mo(-5)[6.00006 0 ]xsh254.751 283.304 mo
254.751 280.644 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf250.79 292.845 mo(0)sh311.055 283.304 mo
311.055 280.644 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf307.214 292.525 mo(5)sh367.355 283.304 mo
367.355 280.644 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf360.033 292.845 mo(10)[6.00006 0 ]xsh423.659 283.304 mo
423.659 280.644 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf416.338 292.705 mo(15)[6.00006 0 ]xsh0.426 lw
97.105 283.304 mo
97.105 281.708 li
108.364 283.304 mo
108.364 281.708 li
119.626 283.304 mo
119.626 281.708 li
130.885 283.304 mo
130.885 281.708 li
153.405 283.304 mo
153.405 281.708 li
164.668 283.304 mo
164.668 281.708 li
175.926 283.304 mo
175.926 281.708 li
187.189 283.304 mo
187.189 281.708 li
209.709 283.304 mo
209.709 281.708 li
220.968 283.304 mo
220.968 281.708 li
232.23 283.304 mo
232.23 281.708 li
243.488 283.304 mo
243.488 281.708 li
266.013 283.304 mo
266.013 281.708 li
277.272 283.304 mo
277.272 281.708 li
288.534 283.304 mo
288.534 281.708 li
299.792 283.304 mo
299.792 281.708 li
322.313 283.304 mo
322.313 281.708 li
333.576 283.304 mo
333.576 281.708 li
344.834 283.304 mo
344.834 281.708 li
356.096 283.304 mo
356.096 281.708 li
378.617 283.304 mo
378.617 281.708 li
389.875 283.304 mo
389.875 281.708 li
401.138 283.304 mo
401.138 281.708 li
412.397 283.304 mo
412.397 281.708 li
74.585 283.304 mo
74.585 281.708 li
63.322 283.304 mo
63.322 281.708 li
52.064 283.304 mo
52.064 281.708 li
434.917 283.304 mo
434.917 281.708 li
446.179 283.304 mo
446.179 281.708 li
457.438 283.304 mo
457.438 281.708 li
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GZFBAA+Courier gcheck setglobal} if
1 1752 68 <00020087ffe7048703b4000c0035008340577a058b059b059a159507ab05
a407a425ab28aa15b50abb1fba110d1a1d19350d3109000c2a192903e0e0
160116fc09fa1020f81de026f710d32afb312b113a12ba1203312b2e3532
0d03002e1f1900272950062823133610dcc4ecf4ec32e412173912393931
5d002fece4fcfce410eefe5dee393911393911123939111239305d012e01
23220615141633323635170e012322263534363332161735342623220623
222635343633321615113332161514062b0122262703443767339ab26f56
7fd90852c16695b7f3dc3a763e6e744ec01f1d26ddacb0b431473028289d
1c240601ba1211685844588548cf4a4ea6859eae0f1007736e542f253b52
b3affe3b1e2724242220>GZFBAA+Courier AddT42Char 
1 2340 74 <00020085fe710485039e000b003700ed41610043002a004c00200053002a
005c0020006c00200073002a007c002000ac002000a3002a00bc002000ba
002300b3002a000c002c002b0036002f001f001e000c0003002200060036
0100002f0018001b00e00012000000e00028000600e00022001201030028
00f7002f0104003800440001004400050054000100540005008a001d00aa
002600aa002400ba002600ba00240009003600300033002f000c0009002b
001e00270033001f008f000c00af000c0002000c00540003002700150025
003810d4c4ecf45de4fc3cc41139123939315d0010ecece4d4ec10ee10fe
c410ee1112173911123939305d012206151416333236353426011406070e
012322263534363332163332363d010e0123222635343633321617353436
3b0132161514062b01024a83a6a68382a7a701301c2238ca89726933231b
701d947c3d9460bbf5fcba4d934b1b1d9728283245120308a2817fa3a37f
7fa4fd2d8c752c4a4d2c301f2f0f88a5794742f9bfc0fd393a4815142323
2820>GZFBAA+Courier AddT42Char 
1 2732 76 <000200a6000004500560000b0027007a412a00270023001c000301060009
0105001c010000230104001a000c00fb00130014001a002000170024001b
000c0013000d001000060023001d00200000005e00060040001000010010
000c002700170020001b002810dcc4c4fcc45dd4ec113939111239391112
391112393931002fec32fcecf4ec11123930013436333216151406232226
13213216151406232122263534363321112322263534363321321615020a
27403e2825414027b901412725232ffcf828282a2a0131c3292b28280125
1b1f04bc6c382f58562926fc0d2124291f24242322028125232323161300
>GZFBAA+Courier AddT42Char 
1 2972 80 <0001fffe000004e703b6004f011a416a009400380095001a0093003e0003
000000430014001b00060005002c004f0012000e0007003d003700330015
00000018000300fa003a002c0100003301040040003a00f70044002a001c
0003000700fb004b0023000e004500420045003c005500420055003c0065
003c0075003c0006003f002700010045004b00480043002d00300034002b
001d00230020001b003d000f00120008000e000b0006004c000000480063
0000005c004300200061001b000b00610043005f00060037001b005c0030
005700270052002b005f000600270012005010d4ecf4e4e4ec3210e4e410
e410eee41239111239391239391112393912391139111239395d315d002f
3c3cee1732ee32feee10ee32113911393911123939121739305d01342623
220615113332161514062b0122263d011135342623220607113332161514
06232122263534363b01112322263534363b013216173e01333216173e01
33321615113332161514062b0122263503d9333e4a57123d2922237f2b1f
443b2d4b1b253c2a2230fef627252f4414124633282899211502295e3b46
5b162a6e478177103e2a2423792826022d8d638070fe601d28242428421d
01a64e4b573534fdd91e27291f2325281d02812028232317252c2a3d3e3f
3ca8bcfe3b1e272424303400>GZFBAA+Courier AddT42Char 
1 3716 86 <000100b2ffe9041703b40040015b41950047003200460011005700320056
0011008d003b0082001a0082001b0082001c008b00130089001200840033
00860032009d003b0093001a0093001b0093001c009b0013009900120094
0033009600320096000d0099002a00ad003b00a3001a00a3001b00a3001c
00a9002a00a5000d00a4003000aa002e00bb003b00b3001a00b3001b00b3
001c00ba002a00b9002d00b400310025002200250021001b002c001e003b
00000038000b00320012001100030038001800010004000b00e00038007f
0025007b0028000200250140002c00e0001e001800f7003e003800d30070
000400010004014000410036003400b9000d00b600300003000b003b0008
00320004002f001200110015000e0065009f002100af002100bf00210003
00210035002f006500000015004110dcc4ecd4c45dec113939111739315d
0010ec5de432fcc4ecec5d10ee1139111217391112393911123939113930
5d3735343633321716171e013332363534262b0122263534363332163332
363332161d01140623222726272e01232206151416171e01151406232226
270e01232226b221252918100d2aa4636a80677d37ccd6d1bd4da0040b3e
1e222120231e2c1f143578515e7376c3d0c0d4b4398c6a233211232548b2
2c2638221136415646473c8e8784922b27323275352f332312312b53403f
360405878d87a215191717310000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/a 68 def
/g 74 def
/i 76 def
/m 80 def
/s 86 def
end
GZFBAA+Courier /Encoding get
dup 97 /a put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier*1 [45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one 3{/.notdef}rp /five 43{/.notdef}rp /a 5{/.notdef}rp /g /.notdef /i 3{/.notdef}rp /m 5{/.notdef}rp /s 140{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf238.908 309.729 mo(sigma)[6.00006 6.00006 6.00006 6.00006 0 ]xsh0.851 lw
41.9292 283.304 mo
467.572 283.304 li
41.9292 253.914 mo
44.5902 253.914 li
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GZFBAA+Courier gcheck setglobal} if
1 156 17 <000101a2fff2032b0156000b0014400903d409d30c061b000c10d4ec3100
10f4ec3025343633321615140623222601a26d57596c6d58586ca44e6462
50506262>GZFBAA+Courier AddT42Char 
1 588 21 <000100a2000003e3050e0033008540632406051d000db97f1401141d2925
c41dbe001e197b0c7a057b08862289049f089b059a049a1b961f9d19a40f
a412aa06aa07aa08aa05aa04ad19a525b908b525bb07bb06bb1bbc04bc05
1c2f2c33302603000624050822250720030a072c202517033410d4c4c0d4
c4ec1112173917391139315d002fecfcc410c65dee111239393930212226
35343f0136370035342623220607060706232226353436373e0133321615
1401060f01213e0133321615140615070e0123010a3533c01d1d37015a7a
613f7323060d252e241e0e1340bd63a6dffeac572e7b01c9042721212602
08031e182b2d41b31c1c340146956b85342c0813432c3e2421133e49d69c
c4febb512e762b2d2c26030f034d1f230000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/period 17 def
/two 21 def
end
GZFBAA+Courier /Encoding get
dup 46 /period put
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 43{/.notdef}rp /a 5{/.notdef}rp /g /.notdef /i 3{/.notdef}rp /m 5{/.notdef}rp /s 140{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf11.8848 256.974 mo(-0.2)[6.00006 6.00006 6.00006 0 ]xsh41.9292 202.917 mo
44.5902 202.917 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf11.8848 205.978 mo(-0.1)[6.00006 6.00006 6.00006 0 ]xsh41.9292 151.917 mo
44.5902 151.917 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf29.6479 154.977 mo(0)sh41.9292 100.921 mo
44.5902 100.921 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf17.646 103.98 mo(0.1)[6.00006 6.00006 0 ]xsh41.9292 49.9199 mo
44.5902 49.9199 li
@
VVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf17.646 52.98 mo(0.2)[6.00006 6.00006 0 ]xsh0.426 lw
41.9292 243.715 mo
43.5262 243.715 li
41.9292 233.517 mo
43.5262 233.517 li
41.9292 223.319 mo
43.5262 223.319 li
41.9292 213.116 mo
43.5262 213.116 li
41.9292 192.719 mo
43.5262 192.719 li
41.9292 182.516 mo
43.5262 182.516 li
41.9292 172.319 mo
43.5262 172.319 li
41.9292 162.119 mo
43.5262 162.119 li
41.9292 141.718 mo
43.5262 141.718 li
41.9292 131.52 mo
43.5262 131.52 li
41.9292 121.317 mo
43.5262 121.317 li
41.9292 111.119 mo
43.5262 111.119 li
41.9292 90.7218 mo
43.5262 90.7218 li
41.9292 80.5198 mo
43.5262 80.5198 li
41.9292 70.3208 mo
43.5262 70.3208 li
41.9292 60.1228 mo
43.5262 60.1228 li
41.9292 264.116 mo
43.5262 264.116 li
41.9292 274.316 mo
43.5262 274.316 li
41.9292 39.7218 mo
43.5262 39.7218 li
41.9292 29.5228 mo
43.5262 29.5228 li
@
gsave
0 -163 mo
468 -163 li
468 485 li
0 485 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GZFBAA+Courier gcheck setglobal} if

1 0 3 <> GZFBAA+Courier AddT42Char 
1 1400 53 <0002003b000004b204a20008004000a740575b075b035c3c6b076b03662e
762e072d3c01283c2e3f092b01b9003f103f023f1a00b921e42f1709c436
10363033281b1711210419142e3c2b08023f392f082801100a223f040d00
33050d280d3809000f281e14192f4110fcc432c4fc3ce410eec411121739
121117391112173911123939002f3cee3232feee32d65dee391112393930
4b5358bf00390144002f003c0144002e002e002f070e10ec0510ec593100
5d015d01113332363534262303333216151406232122263534363b021123
222635343633213216171e01151406071e0117133332161514062b012227
2627032e012b010187cf8c8d8a89d5443a302a3afeb02224282e213a3a4b
2c232301a6999734434d8d7e1a2913c921382a232271312f0603c03b4d3f
85041bfe6c65646566fc722025282025232520038e1c2722221d232d9455
73a5200f281cfecc1f26232548060401235934000000>GZFBAA+Courier AddT42Char 
1 2032 72 <00020066ffe7045a03b6001c002300bd414e006600050076000500a60005
00a6001600a9001000a9000200b600050007000300e0000f002100e00015
001d00b90080000600010006008f000000e00000000200000101001500f7
000f00d30024004400020054000200a6001700a9001300a9001100a90001
00b5001700ba001300ba001100ba0001000a001b001c00180000001d0012
001c0009001e0028000900180058001d002800120056002410fcecf4c4ec
1139111239111239315d0010e4ecfc5dc45dec10ee10ee305d011e013332
24333216151406070e012322003534003332001514062b0125212e012322
06011408b39b7501141d1e282a2e64d569e4feee0122e9d301162f680ffd
65028b0fa97b85b601a2909d7d261c1d301731340107d9dd0112ff00b638
268377918c000000>GZFBAA+Courier AddT42Char 
1 4544 89 <00010029ffdd04a0039c002600a141270096000f009a002500020028000f
0006002600200023001e0010000e000300000100001700060104002300d3
002700000026001f0020000e000f00100007001b00030014001b0028000a
0003002710d4c410d4c4111217390010e4fc3cec17321139391239304b53
584112000f014500200026000000100145001f0020001f000f0145002600
0e0145000000000026070510ec10ec0710ec0810ec5931005d1322263534
36332132161514062b010901232226353436332132161514062b01010e01
232226279c4231282801183926324325010401213c4d3626390135282831
4212feb619312f2b2f19030e202823231f272820fd7902871f29271f2323
2820fd27372120380000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/space 3 def
/R 53 def
/e 72 def
/v 89 def
end
GZFBAA+Courier /Encoding get
dup 32 /space put
dup 82 /R put
dup 101 /e put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 28{/.notdef}rp /R 14{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 3{/.notdef}rp /m 5{/.notdef}rp /s 2{/.notdef}rp /v 137{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [0 -10 -10 0 0 0 ]msf8.8193 164.052 mo(Re v)[-6.00006 -6.00006 -6.00006 0 ]yshgrestore
0.851 lw
41.9292 283.304 mo
41.9292 20.2437 li
85.8432 22.9037 mo
85.8432 20.2437 li
142.147 22.9037 mo
142.147 20.2437 li
198.447 22.9037 mo
198.447 20.2437 li
254.751 22.9037 mo
254.751 20.2437 li
311.054 22.9037 mo
311.054 20.2437 li
367.355 22.9037 mo
367.355 20.2437 li
423.659 22.9037 mo
423.659 20.2437 li
@
0.426 lw
97.105 21.8398 mo
97.105 20.2438 li
108.364 21.8398 mo
108.364 20.2438 li
119.626 21.8398 mo
119.626 20.2438 li
130.885 21.8398 mo
130.885 20.2438 li
153.405 21.8398 mo
153.405 20.2438 li
164.668 21.8398 mo
164.668 20.2438 li
175.926 21.8398 mo
175.926 20.2438 li
187.189 21.8398 mo
187.189 20.2438 li
209.709 21.8398 mo
209.709 20.2438 li
220.968 21.8398 mo
220.968 20.2438 li
232.23 21.8398 mo
232.23 20.2438 li
243.488 21.8398 mo
243.488 20.2438 li
266.013 21.8398 mo
266.013 20.2438 li
277.272 21.8398 mo
277.272 20.2438 li
288.534 21.8398 mo
288.534 20.2438 li
299.792 21.8398 mo
299.792 20.2438 li
322.313 21.8398 mo
322.313 20.2438 li
333.576 21.8398 mo
333.576 20.2438 li
344.834 21.8398 mo
344.834 20.2438 li
356.096 21.8398 mo
356.096 20.2438 li
378.617 21.8398 mo
378.617 20.2438 li
389.875 21.8398 mo
389.875 20.2438 li
401.138 21.8398 mo
401.138 20.2438 li
412.397 21.8398 mo
412.397 20.2438 li
74.585 21.8398 mo
74.585 20.2438 li
63.322 21.8398 mo
63.322 20.2438 li
52.064 21.8398 mo
52.064 20.2438 li
434.917 21.8398 mo
434.917 20.2438 li
446.179 21.8398 mo
446.179 20.2438 li
457.438 21.8398 mo
457.438 20.2438 li
@
0.851 lw
41.9292 20.2441 mo
467.572 20.2441 li
@
true set_gvm
%ADOBeginSubsetFont: GZFBAA+Courier AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GZFBAA+Courier gcheck setglobal} if
1 1116 41 <0001005c0000045c04a200380085404b352f363228262b1c18112bee26e7
32ee003601f0360136ec2411b920eb18e40e00c4070700272519231c1812
0e0804100b0104003527312e23311c04002e01f02e012e37250f1c150b10
3910dcc432c4fc3cc45d71c410ee10ee3211123911121739111239111239
3931002fee32feeeee32fe5d71e4fee41112391211391112393930253332
16151406232122263534363b021123222635343633213216151114062322
263d012111213534363332161d0114062322263d012111025e272a262422
fe132224272f213f3f4c2b24220375222323222a1efde101081c24201d1b
22241cfef88d212423252523252003851f2923252927fefe23232c4d8ffe
af1a4932262afe322632491dfe45>GZFBAA+Courier AddT42Char 
1 3464 85 <0001006d0000046f03b4002b0083412f001b00280017001c002b00250000
0010010000170025002800e0001f00f700170104000e000000fb00070094
002100a4002100b400210003000e001700110008000400140018000f0007
00010004001b0000002700140022000b000f002c10dcc4c4c4fc3cc43939
1239111739315d002fec32ecfcfcc410ee11123939111239302521321615
1406232122263534363b01112322263534363b0132161d013e0133321615
1406232226232206070204014c2725232ffd722728292bae4461302728e4
1b1c5fce77596e3721176d2b4ead698d2124291f2424232202811f292323
1514aa7774483925393d6f78>GZFBAA+Courier AddT42Char 
1 4240 88 <00010048ffec0473039c003100a8413b0000002500060003001300310012
000e0007001e001f001a000300e00022002600070100002d000e01040022
00d3001300fb001a0027002d002a0025001a00140017000f001b00120008
000e000b0006002e00250000000b001f001e000600270017005700120066
002a00530000002700250051003210fcece4fce4fc3ce411123911123939
1239391139391112393931002fece4fc3cec3210ee113939111239391217
393001141633323635112322263534363b01321615113332161514062b01
22263d010e0123222635112322263534363b01321615016d6a736d9b8927
23262ad5261f2e312b2927981b1e60894ca5a5154432272997231b01717e
748a68019d212326242140fd52202524241613444a37afb101c220282323
1c300000>GZFBAA+Courier AddT42Char 
GZFBAA+Courier /CharStrings get begin
/F 41 def
/r 85 def
/u 88 def
end
GZFBAA+Courier /Encoding get
dup 70 /F put
dup 114 /r put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/VVUGZQ+Courier*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 16{/.notdef}rp /F 11{/.notdef}rp /R 14{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 3{/.notdef}rp /m 4{/.notdef}rp /r /s /.notdef /u /v 137{/.notdef}rp]VVUGZQ+Courier nfVVUGZQ+Courier*1 [10 0 0 -10 0 0 ]msf230.267 13.9609 mo(Figure 2)[6.00006 6.00006 6.00006 6.00006 6.00005 6.00006 6.00006 0 ]xshgsave
0 484.941 mo
468 484.941 li
468 -163 li
0 -163 li
cp
clp
464.912 253.914 mo
467.572 253.914 li
464.912 202.917 mo
467.572 202.917 li
464.912 151.917 mo
467.572 151.917 li
464.912 100.921 mo
467.572 100.921 li
464.912 49.9201 mo
467.572 49.9201 li
@
0.426 lw
465.976 243.715 mo
467.573 243.715 li
465.976 233.517 mo
467.573 233.517 li
465.976 223.319 mo
467.573 223.319 li
465.976 213.116 mo
467.573 213.116 li
465.976 192.719 mo
467.573 192.719 li
465.976 182.516 mo
467.573 182.516 li
465.976 172.319 mo
467.573 172.319 li
465.976 162.119 mo
467.573 162.119 li
465.976 141.718 mo
467.573 141.718 li
465.976 131.52 mo
467.573 131.52 li
465.976 121.317 mo
467.573 121.317 li
465.976 111.119 mo
467.573 111.119 li
465.976 90.7218 mo
467.573 90.7218 li
465.976 80.5198 mo
467.573 80.5198 li
465.976 70.3208 mo
467.573 70.3208 li
465.976 60.1228 mo
467.573 60.1228 li
465.976 264.116 mo
467.573 264.116 li
465.976 274.316 mo
467.573 274.316 li
465.976 39.7218 mo
467.573 39.7218 li
465.976 29.5228 mo
467.573 29.5228 li
@
0.851 lw
467.572 283.304 mo
467.572 20.2437 li
@
grestore
1.703 lw
52.064 149.516 mo
52.319 148.367 li
52.575 147.358 li
52.702 146.933 li
52.83 146.562 li
52.958 146.264 li
53.086 146.043 li
53.217 145.898 li
53.345 145.839 li
53.473 145.868 li
53.601 145.983 li
53.728 146.188 li
53.856 146.481 li
54.111 147.32 li
54.367 148.473 li
54.622 149.874 li
55.133 153.143 li
55.648 156.403 li
55.903 157.786 li
56.031 158.378 li
56.159 158.885 li
56.286 159.302 li
56.414 159.621 li
56.542 159.829 li
56.669 159.936 li
56.797 159.923 li
56.925 159.795 li
57.053 159.553 li
57.18 159.195 li
57.44 158.152 li
57.695 156.71 li
58.206 152.947 li
58.717 148.699 li
58.972 146.694 li
59.228 144.932 li
59.487 143.519 li
59.615 142.974 li
59.743 142.548 li
59.87 142.255 li
59.998 142.093 li
60.126 142.072 li
60.253 142.191 li
60.381 142.455 li
60.509 142.855 li
60.764 144.055 li
61.02 145.741 li
61.275 147.822 li
62.301 157.672 li
62.556 159.808 li
62.684 160.732 li
@
62.6841 160.732 mo
62.8111 161.536 li
62.9391 162.213 li
63.0671 162.754 li
63.1951 163.141 li
63.3221 163.371 li
63.4541 163.443 li
63.5821 163.35 li
63.7101 163.09 li
63.8371 162.669 li
63.9651 162.09 li
64.0931 161.358 li
64.3481 159.48 li
65.3701 148.635 li
65.6291 145.851 li
65.8851 143.366 li
66.1401 141.331 li
66.2681 140.518 li
66.3951 139.863 li
66.5231 139.373 li
66.6511 139.062 li
66.7781 138.93 li
66.9061 138.982 li
67.0341 139.22 li
67.1621 139.646 li
67.2891 140.246 li
67.4171 141.016 li
67.6771 143.029 li
67.9321 145.583 li
68.4431 151.725 li
68.9531 158.08 li
69.2091 160.881 li
69.4641 163.205 li
69.5961 164.147 li
69.7241 164.916 li
69.8521 165.508 li
69.9791 165.908 li
70.1071 166.112 li
70.2351 166.112 li
70.3621 165.912 li
70.4901 165.508 li
70.6181 164.912 li
70.7451 164.124 li
71.0011 162.03 li
71.5121 156.186 li
72.0271 149.261 li
72.2821 145.877 li
72.5371 142.8 li
72.7931 140.22 li
72.9201 139.16 li
73.0481 138.279 li
@
73.0479 138.279 mo
73.1759 137.59 li
73.3039 137.1 li
73.4309 136.819 li
73.5589 136.755 li
73.6909 136.904 li
73.8189 137.27 li
73.9459 137.845 li
74.0739 138.624 li
74.3289 140.744 li
74.5849 143.515 li
75.0959 150.363 li
75.6059 157.65 li
75.8659 160.94 li
76.1209 163.734 li
76.3769 165.874 li
76.5039 166.657 li
76.6319 167.232 li
76.7599 167.589 li
76.8869 167.725 li
77.0149 167.636 li
77.1429 167.321 li
77.2709 166.789 li
77.3979 166.044 li
77.5259 165.095 li
77.6539 163.958 li
78.1689 157.863 li
78.6789 150.402 li
79.1899 143.234 li
79.4459 140.28 li
79.5729 139.037 li
79.7009 137.977 li
79.8329 137.117 li
79.9609 136.466 li
80.0879 136.032 li
80.2159 135.828 li
80.3439 135.849 li
80.4709 136.1 li
80.5989 136.577 li
80.7269 137.27 li
81.7479 148.933 li
82.2629 156.539 li
82.5189 160.051 li
82.7739 163.098 li
83.0289 165.512 li
83.1569 166.435 li
83.2849 167.152 li
83.4129 167.65 li
83.5399 167.921 li
83.6679 167.968 li
83.7959 167.789 li
@
83.7959 167.789 mo
83.9279 167.38 li
84.0549 166.755 li
84.3109 164.882 li
84.5659 162.285 li
84.8209 159.11 li
85.8429 144.528 li
86.1029 141.454 li
86.2299 140.139 li
86.3579 138.99 li
86.4859 138.032 li
86.6129 137.27 li
86.7409 136.721 li
86.8689 136.389 li
86.9959 136.274 li
87.1239 136.389 li
87.2519 136.717 li
87.3799 137.266 li
87.5069 138.015 li
87.6349 138.965 li
87.8899 141.386 li
88.4049 147.788 li
88.9159 155.007 li
89.1719 158.416 li
89.4269 161.43 li
89.6819 163.877 li
89.8099 164.848 li
89.9379 165.631 li
90.0699 166.214 li
90.1969 166.593 li
90.3249 166.759 li
90.4529 166.716 li
90.5799 166.465 li
90.7079 166.006 li
90.8359 165.35 li
90.9629 164.507 li
91.2189 162.315 li
91.4739 159.561 li
92.4999 146.426 li
92.7549 143.557 li
93.0109 141.195 li
93.1389 140.25 li
93.2659 139.471 li
93.3939 138.879 li
93.5219 138.475 li
93.6489 138.262 li
93.7769 138.249 li
93.9049 138.428 li
94.0319 138.794 li
95.0579 147.277 li
@
95.0581 147.277 mo
95.5691 153.402 li
95.8241 156.343 li
96.0801 158.978 li
96.3391 161.17 li
96.4671 162.06 li
96.5951 162.801 li
96.7221 163.375 li
96.8501 163.784 li
96.9781 164.018 li
97.1051 164.082 li
97.2331 163.971 li
97.3611 163.691 li
97.4891 163.243 li
97.6161 162.643 li
97.8721 161.017 li
98.1271 158.923 li
98.6421 153.836 li
99.1531 148.584 li
99.4081 146.264 li
99.6641 144.323 li
99.7911 143.527 li
99.9191 142.863 li
100.047 142.336 li
100.174 141.948 li
100.306 141.714 li
100.434 141.625 li
100.562 141.68 li
100.689 141.88 li
100.817 142.221 li
100.945 142.697 li
101.072 143.293 li
101.2 144 li
102.222 152.079 li
102.481 154.198 li
102.737 156.109 li
102.992 157.718 li
103.12 158.378 li
103.248 158.936 li
103.375 159.383 li
103.503 159.715 li
103.631 159.927 li
103.758 160.025 li
103.886 160.004 li
104.014 159.868 li
104.141 159.625 li
104.269 159.276 li
104.529 158.297 li
104.784 157.008 li
105.295 153.862 li
105.806 150.614 li
@
105.806 150.614 mo
106.061 149.188 li
106.316 147.997 li
106.448 147.507 li
106.576 147.093 li
106.704 146.762 li
106.831 146.515 li
106.959 146.354 li
107.087 146.277 li
107.215 146.286 li
107.342 146.371 li
107.47 146.532 li
107.598 146.767 li
107.725 147.064 li
107.853 147.422 li
108.364 149.274 li
108.879 151.385 li
109.134 152.372 li
109.39 153.241 li
109.645 153.943 li
109.773 154.224 li
109.9 154.454 li
110.028 154.632 li
110.156 154.76 li
110.283 154.837 li
110.411 154.867 li
111.437 153.79 li
113.484 151.738 li
113.995 151.93 li
114.25 152.036 li
114.378 152.079 li
114.506 152.104 li
114.638 152.117 li
114.765 152.113 li
114.893 152.083 li
115.021 152.032 li
115.148 151.955 li
115.276 151.853 li
115.532 151.576 li
116.042 150.776 li
116.553 149.831 li
116.813 149.406 li
116.94 149.227 li
117.068 149.074 li
117.196 148.95 li
117.324 148.873 li
117.451 148.835 li
117.579 148.843 li
117.707 148.903 li
117.834 149.018 li
117.962 149.184 li
@
117.962 149.184 mo
118.09 149.406 li
118.345 150.01 li
118.6 150.814 li
119.115 152.875 li
119.626 155.156 li
119.882 156.203 li
120.137 157.084 li
120.265 157.442 li
120.392 157.731 li
120.52 157.944 li
120.648 158.076 li
120.78 158.123 li
120.907 158.08 li
121.035 157.944 li
121.163 157.71 li
121.418 156.965 li
121.546 156.454 li
121.674 155.863 li
122.695 149.078 li
122.955 147.252 li
123.21 145.587 li
123.466 144.204 li
123.593 143.647 li
123.721 143.195 li
123.849 142.859 li
123.976 142.651 li
124.104 142.565 li
124.232 142.617 li
124.359 142.804 li
124.487 143.132 li
124.615 143.591 li
124.742 144.183 li
125.002 145.745 li
125.258 147.741 li
125.768 152.619 li
126.279 157.778 li
126.534 160.081 li
126.79 162.005 li
126.922 162.783 li
127.049 163.418 li
127.177 163.899 li
127.305 164.218 li
127.433 164.367 li
127.56 164.337 li
127.688 164.129 li
127.816 163.737 li
128.071 162.43 li
128.199 161.524 li
128.326 160.464 li
128.837 154.969 li
@
128.837 154.969 mo
129.608 145.145 li
129.863 142.191 li
130.118 139.705 li
130.246 138.688 li
130.374 137.849 li
130.501 137.198 li
130.629 136.747 li
130.757 136.513 li
130.885 136.492 li
131.016 136.696 li
131.144 137.117 li
131.272 137.76 li
131.4 138.615 li
131.655 140.922 li
131.91 143.923 li
132.421 151.359 li
132.932 159.31 li
133.191 162.911 li
133.447 165.963 li
133.702 168.283 li
133.83 169.117 li
133.958 169.717 li
136.005 148.784 li
136.516 140.003 li
136.771 136.389 li
136.899 134.883 li
137.027 133.601 li
137.158 132.571 li
137.286 131.809 li
137.414 131.328 li
137.542 131.137 li
137.669 131.24 li
137.797 131.639 li
137.925 132.337 li
138.052 133.316 li
139.074 149.257 li
139.589 159.617 li
139.844 164.402 li
140.1 168.538 li
140.355 171.79 li
140.483 173.016 li
140.61 173.952 li
140.738 174.578 li
140.866 174.884 li
140.994 174.867 li
141.121 174.518 li
141.253 173.85 li
141.381 172.859 li
141.636 169.982 li
@
141.636 169.981 mo
141.892 166.035 li
142.147 161.237 li
143.169 139.241 li
143.428 134.623 li
143.556 132.648 li
143.684 130.937 li
143.811 129.519 li
143.939 128.409 li
144.067 127.633 li
144.194 127.2 li
144.322 127.115 li
144.45 127.382 li
144.577 128 li
144.705 128.965 li
144.961 131.869 li
145.216 135.946 li
145.731 146.651 li
146.242 158.727 li
146.497 164.425 li
146.752 169.458 li
147.008 173.527 li
147.136 175.127 li
147.263 176.4 li
147.395 177.328 li
147.523 177.893 li
147.651 178.097 li
147.778 177.923 li
147.906 177.382 li
148.034 176.475 li
148.161 175.215 li
148.289 173.62 li
148.544 169.516 li
148.8 164.387 li
149.826 139.925 li
150.081 134.576 li
150.336 130.184 li
150.464 128.43 li
150.592 127.012 li
150.719 125.939 li
150.847 125.242 li
150.975 124.918 li
151.103 124.978 li
151.23 125.42 li
151.358 126.246 li
152.384 144.042 li
152.895 156.879 li
153.15 163.073 li
153.405 168.639 li
153.665 173.266 li
@
153.665 173.267 mo
153.793 175.14 li
153.92 176.685 li
154.048 177.877 li
154.176 178.699 li
154.303 179.141 li
154.431 179.197 li
154.559 178.865 li
154.686 178.15 li
154.814 177.06 li
154.942 175.613 li
155.197 171.74 li
155.453 166.743 li
155.968 154.59 li
156.478 141.88 li
156.734 136.219 li
156.989 131.465 li
157.117 129.516 li
157.245 127.881 li
157.372 126.596 li
157.5 125.672 li
157.632 125.119 li
157.76 124.949 li
157.887 125.165 li
158.015 125.757 li
158.143 126.724 li
158.27 128.043 li
158.398 129.704 li
158.526 131.669 li
159.547 154.488 li
160.062 166.227 li
160.318 170.991 li
160.445 172.969 li
160.573 174.642 li
160.701 175.988 li
160.828 176.988 li
160.956 177.626 li
161.084 177.899 li
161.212 177.8 li
161.339 177.336 li
161.467 176.51 li
161.595 175.34 li
161.854 172.041 li
162.11 167.636 li
162.62 156.582 li
163.131 144.715 li
163.642 134.684 li
163.774 132.737 li
163.902 131.074 li
164.029 129.721 li
164.157 128.685 li
@
164.157 128.685 mo
164.285 127.987 li
164.412 127.63 li
164.54 127.621 li
164.668 127.962 li
164.795 128.634 li
164.923 129.634 li
165.179 132.546 li
165.434 136.504 li
165.689 141.28 li
166.204 152.108 li
166.715 162.566 li
166.97 166.916 li
167.226 170.347 li
167.354 171.662 li
167.481 172.684 li
167.609 173.399 li
167.737 173.808 li
167.869 173.901 li
167.996 173.684 li
168.124 173.156 li
168.252 172.335 li
168.762 166.44 li
169.784 147.89 li
170.044 143.404 li
170.299 139.505 li
170.427 137.841 li
170.554 136.394 li
170.682 135.189 li
170.81 134.236 li
170.938 133.542 li
171.065 133.12 li
171.193 132.971 li
171.321 133.091 li
171.448 133.478 li
171.576 134.116 li
171.831 136.117 li
172.091 138.939 li
172.346 142.408 li
172.857 150.389 li
173.368 158.195 li
173.623 161.477 li
173.751 162.886 li
173.879 164.107 li
174.011 165.137 li
174.138 165.963 li
174.266 166.567 li
174.394 166.959 li
174.521 167.125 li
174.649 167.074 li
174.777 166.81 li
@
174.777 166.81 mo
174.904 166.338 li
175.032 165.674 li
175.16 164.828 li
175.415 162.661 li
175.926 156.991 li
176.441 150.759 li
176.696 147.894 li
176.952 145.404 li
177.08 144.34 li
177.207 143.417 li
177.335 142.643 li
177.463 142.021 li
177.59 141.558 li
177.718 141.259 li
177.846 141.122 li
177.973 141.141 li
178.105 141.314 li
178.233 141.633 li
178.361 142.089 li
178.488 142.668 li
178.999 145.945 li
179.51 149.99 li
180.021 153.768 li
180.28 155.289 li
180.408 155.918 li
180.536 156.458 li
180.663 156.901 li
180.791 157.247 li
180.919 157.488 li
181.047 157.638 li
181.174 157.689 li
181.302 157.654 li
181.43 157.536 li
181.557 157.339 li
181.685 157.077 li
181.813 156.756 li
182.068 155.986 li
182.583 154.207 li
182.838 153.365 li
183.094 152.636 li
183.222 152.334 li
183.349 152.075 li
183.477 151.867 li
183.605 151.701 li
183.732 151.585 li
183.86 151.518 li
183.988 151.492 li
184.115 151.504 li
184.247 151.551 li
184.375 151.623 li
@
184.375 151.623 mo
184.503 151.721 li
184.63 151.827 li
184.886 152.053 li
185.014 152.151 li
185.141 152.232 li
185.269 152.287 li
185.397 152.308 li
185.524 152.291 li
185.652 152.232 li
185.78 152.125 li
185.907 151.968 li
186.163 151.5 li
186.422 150.84 li
186.678 150.014 li
187.189 148.103 li
187.444 147.175 li
187.699 146.388 li
187.827 146.077 li
187.955 145.839 li
188.082 145.677 li
188.21 145.605 li
188.342 145.626 li
188.47 145.758 li
188.597 145.996 li
188.725 146.345 li
188.98 147.384 li
189.236 148.856 li
189.747 152.879 li
190.257 157.629 li
190.517 159.927 li
190.772 161.958 li
190.9 162.826 li
191.028 163.567 li
191.156 164.167 li
191.283 164.609 li
191.411 164.882 li
191.539 164.971 li
191.666 164.869 li
191.794 164.571 li
191.922 164.069 li
192.049 163.371 li
192.305 161.387 li
192.564 158.685 li
192.82 155.373 li
193.841 139.846 li
194.097 136.551 li
194.224 135.155 li
194.352 133.963 li
194.484 132.997 li
@
194.484 132.997 mo
194.612 132.282 li
194.739 131.835 li
194.867 131.665 li
194.995 131.788 li
195.123 132.21 li
195.25 132.929 li
195.378 133.946 li
195.633 136.832 li
195.889 140.765 li
196.399 150.963 li
196.914 162.426 li
197.17 167.819 li
197.425 172.531 li
197.553 174.531 li
197.681 176.251 li
197.808 177.655 li
197.936 178.72 li
198.064 179.418 li
198.191 179.733 li
198.319 179.652 li
198.447 179.166 li
198.579 178.277 li
198.706 176.987 li
198.834 175.306 li
198.962 173.254 li
199.473 161.856 li
200.494 132.529 li
200.754 126.259 li
200.881 123.578 li
201.009 121.254 li
201.137 119.334 li
201.265 117.848 li
201.392 116.831 li
201.52 116.299 li
201.648 116.269 li
201.775 116.754 li
201.903 117.759 li
202.031 119.266 li
202.158 121.275 li
202.286 123.752 li
202.541 130.017 li
203.567 165.405 li
204.078 182.316 li
204.206 185.747 li
204.333 188.743 li
204.461 191.25 li
204.589 193.23 li
204.721 194.647 li
204.848 195.469 li
@
204.848 195.469 mo
204.976 195.677 li
205.104 195.26 li
205.232 194.213 li
205.359 192.544 li
205.487 190.267 li
205.615 187.407 li
205.87 180.086 li
206.125 170.94 li
207.151 126.915 li
207.407 117.193 li
207.662 109.225 li
207.79 106.058 li
207.917 103.513 li
208.045 101.631 li
208.173 100.444 li
208.3 99.9837 li
208.428 100.261 li
208.556 101.282 li
208.683 103.044 li
208.943 108.701 li
209.071 112.536 li
209.199 116.98 li
209.709 139.577 li
210.22 166.044 li
210.731 190.463 li
210.99 200.078 li
211.118 203.96 li
211.246 207.14 li
211.374 209.557 li
211.501 211.175 li
211.629 211.966 li
211.757 211.904 li
211.884 210.979 li
212.012 209.2 li
212.267 203.157 li
212.395 198.963 li
212.523 194.051 li
212.778 182.35 li
213.293 153.764 li
213.804 123.633 li
214.059 110.148 li
214.315 98.8007 li
214.442 94.1527 li
214.57 90.2877 li
214.698 87.2697 li
214.826 85.1457 li
214.957 83.9627 li
215.085 83.7367 li
215.213 84.4857 li
@
215.213 84.4858 mo
215.341 86.2058 li
215.468 88.8828 li
215.596 92.4798 li
215.851 102.27 li
216.107 115.073 li
216.362 130.201 li
216.873 164.035 li
217.388 196.247 li
217.643 209.383 li
217.771 214.84 li
217.899 219.442 li
218.026 223.114 li
218.154 225.8 li
218.282 227.451 li
218.409 228.034 li
218.537 227.536 li
218.665 225.953 li
218.793 223.297 li
218.92 219.603 li
219.052 214.916 li
219.18 209.289 li
219.435 195.541 li
219.946 160.847 li
220.457 123.101 li
220.712 105.756 li
220.968 90.8028 li
221.227 79.1278 li
221.355 74.7518 li
221.483 71.4488 li
221.61 69.2738 li
221.738 68.2648 li
221.866 68.4398 li
221.993 69.8098 li
222.121 72.3598 li
222.249 76.0668 li
222.376 80.8768 li
222.504 86.7338 li
223.015 118.878 li
224.041 199.151 li
224.296 215.925 li
224.424 223.076 li
224.551 229.256 li
224.679 234.364 li
224.807 238.331 li
224.935 241.085 li
225.062 242.587 li
225.194 242.8 li
225.322 241.719 li
225.45 239.352 li
@
225.45 239.352 mo
225.577 235.722 li
225.833 224.873 li
226.088 209.741 li
226.599 170.096 li
227.11 125.459 li
227.369 104.408 li
227.625 85.8396 li
227.88 70.8396 li
228.008 64.9716 li
228.135 60.3066 li
228.263 56.9256 li
228.391 54.8876 li
228.518 54.2186 li
228.646 54.9426 li
228.774 57.0496 li
228.902 60.5226 li
229.029 65.3156 li
229.157 71.3686 li
229.417 86.9086 li
229.672 106.306 li
230.693 198.913 li
230.949 219.215 li
231.204 235.872 li
231.336 242.515 li
231.464 247.895 li
231.592 251.93 li
231.719 254.556 li
231.847 255.732 li
231.975 255.433 li
232.102 253.655 li
232.23 250.423 li
232.358 245.772 li
232.485 239.761 li
232.741 224.012 li
233.252 180.913 li
234.022 106.221 li
234.277 84.2736 li
234.533 66.0046 li
234.66 58.5956 li
234.788 52.4916 li
234.916 47.7746 li
235.044 44.5316 li
235.171 42.8036 li
235.299 42.6246 li
235.43 44.0036 li
235.558 46.9226 li
235.685 51.3506 li
235.814 57.2246 li
@
235.814 57.2241 mo
236.069 72.9861 li
236.325 93.3441 li
237.345 195.566 li
237.606 219.045 li
237.861 238.849 li
237.989 247.01 li
238.117 253.837 li
238.244 259.234 li
238.372 263.12 li
238.5 265.431 li
238.627 266.134 li
238.754 265.214 li
238.882 262.678 li
239.01 258.553 li
239.137 252.901 li
239.393 237.326 li
239.653 216.815 li
239.909 192.498 li
240.929 86.1641 li
241.185 64.9201 li
241.313 56.0491 li
241.441 48.5151 li
241.573 42.4411 li
241.701 37.9081 li
241.828 34.9881 li
241.956 33.7241 li
242.084 34.1411 li
242.21 36.2401 li
242.338 39.9861 li
242.466 45.3361 li
242.721 60.5271 li
242.977 80.9791 li
243.488 132.852 li
244.002 189.432 li
244.258 215.491 li
244.513 238.041 li
244.641 247.584 li
244.768 255.782 li
244.897 262.519 li
245.025 267.696 li
245.153 271.228 li
245.28 273.072 li
245.408 273.195 li
245.536 271.591 li
245.668 268.283 li
245.794 263.311 li
246.05 248.678 li
246.305 228.507 li
246.56 203.922 li
@
246.561 203.922 mo
247.582 91.2799 li
247.842 67.5799 li
247.969 57.4279 li
248.097 48.6089 li
248.225 41.2449 li
248.352 35.4519 li
248.481 31.3069 li
248.609 28.8719 li
248.736 28.1819 li
248.864 29.2589 li
248.992 32.0769 li
249.12 36.6059 li
249.247 42.7779 li
249.374 50.5119 li
249.629 70.1979 li
250.911 208.944 li
251.166 233.61 li
251.421 253.679 li
251.549 261.618 li
251.677 268.002 li
251.809 272.74 li
251.936 275.762 li
252.065 277.023 li
252.193 276.507 li
252.703 257.153 li
253.724 157.297 li
254.24 99.0989 li
254.495 73.6669 li
254.75 52.6649 li
254.877 44.2079 li
255.005 37.2779 li
255.133 31.9829 li
255.261 28.3909 li
255.388 26.5559 li
255.516 26.5049 li
255.645 28.2379 li
255.777 31.7279 li
256.797 112.2 li
257.564 200.036 li
257.824 226.017 li
258.079 247.776 li
258.206 256.68 li
258.334 264.086 li
258.461 269.897 li
258.589 274.029 li
258.717 276.422 li
258.844 277.039 li
@
258.845 277.039 mo
258.973 275.881 li
259.101 272.961 li
259.229 268.326 li
259.357 262.035 li
259.613 244.881 li
259.871 222.488 li
260.382 167.312 li
260.893 108.889 li
261.149 82.5921 li
261.405 60.2721 li
261.532 51.0101 li
261.659 43.1861 li
261.787 36.9211 li
261.919 32.2941 li
262.046 29.3741 li
262.174 28.1991 li
262.302 28.7831 li
262.429 31.1151 li
262.557 35.1631 li
262.685 40.8621 li
262.941 56.8751 li
263.197 78.2251 li
263.451 103.691 li
264.477 215.963 li
264.733 238.629 li
264.861 248.163 li
264.989 256.314 li
265.116 262.971 li
265.243 268.036 li
265.371 271.446 li
265.498 273.148 li
265.626 273.127 li
265.754 271.386 li
265.881 267.947 li
266.013 262.865 li
267.035 176.366 li
267.546 119.751 li
267.801 93.5481 li
268.061 70.7591 li
268.188 61.0551 li
268.317 52.6611 li
268.445 45.6981 li
268.572 40.2541 li
268.699 36.4101 li
268.827 34.2181 li
268.955 33.7031 li
269.082 34.8691 li
269.21 37.6911 li
269.338 42.1311 li
@
269.338 42.1309 mo
269.593 55.5679 li
269.848 74.3899 li
270.109 97.4979 li
271.13 204.335 li
271.385 227.022 li
271.64 245.333 li
271.768 252.527 li
271.897 258.264 li
272.024 262.478 li
272.155 265.109 li
272.283 266.125 li
272.411 265.517 li
272.538 263.299 li
272.666 259.502 li
272.794 254.191 li
272.921 247.444 li
273.177 230.061 li
274.713 83.2519 li
274.969 64.9319 li
275.097 57.6109 li
275.224 51.6519 li
275.352 47.1409 li
275.481 44.1309 li
275.608 42.6629 li
275.735 42.7479 li
275.863 44.3869 li
275.99 47.5449 li
276.118 52.1759 li
276.25 58.2029 li
276.505 74.0709 li
276.761 94.2209 li
277.782 192.107 li
278.038 213.895 li
278.297 232.01 li
278.553 245.456 li
278.68 250.19 li
278.808 253.505 li
278.936 255.369 li
279.065 255.757 li
279.192 254.667 li
279.319 252.122 li
279.574 242.864 li
279.702 236.292 li
279.83 228.554 li
280.345 188.42 li
280.856 140.931 li
281.366 96.7539 li
@
281.366 96.7529 mo
281.622 79.0549 li
281.749 71.7549 li
281.877 65.6349 li
282.005 60.7649 li
282.132 57.2159 li
282.26 55.0279 li
282.391 54.2229 li
282.519 54.8109 li
282.647 56.7729 li
282.775 60.0759 li
282.903 64.6639 li
283.414 94.1999 li
284.439 180.235 li
284.695 200.27 li
284.95 217.351 li
285.206 230.554 li
285.333 235.47 li
285.461 239.174 li
287.508 149.529 li
288.018 110.263 li
288.274 93.9909 li
288.402 87.1079 li
288.534 81.1919 li
288.662 76.3179 li
288.789 72.5469 li
288.917 69.9249 li
289.045 68.4869 li
289.173 68.2399 li
289.3 69.1849 li
289.428 71.2919 li
289.555 74.5309 li
289.81 84.1629 li
290.066 97.4809 li
290.581 131.809 li
291.092 169.598 li
291.347 187.117 li
291.602 202.399 li
291.858 214.61 li
291.986 219.357 li
292.114 223.11 li
292.241 225.825 li
292.369 227.473 li
292.497 228.034 li
292.629 227.515 li
292.756 225.928 li
292.884 223.301 li
293.139 215.133 li
293.394 203.539 li
293.65 189.22 li
294.161 155.926 li
@
294.161 155.926 mo
294.676 122.837 li
294.931 108.71 li
295.187 97.2508 li
295.315 92.7178 li
295.442 89.0658 li
295.57 86.3378 li
295.698 84.5588 li
295.825 83.7538 li
295.953 83.9198 li
296.081 85.0528 li
296.208 87.1208 li
296.336 90.0878 li
296.464 93.9058 li
296.723 103.832 li
297.234 130.498 li
297.745 160.881 li
298 175.31 li
298.256 188.149 li
298.511 198.696 li
298.639 202.93 li
298.771 206.404 li
298.898 209.069 li
299.026 210.899 li
299.154 211.869 li
299.282 211.985 li
299.409 211.247 li
299.537 209.672 li
299.665 207.301 li
299.792 204.164 li
300.048 195.839 li
300.303 185.215 li
300.818 159.77 li
301.329 133.704 li
301.584 122.279 li
301.84 112.779 li
301.967 108.91 li
302.095 105.692 li
302.223 103.168 li
302.349 101.367 li
302.477 100.299 li
302.606 99.9798 li
302.734 100.397 li
302.865 101.542 li
302.993 103.385 li
303.121 105.892 li
303.249 109.025 li
303.376 112.724 li
303.887 131.929 li
304.398 154.552 li
304.653 165.52 li
@
304.653 165.52 mo
304.913 175.446 li
305.168 183.785 li
305.296 187.223 li
305.424 190.114 li
305.55 192.424 li
305.678 194.132 li
305.806 195.212 li
305.933 195.668 li
306.062 195.498 li
306.19 194.71 li
306.317 193.332 li
306.445 191.382 li
306.573 188.901 li
306.701 185.933 li
306.96 178.737 li
307.47 160.982 li
307.982 142.311 li
308.492 126.862 li
308.62 123.914 li
308.748 121.408 li
308.876 119.372 li
309.007 117.831 li
309.134 116.8 li
309.262 116.286 li
309.39 116.283 li
309.517 116.785 li
309.646 117.775 li
309.774 119.235 li
310.029 123.434 li
310.284 129.077 li
310.54 135.801 li
311.054 150.792 li
311.566 164.932 li
311.821 170.705 li
311.949 173.126 li
312.076 175.199 li
312.204 176.898 li
312.332 178.212 li
312.459 179.123 li
312.587 179.634 li
312.715 179.737 li
312.841 179.447 li
312.969 178.771 li
313.101 177.727 li
313.358 174.641 li
313.613 170.415 li
314.124 159.748 li
314.633 148.357 li
314.889 143.207 li
315.15 138.793 li
@
315.15 138.794 mo
315.405 135.334 li
315.533 134.014 li
315.66 132.98 li
315.788 132.244 li
315.916 131.805 li
316.043 131.665 li
316.171 131.818 li
316.298 132.248 li
316.425 132.95 li
316.681 135.078 li
316.937 138.028 li
317.197 141.578 li
317.708 149.525 li
318.217 156.999 li
318.473 160.038 li
318.728 162.417 li
318.857 163.324 li
318.985 164.035 li
319.112 164.546 li
319.244 164.857 li
319.372 164.971 li
319.5 164.89 li
319.627 164.631 li
319.754 164.197 li
320.265 161.047 li
320.777 156.505 li
321.292 151.832 li
321.546 149.797 li
321.801 148.112 li
321.929 147.418 li
322.057 146.839 li
322.184 146.366 li
322.312 146.013 li
322.441 145.766 li
322.568 145.634 li
322.696 145.6 li
322.824 145.668 li
322.952 145.826 li
323.079 146.06 li
323.338 146.737 li
323.849 148.558 li
324.36 150.419 li
324.616 151.172 li
324.871 151.747 li
324.999 151.955 li
325.127 152.117 li
325.254 152.228 li
325.385 152.291 li
325.513 152.308 li
325.641 152.287 li
@
325.642 152.287 mo
325.769 152.236 li
325.898 152.155 li
326.153 151.947 li
326.409 151.725 li
326.536 151.632 li
326.663 151.555 li
326.791 151.504 li
326.919 151.491 li
327.046 151.512 li
327.174 151.581 li
327.302 151.691 li
327.434 151.853 li
327.69 152.317 li
327.945 152.96 li
328.455 154.628 li
328.966 156.365 li
329.094 156.735 li
329.221 157.059 li
329.349 157.327 li
329.482 157.527 li
329.61 157.65 li
329.737 157.693 li
329.865 157.642 li
329.993 157.501 li
330.12 157.263 li
330.247 156.927 li
330.502 155.952 li
330.758 154.611 li
331.013 152.951 li
331.529 149.027 li
332.039 145.064 li
332.294 143.4 li
332.422 142.702 li
332.55 142.119 li
332.677 141.655 li
332.805 141.331 li
332.933 141.148 li
333.061 141.118 li
333.188 141.246 li
333.317 141.535 li
333.445 141.987 li
333.577 142.599 li
333.831 144.285 li
334.086 146.52 li
334.597 152.198 li
335.109 158.429 li
335.364 161.298 li
335.623 163.754 li
335.878 165.631 li
336.006 166.304 li
@
336.006 166.304 mo
336.134 166.789 li
336.261 167.066 li
336.389 167.129 li
336.517 166.976 li
336.644 166.597 li
336.773 166.001 li
336.901 165.194 li
337.155 162.962 li
337.411 160.004 li
337.67 156.471 li
338.181 148.456 li
338.693 140.71 li
338.947 137.517 li
339.203 135.061 li
339.33 134.163 li
339.458 133.508 li
339.586 133.108 li
339.718 132.971 li
339.845 133.103 li
339.973 133.512 li
340.101 134.185 li
340.228 135.125 li
340.739 141.254 li
341.765 159.838 li
342.02 164.307 li
342.277 168.159 li
342.403 169.782 li
342.531 171.16 li
342.659 172.281 li
342.786 173.118 li
342.914 173.663 li
343.042 173.898 li
343.17 173.825 li
343.297 173.433 li
343.425 172.732 li
343.553 171.726 li
343.813 168.858 li
344.069 164.971 li
344.323 160.268 li
344.834 149.499 li
345.345 138.947 li
345.6 134.521 li
345.728 132.644 li
345.86 131.032 li
345.987 129.703 li
346.115 128.685 li
346.243 127.991 li
346.37 127.634 li
346.498 127.621 li
346.626 127.953 li
@
346.626 127.953 mo
346.881 129.647 li
347.907 147.439 li
348.418 159.361 li
348.673 164.941 li
348.929 169.832 li
349.056 171.926 li
349.184 173.748 li
349.313 175.263 li
349.439 176.451 li
349.567 177.298 li
349.695 177.783 li
349.822 177.902 li
349.954 177.651 li
350.976 163.673 li
352.002 139.305 li
352.257 134.061 li
352.512 129.809 li
352.64 128.132 li
352.768 126.791 li
352.897 125.804 li
353.023 125.191 li
353.151 124.952 li
353.279 125.097 li
353.406 125.629 li
353.534 126.531 li
353.789 129.409 li
353.917 131.345 li
354.049 133.572 li
354.56 144.766 li
355.071 157.608 li
355.581 169.219 li
355.837 173.718 li
355.964 175.518 li
356.096 176.983 li
356.224 178.094 li
356.352 178.83 li
356.479 179.187 li
356.607 179.154 li
356.735 178.737 li
356.862 177.932 li
356.99 176.762 li
357.118 175.238 li
358.144 153.845 li
358.654 141.178 li
358.91 135.602 li
359.165 130.958 li
359.293 129.073 li
359.421 127.515 li
359.548 126.306 li
@
359.548 126.306 mo
359.676 125.459 li
359.804 124.995 li
359.931 124.91 li
360.059 125.212 li
360.192 125.889 li
360.319 126.94 li
360.446 128.34 li
360.702 132.112 li
361.213 142.697 li
361.723 155.237 li
362.238 166.916 li
362.494 171.594 li
362.621 173.517 li
362.749 175.131 li
362.877 176.413 li
363.005 177.34 li
363.132 177.902 li
363.26 178.098 li
363.388 177.919 li
363.515 177.37 li
363.643 176.464 li
363.772 175.208 li
364.286 167.193 li
364.796 155.905 li
365.307 143.91 li
365.563 138.501 li
365.819 133.895 li
366.073 130.345 li
366.201 129.03 li
366.333 128.047 li
367.356 132.542 li
368.38 152.857 li
368.891 163.588 li
369.148 168.014 li
369.275 169.879 li
369.402 171.478 li
369.53 172.79 li
369.657 173.799 li
369.785 174.489 li
369.913 174.855 li
370.04 174.892 li
370.168 174.603 li
370.296 173.999 li
370.428 173.08 li
371.449 157.22 li
371.96 146.864 li
372.215 142.089 li
372.475 137.943 li
372.603 136.181 li
372.731 134.653 li
@
372.73 134.653 mo
372.858 133.38 li
372.986 132.384 li
373.114 131.673 li
373.241 131.256 li
373.369 131.133 li
373.497 131.307 li
373.624 131.771 li
373.751 132.52 li
374.006 134.797 li
374.262 138.003 li
374.522 141.927 li
375.033 150.98 li
375.543 159.893 li
375.798 163.66 li
376.054 166.695 li
376.181 167.883 li
376.309 168.832 li
376.437 169.534 li
376.57 169.977 li
376.697 170.16 li
376.825 170.079 li
376.953 169.743 li
377.081 169.16 li
377.335 167.295 li
377.463 166.044 li
377.59 164.606 li
378.872 145.745 li
379.127 142.433 li
379.382 139.743 li
379.51 138.671 li
379.638 137.807 li
379.765 137.151 li
379.893 136.713 li
380.022 136.5 li
380.149 136.504 li
380.277 136.73 li
380.405 137.164 li
380.532 137.802 li
380.664 138.633 li
380.919 140.803 li
381.174 143.532 li
382.197 156.412 li
382.452 159.191 li
382.711 161.468 li
382.838 162.379 li
382.966 163.132 li
383.094 163.707 li
383.222 164.108 li
@
383.223 164.107 mo
383.35 164.329 li
383.478 164.371 li
383.607 164.231 li
383.734 163.923 li
383.99 162.822 li
384.117 162.05 li
384.244 161.152 li
384.759 156.603 li
385.27 151.401 li
385.526 148.941 li
385.782 146.753 li
386.036 144.949 li
386.164 144.221 li
386.291 143.621 li
386.419 143.152 li
386.547 142.82 li
386.674 142.625 li
386.806 142.565 li
386.934 142.642 li
387.063 142.846 li
387.191 143.173 li
387.318 143.617 li
387.574 144.813 li
387.828 146.34 li
388.339 149.966 li
388.854 153.593 li
389.11 155.147 li
389.366 156.423 li
389.62 157.36 li
389.748 157.692 li
389.875 157.931 li
390.003 158.076 li
390.131 158.123 li
390.258 158.084 li
390.386 157.952 li
390.514 157.744 li
390.642 157.462 li
390.769 157.109 li
390.902 156.696 li
391.412 154.628 li
391.923 152.351 li
392.433 150.41 li
392.69 149.699 li
392.818 149.418 li
392.949 149.196 li
393.077 149.026 li
393.204 148.908 li
393.332 148.848 li
393.459 148.835 li
393.587 148.869 li
@
393.587 148.869 mo
393.715 148.946 li
393.842 149.065 li
393.97 149.214 li
394.996 150.989 li
395.251 151.393 li
395.507 151.721 li
395.634 151.849 li
395.762 151.951 li
395.89 152.027 li
396.017 152.083 li
396.145 152.108 li
396.274 152.117 li
396.4 152.108 li
396.528 152.079 li
397.043 151.878 li
397.171 151.823 li
397.299 151.776 li
397.426 151.738 li
397.554 151.717 li
397.682 151.708 li
397.809 151.721 li
397.938 151.759 li
398.066 151.815 li
399.091 153.087 li
399.601 153.994 li
399.858 154.39 li
399.984 154.552 li
400.112 154.688 li
400.24 154.79 li
400.367 154.849 li
400.495 154.871 li
400.623 154.841 li
400.75 154.769 li
400.878 154.641 li
401.006 154.466 li
401.138 154.237 li
401.393 153.632 li
401.65 152.849 li
402.159 150.895 li
402.67 148.793 li
402.926 147.856 li
403.053 147.448 li
403.185 147.086 li
403.313 146.784 li
403.441 146.545 li
403.568 146.379 li
403.696 146.286 li
403.824 146.277 li
403.951 146.349 li
404.207 146.745 li
@
404.207 146.745 mo
405.233 151.346 li
405.743 154.641 li
405.999 156.229 li
406.254 157.65 li
406.382 158.263 li
406.509 158.799 li
406.637 159.251 li
406.765 159.608 li
406.893 159.859 li
407.02 160 li
407.148 160.025 li
407.28 159.94 li
407.408 159.732 li
407.535 159.408 li
407.663 158.965 li
407.791 158.416 li
408.046 157.003 li
408.301 155.241 li
408.812 151.044 li
409.327 146.737 li
409.583 144.86 li
409.838 143.332 li
409.966 142.727 li
410.093 142.246 li
410.221 141.897 li
410.349 141.689 li
410.476 141.62 li
410.603 141.701 li
410.732 141.931 li
410.86 142.31 li
411.115 143.485 li
411.243 144.277 li
411.375 145.183 li
411.885 149.772 li
412.396 155.096 li
412.907 159.961 li
413.162 161.851 li
413.29 162.605 li
413.422 163.213 li
413.55 163.665 li
413.677 163.958 li
413.805 164.077 li
413.933 164.026 li
414.06 163.801 li
414.187 163.405 li
414.316 162.839 li
414.443 162.107 li
415.469 151.955 li
415.98 145.907 li
416.235 143.234 li
@
416.235 143.234 mo
416.491 141.016 li
416.618 140.118 li
416.746 139.382 li
416.874 138.82 li
417.002 138.441 li
417.129 138.254 li
417.256 138.258 li
417.384 138.458 li
417.516 138.85 li
417.643 139.433 li
417.772 140.199 li
418.027 142.233 li
418.538 147.907 li
419.048 154.637 li
419.564 160.915 li
419.819 163.426 li
419.947 164.452 li
420.075 165.303 li
420.202 165.972 li
420.33 166.444 li
420.458 166.708 li
420.585 166.763 li
420.713 166.607 li
420.84 166.244 li
420.968 165.669 li
421.095 164.9 li
421.611 160.072 li
422.122 153.321 li
422.632 146.145 li
422.887 142.91 li
423.143 140.165 li
423.399 138.066 li
423.527 137.304 li
423.659 136.743 li
424.679 140.067 li
425.706 153.556 li
426.216 160.664 li
426.471 163.592 li
426.599 164.818 li
426.726 165.861 li
426.855 166.712 li
426.983 167.351 li
427.111 167.768 li
427.238 167.964 li
427.366 167.929 li
427.494 167.67 li
427.621 167.185 li
427.753 166.483 li
428.775 154.781 li
429.286 147.175 li
@
429.286 147.175 mo
429.541 143.668 li
429.801 140.629 li
429.928 139.339 li
430.056 138.232 li
430.183 137.317 li
430.31 136.611 li
430.439 136.121 li
430.567 135.857 li
430.694 135.823 li
430.822 136.015 li
430.95 136.436 li
431.078 137.075 li
431.333 138.969 li
431.588 141.599 li
431.848 144.804 li
432.359 152.193 li
432.87 159.48 li
433.125 162.563 li
433.253 163.886 li
433.38 165.031 li
433.508 165.993 li
433.636 166.75 li
433.763 167.295 li
433.894 167.623 li
434.023 167.725 li
434.151 167.602 li
434.278 167.257 li
434.406 166.696 li
434.661 164.958 li
434.917 162.49 li
436.198 145.192 li
436.453 142.136 li
436.709 139.654 li
436.836 138.675 li
436.964 137.883 li
437.092 137.3 li
437.22 136.921 li
437.347 136.76 li
437.474 136.811 li
437.602 137.079 li
437.73 137.556 li
437.858 138.232 li
437.99 139.105 li
438.245 141.361 li
438.501 144.196 li
439.012 150.908 li
439.522 157.714 li
439.778 160.668 li
440.037 163.098 li
@
440.037 163.098 mo
440.165 164.074 li
440.293 164.869 li
440.42 165.478 li
440.548 165.895 li
440.676 166.109 li
440.803 166.117 li
440.931 165.925 li
441.058 165.537 li
441.187 164.958 li
441.314 164.198 li
441.57 162.179 li
442.085 156.641 li
442.595 150.206 li
442.85 147.107 li
443.106 144.324 li
443.362 142.008 li
443.489 141.067 li
443.617 140.285 li
443.745 139.675 li
443.872 139.242 li
444 138.994 li
444.132 138.931 li
444.26 139.05 li
444.387 139.352 li
444.515 139.829 li
444.642 140.476 li
444.898 142.225 li
445.154 144.49 li
446.179 155.74 li
446.434 158.289 li
446.69 160.431 li
446.818 161.311 li
446.946 162.047 li
447.073 162.639 li
447.201 163.07 li
447.329 163.337 li
447.456 163.444 li
447.584 163.379 li
447.712 163.159 li
447.839 162.78 li
447.967 162.251 li
448.226 160.779 li
448.482 158.847 li
448.737 156.565 li
449.248 151.521 li
449.759 146.801 li
450.014 144.89 li
450.141 144.098 li
450.274 143.425 li
450.402 142.88 li
@
450.402 142.88 mo
450.529 142.472 li
450.657 142.204 li
450.785 142.076 li
450.913 142.089 li
451.04 142.242 li
451.168 142.527 li
451.296 142.944 li
451.55 144.132 li
451.805 145.724 li
452.321 149.691 li
452.832 153.909 li
453.342 157.433 li
453.47 158.114 li
453.597 158.697 li
453.725 159.17 li
453.853 159.536 li
453.981 159.783 li
454.109 159.919 li
454.237 159.936 li
454.369 159.842 li
454.496 159.634 li
454.624 159.323 li
454.88 158.408 li
455.134 157.165 li
455.389 155.679 li
457.437 145.873 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/VVUGZQ+Courier*1 uf/VVUGZQ+Courier uf/GZFBAA+Courier ufreset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
