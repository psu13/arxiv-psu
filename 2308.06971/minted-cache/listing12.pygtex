\begin{Verbatim}[commandchars=\\\{\}]
import list
import oeis

\PYGZhy{}\PYGZhy{} The type of binary tree shapes: empty tree, or a pair of subtrees.
type BT = Unit + BT*BT

||| Compute the size (= number of binary nodes) of a binary tree shape.
size : BT \PYGZhy{}\PYGZgt{} N
size(left(unit)) = 0
size(right(l,r)) = 1 + size(l) + size(r)

||| Check whether all the items in a list satisfy a predicate.
all : List(a) * (a \PYGZhy{}\PYGZgt{} Bool) \PYGZhy{}\PYGZgt{} Bool
all(as, P) = reduce(\PYGZti{}/\PYGZbs{}\PYGZti{}, true, each(P, as))

||| Generate the list of all binary tree shapes of a given size.
!!! all([0..4], \PYGZbs{}n. all(treesOfSize(n), \PYGZbs{}t. size(t) == n))
treesOfSize : N \PYGZhy{}\PYGZgt{} List(BT)
treesOfSize(0)   = [left(unit)]
treesOfSize(n+1) =
  [ right (l,r) | k \PYGZlt{}\PYGZhy{} [0 .. n], l \PYGZlt{}\PYGZhy{} treesOfSize(k), r \PYGZlt{}\PYGZhy{} treesOfSize(n .\PYGZhy{} k) ]

||| The first few Catalan numbers, computed by brute force.
catalan1 : List(N)
catalan1 = each(\PYGZbs{}n. length(treesOfSize(n)), [0..4])

||| More Catalan numbers, extended via OEIS lookup!
catalan : List(N)
catalan = extendSequence(catalan1)
\end{Verbatim}
