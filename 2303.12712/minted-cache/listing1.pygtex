\begin{Verbatim}[commandchars=\\\{\}]
You are given a **0\PYGZhy{}indexed** `m x n` integer matrix `grid` and an integer `k`. You are currently at position `(0, 0)` and you want to reach position `(m \PYGZhy{} 1, n \PYGZhy{} 1)` moving only **down** or **right**.
Return *the number of paths where the sum of the elements on the path is divisible by* `k`. Since the answer may be very large, return it **modulo** `10**9 + 7`.
**Example 1:**
    Input: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3
    Output: 2
    Explanation: There are two paths where the sum of the elements on the path is divisible by k. The first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3. The second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.
**Example 2:**
    Input: grid = [[0,0]], k = 5
    Output: 1
    Explanation: The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.
**Constraints:**
\PYGZhy{}  `m == grid.length`
\PYGZhy{}  `n == grid[i].length`
\PYGZhy{}  `1 \PYGZlt{}= m, n \PYGZlt{}= 5 * 10**4`
\PYGZhy{}  `1 \PYGZlt{}= m * n \PYGZlt{}= 5 * 10**4`
\PYGZhy{}  `0 \PYGZlt{}= grid[i][j] \PYGZlt{}= 100`
\PYGZhy{}  `1 \PYGZlt{}= k \PYGZlt{}= 50`
**Hints:**
\PYGZhy{}  The actual numbers in grid do not matter. What matters are the remainders you get when you divide the numbers by k.
\PYGZhy{}  We can use dynamic programming to solve this problem. What can we use as states?
\PYGZhy{}  Let dp[i][j][value] represent the number of paths where the sum of the elements on the path has a remainder of value when divided by k.
\end{Verbatim}
