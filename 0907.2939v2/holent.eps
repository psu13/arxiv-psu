%!PS-Adobe-2.0 EPSF-2.0
%%Title: H:\holent.fig
%%Creator: fig2dev.exe Version 3.2 Patchlevel 5-alpha7
%%CreationDate: Tue Jun 02 10:39:08 2009
%%For: Mark@LEROY (LEROY)
%%BoundingBox: 0 0 134 236
%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 236 moveto 0 0 lineto 134 0 lineto 134 236 lineto closepath clip newpath
-190.9 234.7 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<00030003000c000c0030003000c000c0030003000c000c00
	30003000c000c00000030003000c000c0030003000c000c0
	030003000c000c0030003000c000c000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P2 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
/Times-Roman ff 360.00 scf sf
3690 2235 m
gs 1 -1 sc (A) col0 sh gr
% Polyline
0 slj
0 slc
7.500 slw
n 4200 3900 m 4200 1500 l 5400 0 l 5400 2400 l
 4200 3900 l  cp gs col0 s gr 
% Polyline
2 slj
n 4508 2140 m 4502 2125 l 4496 2110 l 4492 2095 l 4488 2079 l 4485 2063 l
 4483 2047 l 4483 2030 l 4483 2013 l 4484 1996 l 4486 1979 l
 4489 1962 l 4493 1945 l 4498 1929 l 4503 1913 l 4509 1898 l
 4516 1883 l 4524 1869 l 4532 1855 l 4540 1841 l 4550 1827 l
 4560 1812 l 4571 1798 l 4583 1783 l 4595 1767 l 4608 1751 l
 4621 1735 l 4635 1718 l 4648 1702 l 4661 1685 l 4674 1669 l
 4686 1652 l 4697 1636 l 4708 1620 l 4718 1605 l 4727 1589 l
 4735 1573 l 4745 1553 l 4753 1532 l 4761 1510 l 4769 1488 l
 4776 1467 l 4784 1446 l 4791 1426 l 4798 1408 l 4805 1393 l
 4813 1380 l 4821 1370 l 4830 1364 l 4839 1361 l 4850 1362 l
 4859 1365 l 4869 1370 l 4880 1377 l 4891 1386 l 4904 1398 l
 4917 1412 l 4930 1428 l 4944 1445 l 4957 1465 l 4971 1485 l
 4984 1507 l 4996 1530 l 5008 1553 l 5018 1576 l 5028 1600 l
 5036 1623 l 5044 1647 l 5050 1670 l 5055 1691 l 5058 1713 l
 5061 1735 l 5063 1757 l 5065 1780 l 5066 1804 l 5066 1828 l
 5066 1852 l 5065 1877 l 5063 1901 l 5062 1926 l 5060 1949 l
 5057 1973 l 5055 1995 l 5052 2017 l 5050 2038 l 5048 2058 l
 5045 2077 l 5043 2096 l 5042 2113 l 5040 2135 l 5038 2156 l
 5037 2176 l 5036 2197 l 5035 2217 l 5034 2237 l 5032 2256 l
 5031 2274 l 5029 2291 l 5026 2307 l 5023 2322 l 5019 2336 l
 5015 2348 l 5010 2359 l 5004 2368 l 4997 2377 l 4989 2384 l
 4979 2391 l 4969 2397 l 4957 2402 l 4944 2406 l 4929 2409 l
 4914 2411 l 4897 2412 l 4880 2412 l 4862 2410 l 4844 2408 l
 4826 2404 l 4809 2400 l 4791 2394 l 4774 2388 l 4757 2380 l
 4741 2372 l 4726 2364 l 4710 2355 l 4694 2344 l 4678 2333 l
 4661 2320 l 4645 2307 l 4629 2293 l 4613 2278 l 4597 2263 l
 4583 2247 l 4569 2232 l 4556 2216 l 4544 2200 l 4534 2185 l
 4524 2170 l 4516 2155 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 298.87 90.73] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4830 1360 m 4829 1360 l 4827 1361 l 4822 1363 l 4815 1366 l 4806 1369 l
 4793 1374 l 4778 1380 l 4759 1387 l 4739 1394 l 4715 1403 l
 4690 1412 l 4663 1422 l 4634 1433 l 4604 1444 l 4573 1455 l
 4540 1466 l 4507 1478 l 4472 1490 l 4436 1502 l 4398 1514 l
 4359 1527 l 4317 1540 l 4274 1554 l 4228 1567 l 4180 1582 l
 4130 1596 l 4080 1610 l 4022 1626 l 3967 1640 l 3918 1651 l
 3874 1661 l 3836 1667 l 3805 1671 l 3779 1673 l 3758 1672 l
 3741 1671 l 3727 1668 l 3715 1664 l 3704 1660 l 3694 1656 l
 3683 1653 l 3670 1651 l 3656 1650 l 3638 1651 l 3617 1655 l
 3592 1662 l 3563 1672 l 3530 1686 l 3494 1704 l 3457 1725 l
 3420 1750 l 3388 1775 l 3360 1801 l 3335 1826 l 3313 1850 l
 3294 1872 l 3279 1893 l 3265 1911 l 3254 1928 l 3245 1942 l
 3237 1956 l 3230 1968 l 3224 1980 l 3219 1991 l 3215 2002 l
 3210 2014 l 3207 2026 l 3203 2040 l 3200 2055 l 3197 2072 l
 3195 2090 l 3194 2111 l 3194 2135 l 3197 2160 l 3201 2186 l
 3209 2213 l 3220 2240 l 3235 2265 l 3253 2288 l 3272 2308 l
 3290 2325 l 3307 2339 l 3322 2350 l 3335 2359 l 3346 2365 l
 3356 2370 l 3364 2373 l 3370 2375 l 3376 2377 l 3383 2378 l
 3389 2378 l 3397 2379 l 3407 2380 l 3420 2381 l 3436 2383 l
 3457 2386 l 3483 2390 l 3514 2395 l 3552 2401 l 3597 2408 l
 3649 2415 l 3707 2423 l 3770 2430 l 3824 2435 l 3879 2439 l
 3935 2442 l 3989 2445 l 4043 2446 l 4096 2447 l 4148 2448 l
 4199 2448 l 4249 2447 l 4298 2447 l 4346 2445 l 4394 2444 l
 4441 2442 l 4487 2440 l 4532 2437 l 4576 2435 l 4619 2432 l
 4660 2429 l 4700 2427 l 4737 2424 l 4771 2422 l 4802 2419 l
 4830 2417 l 4854 2415 l 4874 2414 l 4890 2413 l 4902 2412 l
 4910 2411 l 4916 2410 l 4919 2410 l
 4920 2410 l gs col0 s gr 
/Times-Roman ff 360.00 scf sf
4650 2085 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 360.00 scf sf
3720 2055 m
gs 1 -1 sc (~) col0 sh gr
% here ends figure;
$F2psEnd
rs
end
showpage
%%Trailer
%EOF
