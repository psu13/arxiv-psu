%!PS-Adobe-2.0 EPSF-2.0
%%Title: mutual.fig
%%Creator: fig2dev Version 3.2 Patchlevel 4
%%CreationDate: Fri May 22 16:04:11 2009
%%For: mav@hyper.phas.ubc.ca (Mark Van Raamsdonk)
%%BoundingBox: 0 0 239 472
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 472 moveto 0 0 lineto 239 0 lineto 239 472 lineto closepath clip newpath
-174.8 453.4 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% left45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004010002008001004000802000401000200
	8001004000802000401080200040100020080010
	0400080200040100020080010040008020004010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P4 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
7.500 slw
n 4470 7545 m 4470 2723 l 6881 -291 l 6881 4531 l
 4470 7545 l  cp gs col0 s gr 
% Polyline
2 slj
n 5480 2223 m 5484 2200 l 5488 2179 l 5494 2158 l 5500 2139 l 5507 2120 l
 5515 2102 l 5524 2085 l 5533 2070 l 5544 2055 l 5555 2041 l
 5567 2028 l 5581 2016 l 5595 2006 l 5609 1996 l 5625 1988 l
 5642 1981 l 5659 1975 l 5677 1970 l 5695 1967 l 5714 1964 l
 5734 1963 l 5754 1963 l 5774 1964 l 5795 1966 l 5816 1970 l
 5838 1974 l 5860 1979 l 5882 1985 l 5904 1993 l 5927 2001 l
 5950 2010 l 5974 2020 l 5998 2030 l 6022 2042 l 6048 2055 l
 6074 2069 l 6100 2083 l 6127 2099 l 6155 2116 l 6183 2134 l
 6212 2153 l 6241 2173 l 6270 2195 l 6300 2217 l 6329 2240 l
 6358 2263 l 6388 2288 l 6416 2313 l 6445 2339 l 6472 2365 l
 6499 2392 l 6525 2419 l 6549 2446 l 6573 2473 l 6595 2500 l
 6617 2527 l 6636 2555 l 6655 2582 l 6672 2608 l 6688 2635 l
 6702 2661 l 6714 2688 l 6726 2714 l 6736 2740 l 6744 2766 l
 6751 2793 l 6757 2819 l 6761 2846 l 6764 2873 l 6766 2900 l
 6766 2928 l 6765 2956 l 6763 2983 l 6759 3011 l 6754 3039 l
 6748 3067 l 6741 3095 l 6732 3123 l 6723 3150 l 6712 3176 l
 6700 3202 l 6687 3228 l 6673 3253 l 6659 3276 l 6643 3299 l
 6627 3321 l 6611 3342 l 6594 3362 l 6576 3380 l 6558 3398 l
 6540 3414 l 6522 3429 l 6503 3443 l 6484 3456 l 6464 3468 l
 6445 3479 l 6423 3489 l 6401 3499 l 6379 3507 l 6356 3514 l
 6333 3520 l 6308 3524 l 6284 3528 l 6258 3530 l 6233 3531 l
 6206 3530 l 6180 3529 l 6153 3525 l 6126 3521 l 6098 3514 l
 6071 3507 l 6044 3498 l 6017 3488 l 5991 3476 l 5965 3463 l
 5939 3449 l 5914 3434 l 5890 3417 l 5867 3400 l 5844 3381 l
 5822 3361 l 5801 3341 l 5781 3319 l 5761 3296 l 5743 3273 l
 5725 3248 l 5708 3223 l 5692 3198 l 5677 3171 l 5662 3144 l
 5647 3115 l 5633 3084 l 5619 3053 l 5605 3020 l 5592 2987 l
 5580 2952 l 5568 2917 l 5557 2881 l 5546 2844 l 5535 2807 l
 5526 2769 l 5517 2732 l 5509 2694 l 5502 2657 l 5495 2620 l
 5489 2583 l 5484 2547 l 5480 2512 l 5477 2478 l 5474 2445 l
 5472 2413 l 5471 2382 l 5471 2352 l 5471 2324 l 5472 2297 l
 5474 2271 l 5477 2246 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 364.73 130.87] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 4831 4730 m 4828 4706 l 4826 4683 l 4826 4660 l 4827 4637 l 4829 4614 l
 4833 4591 l 4839 4568 l 4846 4546 l 4854 4523 l 4864 4501 l
 4876 4479 l 4888 4458 l 4902 4437 l 4918 4417 l 4934 4397 l
 4951 4378 l 4970 4360 l 4989 4343 l 5009 4327 l 5030 4311 l
 5052 4297 l 5073 4283 l 5096 4271 l 5118 4259 l 5142 4249 l
 5165 4239 l 5189 4230 l 5213 4222 l 5238 4215 l 5263 4208 l
 5290 4203 l 5316 4198 l 5344 4193 l 5372 4190 l 5401 4187 l
 5431 4185 l 5461 4184 l 5492 4185 l 5522 4186 l 5553 4188 l
 5584 4191 l 5615 4195 l 5646 4200 l 5675 4206 l 5705 4213 l
 5733 4221 l 5761 4230 l 5787 4239 l 5812 4250 l 5837 4261 l
 5859 4274 l 5881 4287 l 5901 4301 l 5920 4315 l 5938 4331 l
 5955 4347 l 5971 4365 l 5985 4383 l 5999 4402 l 6011 4423 l
 6023 4445 l 6033 4467 l 6043 4491 l 6051 4516 l 6059 4542 l
 6065 4569 l 6070 4596 l 6074 4625 l 6077 4653 l 6079 4683 l
 6080 4712 l 6079 4741 l 6077 4771 l 6074 4800 l 6071 4828 l
 6066 4857 l 6060 4884 l 6053 4911 l 6045 4938 l 6037 4963 l
 6027 4988 l 6017 5012 l 6006 5035 l 5994 5057 l 5982 5078 l
 5970 5098 l 5956 5118 l 5942 5137 l 5927 5156 l 5911 5174 l
 5894 5192 l 5876 5209 l 5857 5226 l 5837 5243 l 5816 5258 l
 5795 5273 l 5773 5287 l 5750 5300 l 5727 5312 l 5704 5323 l
 5680 5333 l 5655 5341 l 5631 5348 l 5607 5355 l 5582 5360 l
 5558 5363 l 5534 5365 l 5510 5367 l 5486 5366 l 5462 5365 l
 5439 5362 l 5416 5358 l 5393 5353 l 5370 5346 l 5347 5339 l
 5324 5329 l 5301 5319 l 5278 5307 l 5254 5294 l 5231 5280 l
 5207 5264 l 5184 5247 l 5160 5229 l 5136 5209 l 5113 5189 l
 5090 5167 l 5068 5145 l 5046 5121 l 5024 5097 l 5004 5073 l
 4984 5048 l 4965 5022 l 4947 4997 l 4930 4971 l 4915 4945 l
 4900 4920 l 4887 4895 l 4875 4870 l 4865 4846 l 4855 4822 l
 4847 4798 l 4841 4775 l 4835 4752 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P4 [16 0 0 -16 321.73 278.93] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
15.000 slw
n 6210 2865 m 6208 2865 l 6205 2865 l 6199 2866 l 6188 2867 l 6173 2869 l
 6154 2870 l 6128 2873 l 6098 2876 l 6061 2879 l 6019 2884 l
 5972 2888 l 5921 2893 l 5864 2899 l 5805 2905 l 5742 2911 l
 5677 2918 l 5610 2925 l 5542 2932 l 5473 2939 l 5405 2947 l
 5337 2954 l 5271 2961 l 5205 2968 l 5141 2975 l 5079 2982 l
 5019 2989 l 4960 2996 l 4904 3003 l 4849 3010 l 4796 3017 l
 4745 3023 l 4696 3030 l 4648 3036 l 4601 3043 l 4556 3049 l
 4512 3056 l 4468 3063 l 4426 3069 l 4384 3076 l 4343 3083 l
 4301 3090 l 4261 3098 l 4220 3105 l 4170 3114 l 4121 3124 l
 4071 3134 l 4021 3144 l 3971 3155 l 3921 3166 l 3871 3177 l
 3821 3189 l 3771 3202 l 3721 3215 l 3671 3228 l 3622 3242 l
 3573 3256 l 3525 3271 l 3478 3287 l 3432 3302 l 3388 3319 l
 3344 3335 l 3303 3352 l 3263 3369 l 3225 3387 l 3189 3404 l
 3155 3422 l 3123 3441 l 3093 3459 l 3066 3478 l 3042 3496 l
 3020 3515 l 3000 3534 l 2983 3553 l 2969 3572 l 2957 3591 l
 2948 3611 l 2941 3630 l 2937 3650 l 2935 3670 l 2936 3690 l
 2939 3711 l 2945 3733 l 2954 3754 l 2965 3776 l 2978 3799 l
 2994 3822 l 3012 3846 l 3033 3870 l 3056 3894 l 3081 3919 l
 3109 3944 l 3139 3970 l 3170 3995 l 3204 4021 l 3239 4046 l
 3276 4072 l 3315 4098 l 3355 4123 l 3396 4148 l 3438 4172 l
 3480 4196 l 3524 4220 l 3568 4243 l 3612 4265 l 3656 4287 l
 3700 4308 l 3744 4328 l 3788 4347 l 3832 4366 l 3875 4384 l
 3918 4400 l 3961 4417 l 4002 4432 l 4044 4446 l 4085 4460 l
 4124 4472 l 4162 4484 l 4200 4495 l 4238 4505 l 4277 4515 l
 4316 4524 l 4355 4533 l 4395 4541 l 4436 4549 l 4478 4556 l
 4521 4563 l 4565 4569 l 4611 4575 l 4658 4581 l 4707 4586 l
 4758 4591 l 4810 4596 l 4863 4601 l 4917 4605 l 4972 4609 l
 5027 4612 l 5082 4616 l 5136 4619 l 5189 4622 l 5239 4624 l
 5287 4626 l 5331 4628 l 5371 4630 l 5407 4631 l 5437 4632 l
 5462 4633 l 5482 4634 l 5497 4634 l 5508 4635 l 5515 4635 l
 5518 4635 l
 5520 4635 l gs col0 s gr 
/Times-Roman ff 360.00 scf sf
5880 2445 m
gs 1 -1 sc (B) col0 sh gr
/Times-Roman ff 360.00 scf sf
5340 5265 m
gs 1 -1 sc (A) col0 sh gr
/Times-Roman ff 360.00 scf sf
6120 2955 m
gs 1 -1 sc (x) col0 sh gr
/Times-Roman ff 360.00 scf sf
5430 4725 m
gs 1 -1 sc (x) col0 sh gr
% here ends figure;
$F2psEnd
rs
end
showpage
