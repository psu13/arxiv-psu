%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvipsk 5.86 p1.5d Copyright 1996-2001 ASCII Corp.(www-ptex@ascii.co.jp)
%%based on dvipsk 5.86 Copyright 1999 Radical Eye Software (www.radicaleye.com)
%%Title: DoubleDoubleAmpl.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 130 670 460 766
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips DoubleDoubleAmpl -o
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.20:2157
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

 /ed{exch def}def /gs{gsave dup scale}def /gsw{gs /width ed width setlinewidth}def
/p1{/y1 ed /x1 ed}def /p2{/y2 ed /x2 ed}def /abox{newpath x1 y1 moveto
x1 y2 lineto x2 y2 lineto x2 y1 lineto closepath}def

 /arrowdown{ /nwidth { width 1 add } def newpath 0 nwidth 1.5 mul neg
moveto nwidth 1.2 mul nwidth 3 mul rlineto nwidth 2.4 mul neg 0 rlineto
nwidth 1.2 mul nwidth 3 mul neg rlineto closepath fill } def

 /arrowup{ /nwidth { width 1 add } def newpath 0 nwidth 1.5 mul moveto
nwidth 1.2 mul nwidth 3 mul neg rlineto nwidth 2.4 mul neg 0 rlineto
nwidth 1.2 mul nwidth 3 mul rlineto closepath fill } def

 /arrowright{ /nwidth { width 1 add } def newpath nwidth 1.5 mul 0
moveto nwidth 3 mul neg nwidth 1.2 mul rlineto 0 nwidth 2.4 mul neg
rlineto nwidth 3 mul nwidth 1.2 mul rlineto closepath fill } def

 /gluon{ gsw /num ed /ampi ed /dy ed /dx ed p1 /dy dy y1 sub def /dx
dx x1 sub def /dr dx dx mul dy dy mul add sqrt def x1 y1 translate
dy dx atan rotate /num num 0.5 sub round def /inc dr num 2 mul 2 add
div def /amp8 ampi 0.9 mul def amp8 0 lt {/amp8 amp8 neg def} if /x1
inc 2 mul def newpath 0 0 moveto inc 0.1 mul ampi 0.5 mul inc 0.5 mul
ampi inc 1.4 mul ampi curveto x1 amp8 add dup ampi exch ampi neg dup
x1 exch curveto 2 1 num { pop x1 amp8 sub dup ampi neg exch ampi dup
x1 inc add exch curveto /x1 x1 inc dup add add def x1 amp8 add dup
ampi exch ampi neg dup x1 exch curveto } for x1 amp8 sub dup ampi neg
exch ampi dup x1 inc 0.6 mul add exch curveto x1 inc 1.5 mul add ampi
dr inc 0.1 mul sub ampi 0.5 mul dr 0 curveto stroke grestore } def

 /photon{ gsw /num ed /ampi ed p2 p1 /dy y2 y1 sub def /dx x2 x1 sub
def /dr dx dx mul dy dy mul add sqrt def x1 y1 translate dy dx atan
rotate /num num 2 mul 0.5 sub round def /x2 dr num div def /pi 3.141592
def /sign 1 def 1 1 num { pop newpath 0 0 moveto 4 3 div x2 mul pi
div dup neg x2 add 4 3 div ampi sign mul mul dup 3 1 roll x2 0 curveto
stroke /sign sign neg def x2 0 translate } for grestore } def

 /zigzag{ gsw /num ed /ampi ed p2 p1 /dy y2 y1 sub def /dx x2 x1 sub
def /dr dx dx mul dy dy mul add sqrt def x1 y1 translate dy dx atan
rotate /num num 2 mul 0.5 sub round def /x2 dr num div def /pi 3.141592
def /sign 1 def 1 1 num { pop newpath 0 0 moveto x2 2 div ampi sign
mul lineto x2 0 lineto stroke /sign sign neg def x2 0 translate } for
grestore } def

 /photonarc{ gsw /num ed /ampli ed /arcend ed /arcstart ed /radius
ed translate /num num 2 mul round def arcend arcstart lt { /arcend
arcend 360 add def } if /arcend arcend arcstart sub num div def arcstart
rotate /arcstart arcend 2 div def /cp arcend cos def /sp arcend sin
def /cp2 arcstart cos def /sp2 arcstart sin def newpath 1 1 num { pop
radius 0 moveto /beta radius arcend mul 180 ampli mul div def /tt sp
cp beta mul sub cp sp beta mul add div def /amp1 radius ampli add 8
mul beta cp2 mul sp2 sub mul beta 4 cp add mul tt cp mul 3 mul sp 4
mul sub add radius mul sub beta tt sub 3 mul div def radius ampli add
8 mul cp2 mul 1 cp add radius mul sub 3 div amp1 sub dup radius sub
beta mul amp1 dup radius cp mul sub tt mul radius sp mul add radius
cp mul radius sp mul curveto /ampli ampli neg def arcend rotate } for
stroke grestore } def

 /gluearc{ gsw /num ed /ampi ed /arcend ed /arcstart ed /radius ed
translate arcstart rotate /darc arcend arcstart sub def /dr darc 180
div 3.141592 mul radius mul def /const darc dr div def /num num 0.5
sub round def /inc dr num 2 mul 2 add div def /amp8 ampi 0.9 mul def
/amp1 radius ampi add def /amp2 radius ampi sub def /amp3 radius ampi
2 div add def /amp4 amp1 inc amp8 add const mul cos div def /amp5 amp2
amp8 const mul cos div def /amp6 amp1 inc 0.6 mul amp8 add const mul
cos div def /amp7 amp1 inc 0.9 mul const mul cos div def amp8 0 lt
{/amp8 amp8 neg def} if /x1 inc 2 mul def newpath radius 0 moveto inc
0.1 mul const mul dup cos amp3 mul exch sin amp3 mul inc 0.5 mul const
mul dup cos amp7 mul exch sin amp7 mul inc 1.4 mul const mul dup cos
amp1 mul exch sin amp1 mul curveto x1 amp8 add const mul dup cos amp6
mul exch sin amp6 mul x1 amp8 add const mul dup cos amp5 mul exch sin
amp5 mul x1 const mul dup cos amp2 mul exch sin amp2 mul curveto 2
1 num { pop x1 amp8 sub const mul dup cos amp5 mul exch sin amp5 mul
x1 amp8 sub const mul dup cos amp4 mul exch sin amp4 mul x1 inc add
const mul dup cos amp1 mul exch sin amp1 mul curveto /x1 x1 inc dup
add add def x1 amp8 add const mul dup cos amp4 mul exch sin amp4 mul
x1 amp8 add const mul dup cos amp5 mul exch sin amp5 mul x1 const mul
dup cos amp2 mul exch sin amp2 mul curveto } for x1 amp8 sub const
mul dup cos amp5 mul exch sin amp5 mul x1 amp8 sub const mul dup cos
amp6 mul exch sin amp6 mul x1 inc 0.6 mul add const mul dup cos amp1
mul exch sin amp1 mul curveto x1 inc 1.5 mul add const mul dup cos
amp7 mul exch sin amp7 mul dr inc 0.1 mul sub const mul dup cos amp3
mul exch sin amp3 mul dr const mul dup cos radius mul exch sin radius
mul curveto stroke grestore } def

 /arrowarc{ gsw /arcend ed /arcstart ed /radius ed translate newpath
0 0 radius arcstart arcend arc stroke arcstart arcend gt { /arcend
arcend 360 add def } if arcstart arcend add 2 div rotate radius 0 translate
arrowup grestore } def

 /longarrowarc{ gsw /arcend ed /arcstart ed /radius ed translate arcstart
arcend gt { /arcend arcend 360 add def } if /arcmid 540 width 1 add
mul 3.14159 div radius div def newpath 0 0 radius arcstart arcend arcmid
sub arc stroke arcend arcmid 2 div sub rotate radius 0 translate arrowup
grestore } def

 /dasharrowarc{ gsw /dsize ed /arcend1 ed /arcstart1 ed /radius ed
translate arcend1 arcstart1 lt { /arcend1 arcend1 360 add def } if
/arcmid1 arcend1 arcstart1 add 2 div def 0 0 radius arcstart1 arcmid1
dsize width 1 dashcarc 0 0 radius arcmid1 arcend1 dsize width 1 dashcarc
arcmid1 rotate radius 0 translate arrowup grestore } def

 /arrowarcn{ gsw /arcend ed /arcstart ed /radius ed translate newpath
0 0 radius arcstart arcend arcn stroke arcstart arcend lt { /arcstart
arcstart 360 add def } if arcstart arcend add 2 div rotate radius 0
translate arrowdown grestore } def

 /longarrowarcn{ gsw /arcend ed /arcstart ed /radius ed translate arcstart
arcend lt { /arcstart arcstart 360 add def } if /arcmid 540 width 1
add mul 3.14159 div radius div def newpath 0 0 radius arcstart arcend
arcmid add arcn stroke arcend arcmid 2 div add rotate radius 0 translate
arrowdown grestore } def

 /dasharrowarcn{ gsw /dsize ed /arcend1 ed /arcstart1 ed /radius ed
translate arcstart1 arcend1 lt { /arcstart1 arcstart1 360 add def }
if /arcmid1 arcstart1 arcend1 add 2 div def 0 0 radius arcmid1 arcstart1
dsize width 1 dashcarc 0 0 radius arcend1 arcmid1 dsize width 1 dashcarc
arcmid1 rotate radius 0 translate arrowdown grestore } def

 /arrowline{ gsw p2 p1 /dx x2 x1 sub def /dy y2 y1 sub def /dr dx dx
mul dy dy mul add sqrt def x1 y1 translate newpath 0 0 moveto dx dy
rlineto stroke dy dx atan rotate dr 2.0 div 0 translate arrowright
grestore } def

 /longarrow{ gsw p2 p1 /dx x2 x1 sub def /dy y2 y1 sub def /dr dx dx
mul dy dy mul add sqrt def x1 y1 translate dy dx atan rotate newpath
0 0 moveto dr width 3 mul sub 0 rlineto stroke dr width 1.5 mul sub
0 translate arrowright grestore } def

 /dasharrowline{ gsw /dsize ed p2 p1 /dx x2 x1 sub def /dy y2 y1 sub
def /dr dx dx mul dy dy mul add sqrt 2 div def x1 y1 translate dy dx
atan rotate 0 0 dr 0 dsize width 1 dashline dr 0 translate 0 0 dr 0
dsize width 1 dashline arrowright grestore } def

 /line{ gsw p2 p1 newpath x1 y1 moveto x2 y2 lineto stroke grestore
} def

 /dashline{ gsw /dsize ed p2 p1 /r y2 y1 sub dup mul x2 x1 sub dup
mul add sqrt def /dsize r dsize 2 mul div 0.5 sub round dup 0 le {
pop 0 } if 2 mul 1 add r exch div def [dsize dsize] 0 setdash newpath
x1 y1 moveto x2 y2 lineto stroke grestore } def

 /carc{ gsw /arcend ed /arcstart ed /radius ed translate newpath 0
0 radius arcstart arcend arc stroke grestore } def

 /dashcarc{ gsw /dsize ed /arcend ed /arcstart ed /radius ed translate
/dr arcend arcstart sub dup 0 lt { 360 add } if 3.14159 mul 180 div
radius mul def /dsize dr dsize 2 mul div 0.5 sub round dup 0 le { pop
0 } if 2 mul 1 add dr exch div def [dsize dsize] 0 setdash newpath
0 0 radius arcstart arcend arc stroke grestore } def

 /vertex{ gs /dotsize ed translate newpath 0 0 dotsize 0 360 arc fill
stroke grestore } def

 /bcirc{ gsw /radius ed translate gsave 1 setgray newpath 0 0 radius
0 360 arc fill grestore newpath 0 0 radius 0 360 arc stroke grestore
} def

 /gcirc{ gsw /gcolor ed /radius ed translate 1 setgray newpath 0 0
radius 0 360 arc fill gcolor setgray newpath 0 0 radius 0 360 arc fill
0 setgray newpath 0 0 radius 0 360 arc stroke grestore } def

 /ccirc1{ gsw /radius ed translate newpath 0 0 radius 0 360 arc fill
grestore } def

 /ccirc2{ gsw /radius ed translate newpath 0 0 radius 0 360 arc stroke
grestore } def

 /box{ gsw p2 p1 abox stroke grestore } def

 /bbox{ gsw p2 p1 gsave 1 setgray abox fill grestore abox stroke grestore
} def

 /gbox{ gsw /gcolor ed p2 p1 1 setgray abox fill gcolor setgray abox
fill 0 setgray abox stroke grestore } def

 /cbox1{ gsw p2 p1 abox fill grestore } def

 /cbox2{ gsw p2 p1 abox stroke grestore } def

 /btext{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def gsave 1 setgray abox fill grestore
abox stroke hsize 2 div neg fsize 3 div neg moveto thetext show grestore
} def

 /b2text{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def gsave 1 setgray abox fill grestore abox stroke hsize1 2
div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /gtext{ gsw /fsize ed /thetext ed /graysc ed translate /hsize thetext
stringwidth pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul
3 div neg def /x2 x1 neg def /y2 y1 neg def graysc setgray abox fill
0 setgray abox stroke hsize 2 div neg fsize 3 div neg moveto thetext
show grestore } def

 /ctext1{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox fill grestore } def

 /ctext2{ gsw /fsize ed /thetext ed translate /hsize thetext stringwidth
pop def /x1 hsize fsize add 2 div neg def /y1 fsize 2 mul 3 div neg
def /x2 x1 neg def /y2 y1 neg def abox stroke hsize 2 div neg fsize
3 div neg moveto thetext show grestore } def

 /g2text{ gsw /fsize ed /text2 ed /text1 ed /graysc ed translate /hsize1
text1 stringwidth pop def /hsize2 text2 stringwidth pop def hsize1
hsize2 lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize
fsize add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def
/y2 y1 neg def graysc setgray abox fill 0 setgray abox stroke hsize1
2 div neg fsize 6 div moveto text1 show hsize2 2 div neg fsize 5 mul
6 div neg moveto text2 show grestore } def

 /c2text1{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox fill grestore } def

 /c2text2{ gsw /fsize ed /text2 ed /text1 ed translate /hsize1 text1
stringwidth pop def /hsize2 text2 stringwidth pop def hsize1 hsize2
lt { /hsize hsize2 def } { /hsize hsize1 def } ifelse /x1 hsize fsize
add 2 div neg def /y1 fsize neg 7 mul 6 div def /x2 x1 neg def /y2
y1 neg def abox stroke hsize1 2 div neg fsize 6 div moveto text1 show
hsize2 2 div neg fsize 5 mul 6 div neg moveto text2 show grestore }
def

 /ptext{ gs /text ed /fsize ed /mode ed 3 1 roll translate rotate mode
3 lt { 0 fsize neg translate } { mode 6 lt { /mode mode 3 sub def 0
fsize 2 div neg translate } { /mode mode 6 sub def } ifelse } ifelse
/fsize text stringwidth pop def mode 1 eq { fsize 2 div neg 0 translate
} { mode 2 eq { fsize neg 0 translate } if } ifelse 0 0 moveto text
show grestore } def

 /goval{ gsw /gcolor ed /x1 ed /x2 ed /radius ed translate x1 rotate
x2 radius div 1.0 scale 1 setgray newpath 0 0 radius 0 360 arc fill
gcolor setgray newpath 0 0 radius 0 360 arc fill 0 setgray newpath
0 0 radius 0 360 arc stroke grestore } def

 /coval1{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc fill grestore } def

 /coval2{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /oval{ gsw /x1 ed /x2 ed /radius ed translate x1 rotate x2 radius
div 1.0 scale newpath 0 0 radius 0 360 arc stroke grestore } def

 /docurve{ x1 2 mul x2 add 3 div y1 y0 sub x1 x0 sub div x2 x0 sub
mul y2 y0 sub x2 x0 sub div x1 x0 sub mul add y1 add y0 2 mul add 3
div x1 x2 2 mul add 3 div y2 y3 sub x2 x3 sub div x1 x3 sub mul y1
y3 sub x1 x3 sub div x2 x3 sub mul add y2 add y3 2 mul add 3 div x2
y2 curveto } def

 /makecurve{ gsw /points ed /ss points length 2 idiv 2 mul def newpath
ss 4 gt { /x1 points 0 get def /y1 points 1 get def /x2 points 2 get
def /y2 points 3 get def /x3 points 4 get def /y3 points 5 get def
/x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div y2 y1 sub x2 x1
sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul y1 2 mul add
y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed /x0 points ii
get def /y0 points ii 1 add get def /x1 points ii 2 add get def /y1
points ii 3 add get def /x2 points ii 4 add get def /y2 points ii 5
add get def /x3 points ii 6 add get def /y3 points ii 7 add get def
docurve } for /x0 points ss 6 sub get def /y0 points ss 5 sub get def
/x1 points ss 4 sub get def /y1 points ss 3 sub get def /x2 points
ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul x1 sub def
/y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub 2 mul x2 x1
sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve } { ss
4 eq { points 0 get points 1 get moveto points 2 get points 3 get lineto
} if } ifelse stroke grestore } def

 /makedashcurve{ gsw /dsize ed /points ed /ss points length 2 idiv
2 mul def newpath ss 4 gt { /x1 points 0 get def /y1 points 1 get def
/x2 points 2 get def /y2 points 3 get def /x3 points 4 get def /y3
points 5 get def /x0 x1 2 mul x2 sub def /y0 y3 y2 sub x3 x2 sub div
y2 y1 sub x2 x1 sub div sub 2 mul x2 x1 sub dup mul x3 x1 sub div mul
y1 2 mul add y2 sub def x1 y1 moveto docurve 0 2 ss 8 sub { /ii ed
/x0 points ii get def /y0 points ii 1 add get def /x1 points ii 2 add
get def /y1 points ii 3 add get def /x2 points ii 4 add get def /y2
points ii 5 add get def /x3 points ii 6 add get def /y3 points ii 7
add get def docurve } for /x0 points ss 6 sub get def /y0 points ss
5 sub get def /x1 points ss 4 sub get def /y1 points ss 3 sub get def
/x2 points ss 2 sub get def /y2 points ss 1 sub get def /x3 x2 2 mul
x1 sub def /y3 y2 y1 sub x2 x1 sub div y1 y0 sub x1 x0 sub div sub
2 mul x2 x1 sub dup mul x2 x0 sub div mul y2 2 mul add y1 sub def docurve
} { ss 4 eq { points 0 get points 1 get moveto points 2 get points
3 get lineto } if } ifelse centerdash stroke grestore } def

 /pathlength{ flattenpath /dist 0 def { /yfirst ed /xfirst ed /ymoveto
yfirst def /xmoveto xfirst def } { /ynext ed /xnext ed /dist dist ynext
yfirst sub dup mul xnext xfirst sub dup mul add sqrt add def /yfirst
ynext def /xfirst xnext def } {} {/ynext ymoveto def /xnext xmoveto
def /dist ynext yfirst sub dup mul xnext xfirst sub dup mul add sqrt
add def /yfirst ynext def /xfirst xnext def } pathforall dist } def

 /centerdash{ /pathlen pathlength def /jj pathlen dsize div 2.0 div
cvi def /ddsize pathlen jj 2.0 mul div def [ddsize] ddsize 2 div setdash
} def

 /logaxis{ gsw /offset ed /hashsize ed /nlogs ed p2 p1 x1 y1 translate
/y2 y2 y1 sub def /x2 x2 x1 sub def y2 x2 atan rotate /rr x2 dup mul
y2 dup mul add sqrt def offset 0 ne { /offset offset ln 10 ln div def
} if /offset offset dup cvi sub def newpath 0 0 moveto rr 0 lineto
/lsize rr nlogs div def 0 1 nlogs { /x2 ed x2 offset ge { /y2 x2 offset
sub lsize mul def y2 rr le { y2 0 moveto y2 hashsize 1.2 mul lineto
} if } if } for stroke width 0.6 mul setlinewidth newpath 0 1 nlogs
{ /x2 ed 2 1 9 { ln 10 ln div x2 add /xx2 ed xx2 offset ge { /y2 xx2
offset sub lsize mul def y2 rr le { y2 0 moveto y2 hashsize 0.8 mul
lineto } if } if } for } for stroke grestore } def

 /linaxis{ gsw /offset ed /hashsize ed /perdec ed /numdec ed p2 p1
x1 y1 translate /y2 y2 y1 sub def /x2 x2 x1 sub def y2 x2 atan rotate
/rr x2 dup mul y2 dup mul add sqrt def newpath 0 0 moveto rr 0 lineto
/x1 rr numdec perdec mul div def /y1 rr numdec div def /offset offset
x1 mul def 0 1 numdec { y1 mul offset sub dup 0 ge { dup rr le { dup
0 moveto hashsize 1.2 mul lineto } if } if } for stroke width 0.6 mul
setlinewidth newpath offset cvi 1 numdec perdec mul offset add { x1
mul offset sub dup 0 ge { dup rr le { dup 0 moveto hashsize 0.8 mul
lineto } if } if } for stroke grestore } def
 
@fedspecial end TeXDict begin
39158280 55380996 1000 600 600 (DoubleDoubleAmpl.dvi)
@start
%DVIPSBitmapFont: Fa cmr8 8 4
/Fa 4 53 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
> 49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000
FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A
495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6
FCA21C2C7DAB23> I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB80
0F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F80
15C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001E
EB3F00380780FC3801FFF038007FC01C2D7DAB23> I<140EA2141E143EA2147E14FEA2EB
01BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E12
0C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmmi10 10.95 1
/Fb 1 77 df<49B612F0A3D900010180C7FC93C8FC5DA314035DA314075DA3140F5DA314
1F5DA3143F5DA3147F5DA314FF92C9FCA35B5C180C181E0103161C5C183C183813074A15
78187018F0130F4AEC01E0A21703011FED07C04A140F171F013FED3F8017FF4A1303017F
021F1300B9FCA25F373E7DBD3E> 76 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr12 12 4
/Fc 4 99 df<140C141C1438147014E0EB01C01303EB0780EB0F00A2131E5BA25B13F85B
12015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA4127CA312FCB3A2127CA3127E
A4123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13787FA27F7FA2EB0780EB03
C01301EB00E014701438141C140C166476CA26> 40 D<12C07E12707E7E7E120F6C7E6C
7EA26C7E6C7EA21378137C133C133E131E131FA2EB0F80A3EB07C0A3EB03E0A314F0A213
01A214F8A41300A314FCB3A214F8A31301A414F0A21303A214E0A3EB07C0A3EB0F80A3EB
1F00A2131E133E133C137C13785BA2485A485AA2485A48C7FC120E5A5A5A5A5A16647BCA
26> I<EB07FC90383FFF809038F80FE03903C003F048C66C7E000E6D7ED80FC0137E486C
137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90380FFE1FEB3FC0EBFF00EA03
FC485A485A485A485A127F5B176048C7FCA3153FA36D137F007F14EF6D9038C7E0C0003F
13013A1FE00783F13B07F81E03FF802701FFFC0113003A001FE0007C2B2E7CAC31> 97
D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C07E091387001F89039FDE0
007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE03F8A217FCA2160117FEAB
17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F80D9F380EB7E00D9E1C05B
9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F467DC436> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr10 10.95 4
/Fd 4 53 df<EB01C013031307131F137FEA07FFB5FC139FEAF81F1200B3B3ACEB7FF0B6
12F8A31D3D78BC2D> 49 D<EB07FC90383FFF8090B512E03903F01FF83907C007FC390F
0001FE001E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07FA56C5A6CC7FC12
0CC813E0153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A4AC7FC147E147C
5C495A495A495A495A49C71270133E133C5B4914E0485A485A485A48C7120148B6FCA25A
4815C0B7FCA3243D7CBC2D> I<EB07FC90383FFF809038F80FE03901E003F839078001FC
D80F007F000E6D7E001E1580D81F80137F486C14C07FA27F5BA2121F6C5AC8138015FF16
00A24A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC07F86E7E6E7E6E
7E1680ED7FC0A216E0153FA216F0A2120C123F487E487EA316E0A249137F6CC713C01278
EDFF807E6C4913006C495A3907C007FC3903F80FF0C6B55A013F1380D907F8C7FC243F7C
BC2D> I<150E151E153EA2157EA215FE1401A21403EC077E1406140E141CA214381470A2
14E0EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC5A120E120C121C
5AA25A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D> I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 0 1
0 0 bop Fd 518 734 a(1) 518 244 y(2) 1146 b(3) 1709 734
y(4) p Fc 1078 771 a(\(a\)) p Fb 954 646 a(L) p Fa 1016
660 a(1) p Fb 954 322 a(L) p Fa 1016 336 a(2) 480 746
y @beginspecial @setspecial
 82 0 add 22 0 add 32 0 add 22 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial
@setspecial
 82 0 add 47 0 add 32 0 add 47 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial @setspecial
 54 0 add 10 0 add 54 0 add 59 0 add 3.1 0.5 1.0 dashline showpage
 
@endspecial
Fb 1352 646 a(L) p Fa 1414 660 a(4) p Fb 1352 322 a(L) p
Fa 1414 336 a(3) 480 746 y @beginspecial @setspecial
 130 0 add 22 0 add 80 0 add 22 0 add 0.5 1.0 arrowline showpage


@endspecial @beginspecial @setspecial
 130 0 add 47 0 add 80 0 add 47 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial
@setspecial
 102 0 add 10 0 add 102 0 add 59 0 add 3.1 0.5 1.0 dashline showpage
 
@endspecial @beginspecial @setspecial
 29 0 add 22 0 add 12 0 add 5 0 add 0.5 1.0 line showpage
 
@endspecial
@beginspecial @setspecial
 12 0 add 64 0 add 29 0 add 47 0 add 0.5 1.0 line showpage
 
@endspecial @beginspecial
@setspecial
 144 0 add 5 0 add 127 0 add 22 0 add 0.5 1.0 line showpage
 
@endspecial @beginspecial @setspecial
 127 0 add 47 0 add 144 0 add 64 0 add 0.5 1.0 line showpage
 
@endspecial
@beginspecial @setspecial
31 0 add 34.5 0 add 20 10 0 0.5 0.5 1.0 goval showpage
 
@endspecial @beginspecial
@setspecial
79 0 add 34.5 0 add 20 10 0 0.5 0.5 1.0 goval showpage
 
@endspecial @beginspecial @setspecial
127 0 add 34.5 0 add 20 10 0 0.5 0.5 1.0 goval showpage
 
@endspecial
Fd 2095 726 a(1) 2095 144 y(2) 968 b(3) 3108 726 y(4) p
Fc 2581 771 a(\(b\)) p Fb 2181 380 a(L) p Fa 2243 394
a(1) p Fb 2568 380 a(L) p Fa 2630 394 a(2) p Fb 2747
206 a(L) p Fa 2809 220 a(3) p Fb 2747 646 a(L) p Fa 2809
660 a(4) 480 746 y @beginspecial @setspecial
 221 0 add 19 0 add 221 0 add 60 0 add 0.5 1.0 arrowline showpage
 
@endspecial
@beginspecial @setspecial
 248 0 add 19 0 add 248 0 add 60 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial
@setspecial
 290 0 add 22 0 add 247 0 add 22 0 add 0.5 1.0 line showpage
 
@endspecial @beginspecial @setspecial
 290 0 add 60 0 add 247 0 add 60 0 add 0.5 1.0 line showpage
 
@endspecial
@beginspecial @setspecial
 280 0 add 22 0 add 270 0 add 22 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial
@setspecial
 280 0 add 60 0 add 270 0 add 60 0 add 0.5 1.0 arrowline showpage
 
@endspecial @beginspecial @setspecial
 290 0 add 28.5 0 add 312.5 0 add 6 0 add 0.5 1.0 line showpage
 
@endspecial
@beginspecial @setspecial
 290 0 add 53.5 0 add 312.5 0 add 76 0 add 0.5 1.0 line showpage
 
@endspecial @beginspecial
@setspecial
 218 0 add 22 0 add 202 0 add 6 0 add 0.5 1.0 line showpage
 
@endspecial @beginspecial @setspecial
 218 0 add 60 0 add 202 0 add 76 0 add 0.5 1.0 line showpage
 
@endspecial
@beginspecial @setspecial
235 0 add 22 0 add 10 24 0 0.5 0.5 1.0 goval showpage
 
@endspecial @beginspecial
@setspecial
235 0 add 60 0 add 10 24 0 0.5 0.5 1.0 goval showpage
 
@endspecial @beginspecial @setspecial
290 0 add 41 0 add 24 10 0 0.5 0.5 1.0 goval showpage
 
@endspecial
@beginspecial @setspecial
 209 0 add 40 0 add 260 0 add 40 0 add 3.1 0.5 1.0 dashline showpage
 
@endspecial @beginspecial
@setspecial
 270 0 add 10 0 add 270 0 add 72 0 add 3.1 0.5 1.0 dashline showpage
 
@endspecial 90 rotate dyy eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
