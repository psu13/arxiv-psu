%!PS-Adobe-3.0 EPSF-3.0
%%Creator: xpdf/pdftops 3.00
%%LanguageLevel: 2
%%BoundingBox: 0 0 222 125
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  3 1 roll 2 array astore
  /setpagedevice where {
    pop 3 dict begin
      /PageSize exch def
      /ImagingBBox null def
      /Policies 1 dict dup begin /PageSize 3 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% separation convention operators
/findcmykcustomcolor where {
  pop
}{
  /findcmykcustomcolor { 5 array astore } def
} ifelse
/setcustomcolor where {
  pop
}{
  /setcustomcolor {
    exch
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval cvx
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace setcolor
  } def
} ifelse
/customcolorimage where {
  pop
}{
  /customcolorimage {
    gsave
    [ exch /Separation exch dup 4 get exch /DeviceCMYK exch
      0 4 getinterval
      [ exch /dup load exch { mul exch dup } /forall load
        /pop load dup ] cvx
    ] setcolorspace
    10 dict begin
      /ImageType 1 def
      /DataSource exch def
      /ImageMatrix exch def
      /BitsPerComponent exch def
      /Height exch def
      /Width exch def
      /Decode [1 0] def
    currentdict end
    image
    grestore
  } def
} ifelse
% PDF color state
/sCol {
  pdfLastStroke not {
    pdfStroke aload length
    dup 1 eq {
      pop setgray
    }{
      dup 3 eq {
        pop setrgbcolor
      }{
        4 eq {
          setcmykcolor
        }{
          findcmykcustomcolor exch setcustomcolor
        } ifelse
      } ifelse
    } ifelse
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
/fCol {
  pdfLastFill not {
    pdfFill aload length
    dup 1 eq {
      pop setgray
    }{
      dup 3 eq {
        pop setrgbcolor
      }{
        4 eq {
          setcmykcolor
        }{
          findcmykcustomcolor exch setcustomcolor
        } ifelse
      } ifelse
    } ifelse
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q { end grestore } def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% color operators
/g { dup 1 array astore /pdfFill exch def setgray
     /pdfLastFill true def /pdfLastStroke false def } def
/G { dup 1 array astore /pdfStroke exch def setgray
     /pdfLastStroke true def /pdfLastFill false def } def
/rg { 3 copy 3 array astore /pdfFill exch def setrgbcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/RG { 3 copy 3 array astore /pdfStroke exch def setrgbcolor
      /pdfLastStroke true def /pdfLastFill false def } def
/k { 4 copy 4 array astore /pdfFill exch def setcmykcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/K { 4 copy 4 array astore /pdfStroke exch def setcmykcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/ck { 6 copy 6 array astore /pdfFill exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/CK { 6 copy 6 array astore /pdfStroke exch def
      findcmykcustomcolor exch setcustomcolor
      /pdfLastStroke true def /pdfLastFill false def } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/cshow where {
  pop
  /cshow2 {
    dup {
      pop pop
      1 string dup 0 3 index put 3 index exec
    } exch cshow
    pop pop
  } def
}{
  /cshow2 {
    currentfont /FontType get 0 eq {
      0 2 2 index length 1 sub {
        2 copy get exch 1 add 2 index exch get
        2 copy exch 256 mul add
        2 string dup 0 6 5 roll put dup 1 5 4 roll put
        3 index exec
      } for
    } {
      dup {
        1 string dup 0 3 index put 3 index exec
      } forall
    } ifelse
    pop pop
  } def
} ifelse
/awcp {
  exch {
    false charpath
    5 index 5 index rmoveto
    6 index eq { 7 index 7 index rmoveto } if
  } exch cshow2
  6 {pop} repeat
} def
/Tj {
  fCol
  1 index stringwidth pdfTextMat idtransform pop
  sub 1 index length dup 0 ne { div } { pop pop 0 } ifelse
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16 {
  fCol
  2 index stringwidth pdfTextMat idtransform pop
  sub exch div
  pdfWordSpacing pdfHorizScaling mul 0 pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing pdfHorizScaling mul add 0
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj16V {
  fCol
  2 index stringwidth pdfTextMat idtransform exch pop
  sub exch div
  0 pdfWordSpacing pdfTextMat dtransform 32
  4 3 roll pdfCharSpacing add 0 exch
  pdfTextMat dtransform
  6 5 roll Tj1
} def
/Tj1 {
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 8 2 roll
  pdfTextRender 1 and 0 eq {
    6 copy awidthshow
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    7 index 7 index moveto
    6 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    false awcp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    8 6 roll moveto
    false awcp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    8 {pop} repeat
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { pdfFontSize 0.001 mul mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { pdfFontSize 0.001 mul mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2 image operators
/pdfImBuf 100 string def
/pdfIm {
  image
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImSep {
  findcmykcustomcolor exch
  dup /Width get /pdfImBuf1 exch string def
  dup /Decode get aload pop 1 index sub /pdfImDecodeRange exch def
  /pdfImDecodeLow exch def
  begin Width Height BitsPerComponent ImageMatrix DataSource end
  /pdfImData exch def
  { pdfImData pdfImBuf1 readstring pop
    0 1 2 index length 1 sub {
      1 index exch 2 copy get
      pdfImDecodeRange mul 255 div pdfImDecodeLow add round cvi
      255 exch sub put
    } for }
  6 5 roll customcolorimage
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfImM {
  fCol imagemask
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
0 g
0 G
q
[0.1 0 0 0.1 0 0] cm
q
20 w
14.3 M
1 i
0.259 0.992 0.976 RG
1680.29 456.768 m
1677.07 456.448 1674.38 457.754 1672.11 460.754 c
1669.84 463.752 1657.83 475.962 1655.17 477.251 c
1652.51 478.538 1649.84 479.131 1648 478.928 c
1646.16 478.728 1643.06 476.597 1641.66 474.016 c
1640.26 471.433 1634.99 456.934 1633.93 453.323 c
1632.88 449.712 1627.16 447.126 1627.11 447.39 c
S
1627.64 447.581 m
1624.42 447.263 1621.74 448.569 1619.47 451.57 c
1617.2 454.568 1605.18 466.777 1602.53 468.064 c
1599.87 469.353 1597.19 469.944 1595.35 469.744 c
1593.52 469.541 1590.42 467.41 1589.01 464.829 c
1587.61 462.249 1582.34 447.749 1581.29 444.138 c
1580.23 440.527 1574.52 437.942 1574.47 438.206 c
S
1682.79 301.768 m
1679.57 301.448 1676.88 302.756 1674.61 305.754 c
1672.34 308.755 1660.33 320.962 1657.67 322.251 c
1655.01 323.538 1652.34 324.131 1650.5 323.928 c
1648.66 323.728 1645.56 321.597 1644.16 319.016 c
1642.76 316.436 1637.49 301.936 1636.43 298.325 c
1635.38 294.712 1629.66 292.126 1629.62 292.39 c
S
1630.14 292.583 m
1626.92 292.263 1624.24 293.572 1621.97 296.57 c
1619.7 299.568 1607.68 311.777 1605.03 313.064 c
1602.37 314.353 1599.69 314.944 1597.85 314.744 c
1596.02 314.541 1592.92 312.412 1591.51 309.829 c
1590.11 307.249 1584.84 292.749 1583.79 289.138 c
1582.73 285.527 1577.02 282.942 1576.97 283.206 c
S
1170.29 429.268 m
1167.07 428.948 1164.39 430.254 1162.11 433.254 c
1159.84 436.252 1147.83 448.462 1145.17 449.751 c
1142.51 451.038 1139.84 451.628 1138 451.428 c
1136.16 451.226 1133.06 449.094 1131.66 446.514 c
1130.26 443.933 1124.99 429.434 1123.94 425.823 c
1122.88 422.212 1117.17 419.626 1117.12 419.89 c
S
1117.65 420.081 m
1114.42 419.761 1111.74 421.069 1109.47 424.07 c
1107.2 427.068 1095.19 439.277 1092.53 440.564 c
1089.87 441.851 1087.2 442.444 1085.36 442.241 c
1083.52 442.041 1080.42 439.91 1079.02 437.329 c
1077.62 434.749 1072.34 420.249 1071.29 416.638 c
1070.23 413.027 1064.52 410.439 1064.47 410.706 c
S
506.545 651.487 m
509.683 650.686 511.757 648.538 512.865 644.944 c
513.974 641.348 521.084 625.767 523.142 623.647 c
525.201 621.528 527.51 620.056 529.307 619.619 c
531.103 619.18 534.746 620.12 536.945 622.068 c
539.144 624.014 549.057 635.835 551.283 638.867 c
553.509 641.899 559.763 642.375 559.719 642.109 c
S
559.156 642.112 m
562.295 641.311 564.368 639.163 565.477 635.569 c
566.585 631.973 573.695 616.392 575.754 614.272 c
577.812 612.153 580.122 610.681 581.918 610.244 c
583.715 609.805 587.357 610.745 589.556 612.693 c
591.755 614.639 601.668 626.46 603.894 629.492 c
606.121 632.524 612.375 633 612.33 632.734 c
S
956.548 796.484 m
959.686 795.681 961.76 793.535 962.868 789.939 c
963.976 786.345 971.086 770.764 973.145 768.645 c
975.204 766.526 977.513 765.054 979.31 764.614 c
981.106 764.175 984.749 765.117 986.948 767.063 c
989.147 769.009 999.059 780.833 1001.29 783.865 c
1003.51 786.897 1009.77 787.373 1009.72 787.107 c
S
1009.16 787.109 m
1012.3 786.306 1014.37 784.16 1015.48 780.564 c
1016.59 776.97 1023.7 761.389 1025.76 759.27 c
1027.81 757.151 1030.12 755.679 1031.92 755.239 c
1033.72 754.8 1037.36 755.742 1039.56 757.688 c
1041.76 759.634 1051.67 771.458 1053.9 774.49 c
1056.12 777.522 1062.38 777.998 1062.33 777.732 c
S
0 G
11.085 356.758 m
155.085 608.76 l
S
12.1709 861.379 m
156.171 609.38 l
S
0.259 0.992 0.976 RG
422.07 617.026 m
418.84 617.271 416.425 619.026 414.709 622.373 c
412.993 625.72 403.285 639.829 400.89 641.56 c
398.494 643.289 395.964 644.336 394.119 644.458 c
392.273 644.58 388.85 643.02 387.022 640.72 c
385.195 638.42 377.485 625.056 375.819 621.685 c
374.154 618.313 368.077 616.758 368.075 617.026 c
S
368.674 617.075 m
365.445 617.319 363.029 619.075 361.314 622.422 c
359.598 625.769 349.89 639.878 347.494 641.609 c
345.099 643.337 342.569 644.387 340.723 644.507 c
338.878 644.629 335.454 643.069 333.627 640.769 c
331.799 638.469 324.09 625.105 322.424 621.733 c
320.758 618.362 314.682 616.807 314.68 617.075 c
S
315.234 617.17 m
312.004 617.417 309.589 619.17 307.873 622.517 c
306.157 625.864 296.449 639.976 294.054 641.704 c
291.658 643.435 289.128 644.482 287.283 644.602 c
285.437 644.724 282.014 643.164 280.186 640.864 c
278.359 638.567 270.649 625.203 268.984 621.829 c
267.318 618.457 261.241 616.902 261.239 617.17 c
S
261.793 617.268 m
258.563 617.512 256.148 619.265 254.432 622.615 c
252.717 625.962 243.009 640.071 240.613 641.799 c
238.218 643.53 235.688 644.578 233.842 644.697 c
231.997 644.819 228.573 643.259 226.746 640.962 c
224.918 638.662 217.209 625.298 215.543 621.924 c
213.877 618.552 207.8 616.997 207.798 617.266 c
S
208.353 617.363 m
205.123 617.607 202.707 619.363 200.992 622.71 c
199.276 626.057 189.568 640.166 187.173 641.897 c
184.777 643.625 182.247 644.673 180.402 644.795 c
178.556 644.915 175.132 643.354 173.305 641.057 c
171.477 638.757 163.768 625.393 162.102 622.021 c
160.436 618.647 154.36 617.092 154.358 617.361 c
S
1 g
755.508 561.021 m
593.747 583.674 553.837 628.945 667.106 661.296 c
698.57 670.283 734.493 676.868 781.999 682.354 c
962 620 l
755.508 561.021 l
f*
0.212 1 0.035 RG
755.508 561.021 m
593.747 583.674 553.837 628.945 667.106 661.296 c
698.57 670.283 734.493 676.868 781.999 682.354 c
S
1374.56 410.183 m
1213.2 446.499 1135.68 448.779 1202.87 415.232 c
1233.48 399.951 1284.06 381.257 1355.39 358.87 c
1497.05 349.026 l
1374.56 410.183 l
f*
0.149 0.404 1 RG
1374.56 410.183 m
1213.2 446.499 1135.68 448.779 1202.87 415.232 c
1233.48 399.951 1284.06 381.257 1355.39 358.87 c
S
1402.84 833.123 m
1228.19 786.03 1078.45 759.663 1071.15 774.719 c
1064.49 788.438 1175.39 831.406 1332.04 875.803 c
S
1350.26 360.981 m
2222.74 67.6147 l
S
1934.34 207.798 m
2222.34 125.796 l
S
0.212 1 0.035 RG
771.512 680.981 m
2214.01 897.231 l
S
751.512 560.981 m
2209.01 337.231 l
S
0.259 0.992 0.976 RG
1579.05 883.979 m
1582.19 883.176 1584.26 881.03 1585.37 877.434 c
1586.48 873.84 1593.59 858.259 1595.65 856.14 c
1597.71 854.021 1600.02 852.549 1601.81 852.109 c
1603.61 851.67 1607.25 852.612 1609.45 854.558 c
1611.65 856.504 1621.56 868.328 1623.79 871.36 c
1626.01 874.392 1632.27 874.868 1632.22 874.602 c
S
1631.66 874.604 m
1634.8 873.801 1636.87 871.655 1637.98 868.059 c
1639.09 864.465 1646.2 848.884 1648.26 846.765 c
1650.32 844.646 1652.63 843.174 1654.42 842.734 c
1656.22 842.295 1659.86 843.237 1662.06 845.183 c
1664.26 847.129 1674.17 858.953 1676.4 861.985 c
1678.63 865.017 1684.88 865.493 1684.84 865.227 c
S
0.149 0.404 1 RG
1306.51 868.481 m
2214.01 1149.73 l
S
1394 831.001 m
2216.51 1082.23 l
S
1356.51 413.481 m
2211.51 262.231 l
S
1934 957.5 m
2216.51 1034.73 l
S
1926.5 894.5 m
2214.5 966.499 l
S
1926.41 896.021 m
1756.52 854.902 1650.53 843.655 1691.65 871.108 c
1721.81 891.24 1817.8 925.566 1943.88 961.301 c
S
1921.8 271.287 m
2211.51 194.731 l
S
1926.41 269.819 m
1756.52 310.938 1650.53 322.185 1691.65 294.731 c
1721.81 274.6 1817.8 240.273 1943.88 204.539 c
S
1849.02 435.286 m
2211.52 412.161 l
S
1926.93 490.752 m
1752.19 486.497 1646.9 469.929 1693.73 454.055 c
1719.22 445.41 1779.19 438.801 1867.72 434.878 c
S
1924 491.001 m
2212 491.001 l
S
1 0.071 0 RG
2222.2 8.61328 m
435.866 618.96 l
S
2208.75 1230.8 m
422.41 620.454 l
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
