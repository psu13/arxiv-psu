%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.0.1.
%%For: () ()
%%Title: (/home/john/Papers/Papers/comm/preprint/fig2.ai)
%%CreationDate: (5/30/95) (13:00)
%%BoundingBox: 164 295 510 573
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%+ Times-Italic
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Black&White
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Header
%%Template:
%%PageOrigin:30 31
%%AI3_PaperRect:0 792 612 0
%%AI3_Margin:30 31 30 31
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec

%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking

%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def

% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll

		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....

			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def

/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def

% re-define font
% expected arguments
% for 'normal fonts : 
%	[ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% 	[ ... number value stream ... /_Helvetica-Bold/Helvetica-Bold 
%	direction fontScript defaultEncoding TZ
/TZ		
{
	% platform dependent coding flag
	/_useNativeEncoding exch def

	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	findfont dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the use platform encoding flag is true
		% install AI platform encoding
		% else leave the base encoding in effect

		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def

% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def

/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def

/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def

/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def

/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def

/i1
{
W N
} def

/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def

/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def

/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def

% font operators

% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def

/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def

% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def

/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def

% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def

/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def

/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def

/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def

/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def


% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def

/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def

/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def

/Tt	% set user tracking				% userTracking Tt -
{
pop
} def

/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def

/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def

/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def

/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def

/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def

/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def

/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def

/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def

/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def


% Text Bodies
/TX {pop} def

%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -

/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def

/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def

/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def

/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def

/T+	% discretionary hyphen hyphen	% - T+ -
{} def

/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def

/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def

currentdict readonly pop end
setpacking

%%EndResource

%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 1
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)

currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put

% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def

% paint operators
/cf	currentflat def	% - cf flatness

% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def

% typography operators
/Tx {} def
/Tj {} def

% compound path operators
/CRender {} def

% printing
/_AI3_savepage {} def

% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def

% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def

% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse

% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def

% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def

% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def

% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~					% - ~ -
{
end
_i restore
} def

% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def

% locked object operator
/A					% value A -
{
pop
} def

currentdict readonly pop end
setpacking

% annotate page operator
/annotatepage
{
} def
%%EndResource
%AI3-Grid.0 18 18 3 0 0 0 3
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Times-Italic
Adobe_cmykcolor /initialize get exec

Adobe_cshow /initialize get exec

Adobe_customcolor /initialize get exec

Adobe_typography_AI3 /initialize get exec


Adobe_IllustratorA_AI3 /initialize get exec

[
129/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/mu/multiply
/divide/copyright 176/registered 181/brokenbar 190/logicalnot 
192/onesuperior 201/twosuperior 204/threesuperior 209/plusminus
/onequarter/onehalf/threequarters/agrave/aacute/acircumflex
/atilde/adieresis/aring/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave 226/iacute 228/icircumflex/idieresis/eth/ntilde 
236/ograve/oacute/ocircumflex/otilde/odieresis 242/ugrave/uacute
/ucircumflex 246/udieresis/yacute 252/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding
%%EndSetup
1 A
u
0 R
0 G
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
202.75 558.25 m
204.2624 557.5659 204.0022 555.7406 204.9057 554.9218 c
205.339 554.5291 205.6938 556.3618 206.1271 556.0685 c
207.4564 555.1686 206.1355 552.7639 207.389 551.9692 c
208.3666 551.3495 207.8973 553.3476 208.75 553.75 C
208.4385 552.5147 209.2007 551.4337 209.25 550.25 C
210.163 550.8866 210.6551 551.8589 211.25 552.75 C
212.6915 551.7691 211.9925 549.7943 212.9145 548.9244 c
213.5226 548.3508 214.0239 549.8289 214.75 550.25 C
215.0847 548.4313 215.2708 546.601 215.25 544.75 C
217.0279 545.0375 217.3439 547.029 218.75 547.75 C
217.8901 545.6358 218.3645 543.4215 218.25 541.25 C
219.8094 541.7924 219.8269 544.819 221.6472 544.0167 c
222.6409 543.5788 222.9747 541.9 224.2526 541.2551 c
226.9475 539.895 227.9385 543.5163 230.25 543.25 C
229.3626 541.1677 229.1617 538.9613 229.3224 536.7553 c
229.3492 536.3876 229.863 535.9947 230.1954 536.3079 c
231.1757 537.2312 232.6165 537.4769 233.25 538.75 C
234.2585 537.5849 233.7505 535.8459 234.4761 534.929 c
235.9333 533.0876 236.2476 536.6936 237.2833 537.179 c
237.689 537.3691 238.4973 538.3994 238.6232 537.2363 c
238.7938 535.6594 239.6512 534.1479 240.4758 533.5748 c
241.6564 532.754 242.5648 535.4783 244.25 535.75 C
244.2388 533.9293 243.8032 531.5991 245.8199 530.9767 c
247.6352 530.4164 248.2566 532.9627 249.75 533.75 C
249.8819 531.1656 250.9113 528.4217 252.5588 527.15 c
253.8522 526.1516 254.2697 529.396 255.75 530.25 C
255.5314 528.7065 255.5404 526.7678 256.4624 526.0076 c
258.2263 524.5532 259.2376 528.7851 260.5129 527.906 c
261.6235 527.1404 260.5647 524.3119 262.3329 523.4131 c
264.9912 522.0619 266.1274 525.8538 268.75 526.25 C
268.665 524.8115 268.7126 523.0039 269.8566 522.485 c
271.5055 521.737 273.0946 523.5532 274.75 524.25 C
274.2382 522.1459 276.0586 519.911 278.2207 520.3839 c
279.2307 520.6048 279.2701 521.9044 279.75 522.75 C
280.5791 521.7461 280.952 519.8815 282.2321 519.981 c
283.1953 520.0558 283.8973 521.8595 284.7873 521.9844 c
285.9966 522.1541 286.0226 519.8394 287.2797 519.3222 c
288.9851 518.6205 289.4797 520.9985 291.25 521.25 C
291.3253 520.454 291.6982 519.5662 292.292 519.4003 c
294.0585 518.9066 295.2391 520.4267 296.75 521.25 C
296.0817 520.9158 295.4166 520.5833 294.75 520.25 C
296.6633 520.9538 298.7873 520.9866 300.0781 519.591 c
300.7533 518.8611 301.3721 517.8132 302.1136 518.4174 c
303.1271 519.243 304.0248 520.4445 305.1897 520.065 c
306.3212 519.6964 306.0856 516.7638 307.6035 517.5375 c
308.2728 517.8787 309.6628 518.4526 309.75 519.75 C
311.2869 519.2861 311.6394 517.557 312.8303 516.8943 c
314.3445 516.0516 314.9684 518.5128 316.75 518.75 C
316.4788 517.5045 317.7444 517.4129 318.25 516.75 C
319.1226 517.4188 319.5362 518.6264 320.348 519.0713 c
322.1957 520.084 323.6258 516.9834 325.7294 517.803 c
326.965 518.2845 327.1809 520.6979 328.6617 520.0486 c
329.3367 519.7526 329.5752 517.5308 330.6086 518.4152 c
331.3079 519.0135 332.1984 519.5074 332.9024 520.0535 c
334.1644 521.0324 335.6859 518.6357 337.1932 519.3671 c
338.2068 519.8589 338.7916 521.3157 339.7969 521.5348 c
341.003 521.7978 340.6272 518.8574 342.1905 519.4164 c
343.5553 519.9044 344.5248 521.5288 346.25 521.25 C
346.0726 520.409 346.8663 520.0446 347.2986 519.8713 c
349.2717 519.0807 350.432 521.8298 352.2258 521.5778 c
353.073 521.4588 353.5157 519.8414 354.7193 520.3262 c
355.7355 520.7355 355.8031 522.4952 356.7627 522.5593 c
358.0712 522.6467 359.5212 520.3474 360.4975 521.4697 c
361.1893 522.2649 362.1459 523.0127 362.9042 523.5193 c
364.3124 524.4601 365.9297 522.3977 367.738 522.8036 c
368.9772 523.0817 369.3815 525.1323 370.6844 524.592 c
371.7018 524.1702 372.7352 523.4347 373.6877 523.8824 c
374.6901 524.3536 374.4316 526.4014 376.25 526.25 C
376.0072 525.9 375.4598 525.535 375.394 525.7875 c
374.9832 527.3641 376.7006 528.1045 377.8316 528.5363 c
380.022 529.3726 378.3917 525.8052 380.75 525.25 C
381.193 527.2518 382.376 528.8069 383.75 530.25 C
383.7247 529.2179 383.6132 528.1717 384.25 527.25 C
385.4888 528.6056 385.4506 531.3723 387.738 531.1346 c
388.9155 531.0123 388.2169 528.8903 389.75 528.75 C
389.5453 530.6381 390.4902 532.1084 391.8455 533.1224 c
393.0118 533.9952 392.6881 531.5847 393.7338 531.8217 c
395.7587 532.2806 394.7168 535.1911 396.75 535.75 C
396.1349 535.0252 397.865 535.4747 397.25 534.75 C
399.6648 534.8917 400.9027 537.4273 402.75 538.75 C
402.4167 538.75 402.0833 538.75 401.75 538.75 C
402.0634 538.4897 401.6535 537.3089 401.9797 537.8993 c
402.7821 539.3516 402.2928 541.4314 404.75 541.75 C
404.4932 540.8319 404.8569 539.6934 405.3488 539.4479 c
406.9437 538.6519 406.4036 541.8457 407.7067 541.5554 c
408.4654 541.3864 408.4811 539.2048 409.6163 539.9528 c
410.0173 540.2171 409.636 541.405 409.807 542.2383 c
409.889 542.6381 410.2643 542.8866 410.75 542.75 C
410.429 542.0871 411.2276 541.7983 411.25 541.25 C
413.1278 541.4213 413.2031 543.8034 414.7765 544.1168 c
415.0434 544.1699 415.4241 543.3539 415.7461 543.3649 c
417.5166 543.4253 417.704 545.7389 417.75 547.25 C
417.6137 546.7647 417.8995 546.492 418.25 546.25 C
418.6617 548.9112 420.5132 549.397 422.25 551.25 C
422.1137 550.7647 422.392 550.3418 422.7534 550.3254 c
425.0621 550.2208 424.7628 553.9768 427.241 553.6759 c
427.5859 553.634 426.6371 552.6105 427.75 552.75 C
427.4445 554.2435 429.0555 555.2566 428.75 556.75 C
430.2944 556.5238 431.699 557.3382 433.2302 557.4735 c
433.9094 557.5335 432.135 557.5253 432.75 558.25 c
S
U
u
203.6703 309.8492 m
205.1827 310.5332 204.9225 312.3585 205.826 313.1773 c
206.2594 313.57 206.6142 311.7374 207.0475 312.0307 c
208.3767 312.9305 207.0558 315.3353 208.3093 316.1299 c
209.2869 316.7497 208.8176 314.7516 209.6703 314.3492 C
209.3589 315.5844 210.121 316.6655 210.1703 317.8492 C
211.0833 317.2126 211.5755 316.2402 212.1703 315.3492 C
213.6119 316.3301 212.9129 318.3049 213.8349 319.1747 c
214.443 319.7484 214.9443 318.2703 215.6703 317.8492 C
216.0051 319.6678 216.1912 321.4982 216.1703 323.3492 C
217.9483 323.0617 218.2642 321.0702 219.6703 320.3492 C
218.8105 322.4634 219.2848 324.6777 219.1703 326.8492 C
220.7298 326.3068 220.7472 323.2802 222.5676 324.0825 c
223.5613 324.5204 223.895 326.1992 225.1729 326.8441 c
227.8679 328.2042 228.8589 324.5829 231.1703 324.8492 C
230.283 326.9315 230.082 329.1378 230.2428 331.3439 c
230.2696 331.7116 230.7833 332.1045 231.1158 331.7913 c
232.0961 330.868 233.5368 330.6223 234.1703 329.3492 C
235.1789 330.5142 234.6708 332.2532 235.3965 333.1702 c
236.8537 335.0115 237.168 331.4056 238.2036 330.9202 c
238.6093 330.7301 239.4177 329.6997 239.5435 330.8629 c
239.7142 332.4398 240.5716 333.9512 241.3961 334.5244 c
242.5768 335.3451 243.4852 332.6209 245.1703 332.3492 C
245.1592 334.1699 244.7235 336.5001 246.7403 337.1225 c
248.5556 337.6827 249.1769 335.1365 250.6703 334.3492 C
250.8022 336.9335 251.8317 339.6774 253.4791 340.9492 c
254.7725 341.9476 255.1901 338.7032 256.6703 337.8492 C
256.4517 339.3927 256.4608 341.3314 257.3827 342.0916 c
259.1466 343.546 260.158 339.3141 261.4332 340.1932 c
262.5439 340.9587 261.485 343.7873 263.2532 344.6861 c
265.9116 346.0373 267.0478 342.2454 269.6703 341.8492 C
269.5854 343.2877 269.633 345.0953 270.7769 345.6142 c
272.4258 346.3622 274.0149 344.546 275.6703 343.8492 C
275.1586 345.9533 276.9789 348.1882 279.141 347.7153 c
280.1511 347.4944 280.1904 346.1948 280.6703 345.3492 C
281.4994 346.3531 281.8724 348.2176 283.1524 348.1182 c
284.1157 348.0433 284.8177 346.2397 285.7076 346.1148 c
286.917 345.9451 286.9429 348.2598 288.2 348.777 c
289.9055 349.4786 290.4001 347.1006 292.1703 346.8492 C
292.2457 347.6451 292.6186 348.533 293.2123 348.6989 c
294.9788 349.1926 296.1595 347.6725 297.6703 346.8492 C
297.002 347.1833 296.337 347.5159 295.6703 347.8492 C
297.5836 347.1454 299.7077 347.1126 300.9985 348.5082 c
301.6736 349.2381 302.2924 350.2859 303.034 349.6818 c
304.0474 348.8562 304.9452 347.6547 306.11 348.0342 c
307.2416 348.4028 307.006 351.3354 308.5239 350.5617 c
309.1932 350.2205 310.5831 349.6466 310.6703 348.3492 C
312.2072 348.813 312.5597 350.5422 313.7507 351.2049 c
315.2649 352.0475 315.8887 349.5864 317.6703 349.3492 C
317.3992 350.5947 318.6647 350.6863 319.1703 351.3492 C
320.043 350.6804 320.4565 349.4728 321.2683 349.0279 c
323.1161 348.0152 324.5461 351.1158 326.6497 350.2961 c
327.8853 349.8147 328.1013 347.4013 329.582 348.0506 c
330.257 348.3466 330.4955 350.5684 331.529 349.684 c
332.2282 349.0856 333.1187 348.5918 333.8227 348.0457 c
335.0847 347.0668 336.6063 349.4635 338.1135 348.7321 c
339.1271 348.2402 339.712 346.7835 340.7172 346.5643 c
341.9234 346.3013 341.5475 349.2418 343.1109 348.6828 c
344.4756 348.1948 345.4451 346.5704 347.1703 346.8492 C
346.993 347.6902 347.7867 348.0546 348.2189 348.2278 c
350.1921 349.0185 351.3524 346.2694 353.1462 346.5214 c
353.9933 346.6404 354.4361 348.2578 355.6396 347.773 c
356.6558 347.3636 356.7234 345.6039 357.683 345.5399 c
358.9915 345.4524 360.4416 347.7518 361.4178 346.6295 c
362.1097 345.8342 363.0662 345.0865 363.8245 344.5799 c
365.2328 343.6391 366.85 345.7015 368.6583 345.2956 c
369.8975 345.0175 370.3018 342.9669 371.6048 343.5072 c
372.6222 343.929 373.6556 344.6645 374.6081 344.2167 c
375.6104 343.7455 375.352 341.6978 377.1703 341.8492 C
376.9275 342.1992 376.3802 342.5642 376.3144 342.3116 c
375.9036 340.735 377.6209 339.9947 378.7519 339.5629 c
380.9424 338.7266 379.3121 342.294 381.6703 342.8492 C
382.1134 340.8474 383.2963 339.2923 384.6703 337.8492 C
384.6451 338.8813 384.5335 339.9274 385.1703 340.8492 C
386.4091 339.4935 386.3709 336.7269 388.6584 336.9645 c
389.8359 337.0869 389.1372 339.2089 390.6703 339.3492 C
390.4657 337.4611 391.4106 335.9908 392.7658 334.9767 c
393.9322 334.1039 393.6085 336.5145 394.6541 336.2775 c
396.679 335.8186 395.6371 332.908 397.6703 332.3492 C
397.0553 333.074 398.7853 332.6244 398.1703 333.3492 C
400.5851 333.2075 401.8231 330.6719 403.6703 329.3492 C
403.3371 329.3492 403.0037 329.3492 402.6703 329.3492 C
402.9837 329.6095 402.5738 330.7903 402.9001 330.1999 c
403.7024 328.7476 403.2132 326.6678 405.6703 326.3492 C
405.4135 327.2673 405.7772 328.4058 406.2691 328.6513 c
407.864 329.4473 407.324 326.2534 408.627 326.5438 c
409.3857 326.7128 409.4014 328.8944 410.5367 328.1463 c
410.9377 327.8821 410.5563 326.6941 410.7274 325.8609 c
410.8094 325.4611 411.1846 325.2126 411.6703 325.3492 C
411.3493 326.0121 412.1479 326.3008 412.1703 326.8492 C
414.0482 326.6779 414.1235 324.2958 415.6969 323.9824 c
415.9637 323.9292 416.3445 324.7453 416.6664 324.7343 c
418.4369 324.6739 418.6244 322.3603 418.6703 320.8492 C
418.5341 321.3345 418.8199 321.6071 419.1703 321.8492 C
419.5821 319.188 421.4336 318.7021 423.1703 316.8492 C
423.0341 317.3345 423.3123 317.7574 423.6738 317.7738 c
425.9824 317.8784 425.6832 314.1223 428.1613 314.4233 c
428.5063 314.4651 427.5575 315.4886 428.6703 315.3492 C
428.3648 313.8556 429.9758 312.8426 429.6703 311.3492 C
431.2147 311.5754 432.6193 310.761 434.1506 310.6257 c
434.8297 310.5657 433.0554 310.5739 433.6703 309.8492 c
S
U
u
193 309 m
443 559 l
S
193 559 m
443 309 l
S
0 To
0.7071 0.7071 -0.7071 0.7071 440.625 552.3125 0 Tp
TP
1 Tr
/_Helvetica 12 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(>) Tx 
(\r) TX 
TO
0 To
-0.7071 -0.7071 0.7071 -0.7071 195.3926 315.7145 0 Tp
TP
1 Tr
(>) Tx 
(\r) TX 
TO
0 To
-0.7071 0.7071 -0.7071 -0.7071 199.7676 556.6519 0 Tp
TP
1 Tr
(>) Tx 
(\r) TX 
TO
0 To
0.7071 -0.7071 0.7071 0.7071 436.3926 311.402 0 Tp
TP
1 Tr
(>) Tx 
(\r) TX 
TO
U
0 To
1 0 0 1 177 551 0 Tp
TP
1 Tr
/_Times-Italic 12 Tf
(U) Tx 
(\r) TX 
TO
0 To
1 0 0 1 451 550 0 Tp
TP
1 Tr
(V) Tx 
(\r) TX 
TO
343.875 479.375 m
468.9913 524.9141 l
S
u
267.2696 494.9421 m
281.5892 482.059 299.0961 474.4842 318 474.4842 c
S
267.25 495 m
196.875 558.875 l
S
357.5992 486.3845 m
345.7197 478.7728 332.2866 474.4842 318.0625 474.4842 c
S
U
317.9375 474.5 m
489.4554 474.5 l
S
332.4375 476 m
480.5652 502.1186 l
S
357.75 486.5 m
456.3212 543.41 l
S
307.3437 475.2812 m
493.9409 442.3796 l
S
278.2812 486.4062 m
481.9582 368.8121 l
S
0 To
1 0 0 1 474 477 0 Tp
TP
1 Tr
(t = 0) Tx 
(\r) TX 
TO
%%PageTrailer
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec

Adobe_typography_AI3 /terminate get exec


Adobe_customcolor /terminate get exec

Adobe_cshow /terminate get exec

Adobe_cmykcolor /terminate get exec

Adobe_packedarray /terminate get exec

%%EOF
